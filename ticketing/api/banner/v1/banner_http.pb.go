// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.2
// - protoc             (unknown)
// source: ticketing/api/banner/v1/banner.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationTicketingBannerServiceCreateBanner = "/ticketing.api.banner.v1.TicketingBannerService/CreateBanner"
const OperationTicketingBannerServiceDeleteBanner = "/ticketing.api.banner.v1.TicketingBannerService/DeleteBanner"
const OperationTicketingBannerServiceListBanner = "/ticketing.api.banner.v1.TicketingBannerService/ListBanner"
const OperationTicketingBannerServiceUpdateBanner = "/ticketing.api.banner.v1.TicketingBannerService/UpdateBanner"

type TicketingBannerServiceHTTPServer interface {
	CreateBanner(context.Context, *CreateBannerRequest) (*Banner, error)
	DeleteBanner(context.Context, *DeleteBannerRequest) (*DeleteBannerReply, error)
	ListBanner(context.Context, *ListBannerRequest) (*ListBannerReply, error)
	UpdateBanner(context.Context, *UpdateBannerRequest) (*Banner, error)
}

func RegisterTicketingBannerServiceHTTPServer(s *http.Server, srv TicketingBannerServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/ticketing/banner/list", _TicketingBannerService_ListBanner0_HTTP_Handler(srv))
	r.GET("/v1/ticketing/banner", _TicketingBannerService_ListBanner1_HTTP_Handler(srv))
	r.POST("/v1/ticketing/banner", _TicketingBannerService_CreateBanner0_HTTP_Handler(srv))
	r.PATCH("/v1/ticketing/banner/{banner.id}", _TicketingBannerService_UpdateBanner0_HTTP_Handler(srv))
	r.PUT("/v1/ticketing/banner/{banner.id}", _TicketingBannerService_UpdateBanner1_HTTP_Handler(srv))
	r.DELETE("/v1/ticketing/banner/{id}", _TicketingBannerService_DeleteBanner0_HTTP_Handler(srv))
}

func _TicketingBannerService_ListBanner0_HTTP_Handler(srv TicketingBannerServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListBannerRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTicketingBannerServiceListBanner)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListBanner(ctx, req.(*ListBannerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListBannerReply)
		return ctx.Result(200, reply)
	}
}

func _TicketingBannerService_ListBanner1_HTTP_Handler(srv TicketingBannerServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListBannerRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTicketingBannerServiceListBanner)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListBanner(ctx, req.(*ListBannerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListBannerReply)
		return ctx.Result(200, reply)
	}
}

func _TicketingBannerService_CreateBanner0_HTTP_Handler(srv TicketingBannerServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateBannerRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTicketingBannerServiceCreateBanner)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateBanner(ctx, req.(*CreateBannerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Banner)
		return ctx.Result(200, reply)
	}
}

func _TicketingBannerService_UpdateBanner0_HTTP_Handler(srv TicketingBannerServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateBannerRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTicketingBannerServiceUpdateBanner)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateBanner(ctx, req.(*UpdateBannerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Banner)
		return ctx.Result(200, reply)
	}
}

func _TicketingBannerService_UpdateBanner1_HTTP_Handler(srv TicketingBannerServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateBannerRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTicketingBannerServiceUpdateBanner)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateBanner(ctx, req.(*UpdateBannerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Banner)
		return ctx.Result(200, reply)
	}
}

func _TicketingBannerService_DeleteBanner0_HTTP_Handler(srv TicketingBannerServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteBannerRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTicketingBannerServiceDeleteBanner)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteBanner(ctx, req.(*DeleteBannerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteBannerReply)
		return ctx.Result(200, reply)
	}
}

type TicketingBannerServiceHTTPClient interface {
	CreateBanner(ctx context.Context, req *CreateBannerRequest, opts ...http.CallOption) (rsp *Banner, err error)
	DeleteBanner(ctx context.Context, req *DeleteBannerRequest, opts ...http.CallOption) (rsp *DeleteBannerReply, err error)
	ListBanner(ctx context.Context, req *ListBannerRequest, opts ...http.CallOption) (rsp *ListBannerReply, err error)
	UpdateBanner(ctx context.Context, req *UpdateBannerRequest, opts ...http.CallOption) (rsp *Banner, err error)
}

type TicketingBannerServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewTicketingBannerServiceHTTPClient(client *http.Client) TicketingBannerServiceHTTPClient {
	return &TicketingBannerServiceHTTPClientImpl{client}
}

func (c *TicketingBannerServiceHTTPClientImpl) CreateBanner(ctx context.Context, in *CreateBannerRequest, opts ...http.CallOption) (*Banner, error) {
	var out Banner
	pattern := "/v1/ticketing/banner"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTicketingBannerServiceCreateBanner))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TicketingBannerServiceHTTPClientImpl) DeleteBanner(ctx context.Context, in *DeleteBannerRequest, opts ...http.CallOption) (*DeleteBannerReply, error) {
	var out DeleteBannerReply
	pattern := "/v1/ticketing/banner/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationTicketingBannerServiceDeleteBanner))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TicketingBannerServiceHTTPClientImpl) ListBanner(ctx context.Context, in *ListBannerRequest, opts ...http.CallOption) (*ListBannerReply, error) {
	var out ListBannerReply
	pattern := "/v1/ticketing/banner"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationTicketingBannerServiceListBanner))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TicketingBannerServiceHTTPClientImpl) UpdateBanner(ctx context.Context, in *UpdateBannerRequest, opts ...http.CallOption) (*Banner, error) {
	var out Banner
	pattern := "/v1/ticketing/banner/{banner.id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTicketingBannerServiceUpdateBanner))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

const OperationTicketingAppBannerServiceListAppBanner = "/ticketing.api.banner.v1.TicketingAppBannerService/ListAppBanner"

type TicketingAppBannerServiceHTTPServer interface {
	ListAppBanner(context.Context, *ListAppBannerRequest) (*ListAppBannerReply, error)
}

func RegisterTicketingAppBannerServiceHTTPServer(s *http.Server, srv TicketingAppBannerServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/ticketing/app/banner", _TicketingAppBannerService_ListAppBanner0_HTTP_Handler(srv))
}

func _TicketingAppBannerService_ListAppBanner0_HTTP_Handler(srv TicketingAppBannerServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListAppBannerRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTicketingAppBannerServiceListAppBanner)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListAppBanner(ctx, req.(*ListAppBannerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListAppBannerReply)
		return ctx.Result(200, reply)
	}
}

type TicketingAppBannerServiceHTTPClient interface {
	ListAppBanner(ctx context.Context, req *ListAppBannerRequest, opts ...http.CallOption) (rsp *ListAppBannerReply, err error)
}

type TicketingAppBannerServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewTicketingAppBannerServiceHTTPClient(client *http.Client) TicketingAppBannerServiceHTTPClient {
	return &TicketingAppBannerServiceHTTPClientImpl{client}
}

func (c *TicketingAppBannerServiceHTTPClientImpl) ListAppBanner(ctx context.Context, in *ListAppBannerRequest, opts ...http.CallOption) (*ListAppBannerReply, error) {
	var out ListAppBannerReply
	pattern := "/v1/ticketing/app/banner"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationTicketingAppBannerServiceListAppBanner))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
