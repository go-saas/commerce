// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: ticketing/api/banner/v1/banner.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TicketingBannerService_ListBanner_FullMethodName   = "/ticketing.api.banner.v1.TicketingBannerService/ListBanner"
	TicketingBannerService_CreateBanner_FullMethodName = "/ticketing.api.banner.v1.TicketingBannerService/CreateBanner"
	TicketingBannerService_UpdateBanner_FullMethodName = "/ticketing.api.banner.v1.TicketingBannerService/UpdateBanner"
	TicketingBannerService_DeleteBanner_FullMethodName = "/ticketing.api.banner.v1.TicketingBannerService/DeleteBanner"
)

// TicketingBannerServiceClient is the client API for TicketingBannerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TicketingBannerServiceClient interface {
	ListBanner(ctx context.Context, in *ListBannerRequest, opts ...grpc.CallOption) (*ListBannerReply, error)
	CreateBanner(ctx context.Context, in *CreateBannerRequest, opts ...grpc.CallOption) (*Banner, error)
	UpdateBanner(ctx context.Context, in *UpdateBannerRequest, opts ...grpc.CallOption) (*Banner, error)
	DeleteBanner(ctx context.Context, in *DeleteBannerRequest, opts ...grpc.CallOption) (*DeleteBannerReply, error)
}

type ticketingBannerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTicketingBannerServiceClient(cc grpc.ClientConnInterface) TicketingBannerServiceClient {
	return &ticketingBannerServiceClient{cc}
}

func (c *ticketingBannerServiceClient) ListBanner(ctx context.Context, in *ListBannerRequest, opts ...grpc.CallOption) (*ListBannerReply, error) {
	out := new(ListBannerReply)
	err := c.cc.Invoke(ctx, TicketingBannerService_ListBanner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketingBannerServiceClient) CreateBanner(ctx context.Context, in *CreateBannerRequest, opts ...grpc.CallOption) (*Banner, error) {
	out := new(Banner)
	err := c.cc.Invoke(ctx, TicketingBannerService_CreateBanner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketingBannerServiceClient) UpdateBanner(ctx context.Context, in *UpdateBannerRequest, opts ...grpc.CallOption) (*Banner, error) {
	out := new(Banner)
	err := c.cc.Invoke(ctx, TicketingBannerService_UpdateBanner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketingBannerServiceClient) DeleteBanner(ctx context.Context, in *DeleteBannerRequest, opts ...grpc.CallOption) (*DeleteBannerReply, error) {
	out := new(DeleteBannerReply)
	err := c.cc.Invoke(ctx, TicketingBannerService_DeleteBanner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TicketingBannerServiceServer is the server API for TicketingBannerService service.
// All implementations should embed UnimplementedTicketingBannerServiceServer
// for forward compatibility
type TicketingBannerServiceServer interface {
	ListBanner(context.Context, *ListBannerRequest) (*ListBannerReply, error)
	CreateBanner(context.Context, *CreateBannerRequest) (*Banner, error)
	UpdateBanner(context.Context, *UpdateBannerRequest) (*Banner, error)
	DeleteBanner(context.Context, *DeleteBannerRequest) (*DeleteBannerReply, error)
}

// UnimplementedTicketingBannerServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTicketingBannerServiceServer struct {
}

func (UnimplementedTicketingBannerServiceServer) ListBanner(context.Context, *ListBannerRequest) (*ListBannerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBanner not implemented")
}
func (UnimplementedTicketingBannerServiceServer) CreateBanner(context.Context, *CreateBannerRequest) (*Banner, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBanner not implemented")
}
func (UnimplementedTicketingBannerServiceServer) UpdateBanner(context.Context, *UpdateBannerRequest) (*Banner, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBanner not implemented")
}
func (UnimplementedTicketingBannerServiceServer) DeleteBanner(context.Context, *DeleteBannerRequest) (*DeleteBannerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBanner not implemented")
}

// UnsafeTicketingBannerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TicketingBannerServiceServer will
// result in compilation errors.
type UnsafeTicketingBannerServiceServer interface {
	mustEmbedUnimplementedTicketingBannerServiceServer()
}

func RegisterTicketingBannerServiceServer(s grpc.ServiceRegistrar, srv TicketingBannerServiceServer) {
	s.RegisterService(&TicketingBannerService_ServiceDesc, srv)
}

func _TicketingBannerService_ListBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBannerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketingBannerServiceServer).ListBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketingBannerService_ListBanner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketingBannerServiceServer).ListBanner(ctx, req.(*ListBannerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketingBannerService_CreateBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBannerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketingBannerServiceServer).CreateBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketingBannerService_CreateBanner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketingBannerServiceServer).CreateBanner(ctx, req.(*CreateBannerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketingBannerService_UpdateBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBannerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketingBannerServiceServer).UpdateBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketingBannerService_UpdateBanner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketingBannerServiceServer).UpdateBanner(ctx, req.(*UpdateBannerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketingBannerService_DeleteBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBannerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketingBannerServiceServer).DeleteBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketingBannerService_DeleteBanner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketingBannerServiceServer).DeleteBanner(ctx, req.(*DeleteBannerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TicketingBannerService_ServiceDesc is the grpc.ServiceDesc for TicketingBannerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TicketingBannerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ticketing.api.banner.v1.TicketingBannerService",
	HandlerType: (*TicketingBannerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListBanner",
			Handler:    _TicketingBannerService_ListBanner_Handler,
		},
		{
			MethodName: "CreateBanner",
			Handler:    _TicketingBannerService_CreateBanner_Handler,
		},
		{
			MethodName: "UpdateBanner",
			Handler:    _TicketingBannerService_UpdateBanner_Handler,
		},
		{
			MethodName: "DeleteBanner",
			Handler:    _TicketingBannerService_DeleteBanner_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ticketing/api/banner/v1/banner.proto",
}

const (
	TicketingAppBannerService_ListAppBanner_FullMethodName = "/ticketing.api.banner.v1.TicketingAppBannerService/ListAppBanner"
)

// TicketingAppBannerServiceClient is the client API for TicketingAppBannerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TicketingAppBannerServiceClient interface {
	ListAppBanner(ctx context.Context, in *ListAppBannerRequest, opts ...grpc.CallOption) (*ListAppBannerReply, error)
}

type ticketingAppBannerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTicketingAppBannerServiceClient(cc grpc.ClientConnInterface) TicketingAppBannerServiceClient {
	return &ticketingAppBannerServiceClient{cc}
}

func (c *ticketingAppBannerServiceClient) ListAppBanner(ctx context.Context, in *ListAppBannerRequest, opts ...grpc.CallOption) (*ListAppBannerReply, error) {
	out := new(ListAppBannerReply)
	err := c.cc.Invoke(ctx, TicketingAppBannerService_ListAppBanner_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TicketingAppBannerServiceServer is the server API for TicketingAppBannerService service.
// All implementations should embed UnimplementedTicketingAppBannerServiceServer
// for forward compatibility
type TicketingAppBannerServiceServer interface {
	ListAppBanner(context.Context, *ListAppBannerRequest) (*ListAppBannerReply, error)
}

// UnimplementedTicketingAppBannerServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTicketingAppBannerServiceServer struct {
}

func (UnimplementedTicketingAppBannerServiceServer) ListAppBanner(context.Context, *ListAppBannerRequest) (*ListAppBannerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAppBanner not implemented")
}

// UnsafeTicketingAppBannerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TicketingAppBannerServiceServer will
// result in compilation errors.
type UnsafeTicketingAppBannerServiceServer interface {
	mustEmbedUnimplementedTicketingAppBannerServiceServer()
}

func RegisterTicketingAppBannerServiceServer(s grpc.ServiceRegistrar, srv TicketingAppBannerServiceServer) {
	s.RegisterService(&TicketingAppBannerService_ServiceDesc, srv)
}

func _TicketingAppBannerService_ListAppBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppBannerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketingAppBannerServiceServer).ListAppBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketingAppBannerService_ListAppBanner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketingAppBannerServiceServer).ListAppBanner(ctx, req.(*ListAppBannerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TicketingAppBannerService_ServiceDesc is the grpc.ServiceDesc for TicketingAppBannerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TicketingAppBannerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ticketing.api.banner.v1.TicketingAppBannerService",
	HandlerType: (*TicketingAppBannerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAppBanner",
			Handler:    _TicketingAppBannerService_ListAppBanner_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ticketing/api/banner/v1/banner.proto",
}
