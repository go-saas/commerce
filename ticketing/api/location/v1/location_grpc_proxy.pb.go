// Code generated by protoc-gen-go-grpc-proxy. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc-proxy v1.2.0
// - protoc             (unknown)
// source: ticketing/api/location/v1/location.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

var _ LocationServiceServer = (*locationServiceClientProxy)(nil)

// locationServiceClientProxy is the proxy to turn LocationService client to server interface.
type locationServiceClientProxy struct {
	cc LocationServiceClient
}

func NewLocationServiceClientProxy(cc LocationServiceClient) LocationServiceServer {
	return &locationServiceClientProxy{cc}
}

func (c *locationServiceClientProxy) ListLocation(ctx context.Context, in *ListLocationRequest) (*ListLocationReply, error) {
	return c.cc.ListLocation(ctx, in)
}
func (c *locationServiceClientProxy) GetLocation(ctx context.Context, in *GetLocationRequest) (*Location, error) {
	return c.cc.GetLocation(ctx, in)
}
func (c *locationServiceClientProxy) CreateLocation(ctx context.Context, in *CreateLocationRequest) (*Location, error) {
	return c.cc.CreateLocation(ctx, in)
}
func (c *locationServiceClientProxy) UpdateLocation(ctx context.Context, in *UpdateLocationRequest) (*Location, error) {
	return c.cc.UpdateLocation(ctx, in)
}
func (c *locationServiceClientProxy) DeleteLocation(ctx context.Context, in *DeleteLocationRequest) (*DeleteLocationReply, error) {
	return c.cc.DeleteLocation(ctx, in)
}
func (c *locationServiceClientProxy) GetLocationHalls(ctx context.Context, in *GetLocationHallsRequest) (*GetLocationHallsReply, error) {
	return c.cc.GetLocationHalls(ctx, in)
}
func (c *locationServiceClientProxy) GetLocationHallDetail(ctx context.Context, in *GetLocationHallDetailRequest) (*GetLocationHallDetailReply, error) {
	return c.cc.GetLocationHallDetail(ctx, in)
}
func (c *locationServiceClientProxy) CreateLocationHall(ctx context.Context, in *CreateLocationHallRequest) (*CreateLocationHallReply, error) {
	return c.cc.CreateLocationHall(ctx, in)
}
func (c *locationServiceClientProxy) UpdateLocationHall(ctx context.Context, in *UpdateLocationHallRequest) (*UpdateLocationHallReply, error) {
	return c.cc.UpdateLocationHall(ctx, in)
}
func (c *locationServiceClientProxy) DeleteLocationHall(ctx context.Context, in *DeleteLocationHallRequest) (*DeleteLocationHallReply, error) {
	return c.cc.DeleteLocationHall(ctx, in)
}
