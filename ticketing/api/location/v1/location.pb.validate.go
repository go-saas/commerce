// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: ticketing/api/location/v1/location.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateLocationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateLocationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateLocationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateLocationRequestMultiError, or nil if none found.
func (m *CreateLocationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateLocationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CreateLocationRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateLocationRequestMultiError(errors)
	}

	return nil
}

// CreateLocationRequestMultiError is an error wrapping multiple validation
// errors returned by CreateLocationRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateLocationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateLocationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateLocationRequestMultiError) AllErrors() []error { return m }

// CreateLocationRequestValidationError is the validation error returned by
// CreateLocationRequest.Validate if the designated constraints aren't met.
type CreateLocationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateLocationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateLocationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateLocationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateLocationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateLocationRequestValidationError) ErrorName() string {
	return "CreateLocationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateLocationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateLocationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateLocationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateLocationRequestValidationError{}

// Validate checks the field values on UpdateLocationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateLocationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateLocationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateLocationRequestMultiError, or nil if none found.
func (m *UpdateLocationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateLocationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetLocation() == nil {
		err := UpdateLocationRequestValidationError{
			field:  "Location",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetLocation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateLocationRequestValidationError{
					field:  "Location",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateLocationRequestValidationError{
					field:  "Location",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLocation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateLocationRequestValidationError{
				field:  "Location",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateLocationRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateLocationRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateLocationRequestValidationError{
				field:  "UpdateMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateLocationRequestMultiError(errors)
	}

	return nil
}

// UpdateLocationRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateLocationRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateLocationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateLocationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateLocationRequestMultiError) AllErrors() []error { return m }

// UpdateLocationRequestValidationError is the validation error returned by
// UpdateLocationRequest.Validate if the designated constraints aren't met.
type UpdateLocationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateLocationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateLocationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateLocationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateLocationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateLocationRequestValidationError) ErrorName() string {
	return "UpdateLocationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateLocationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateLocationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateLocationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateLocationRequestValidationError{}

// Validate checks the field values on UpdateLocation with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateLocation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateLocation with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateLocationMultiError,
// or nil if none found.
func (m *UpdateLocation) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateLocation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := UpdateLocationValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Name

	if len(errors) > 0 {
		return UpdateLocationMultiError(errors)
	}

	return nil
}

// UpdateLocationMultiError is an error wrapping multiple validation errors
// returned by UpdateLocation.ValidateAll() if the designated constraints
// aren't met.
type UpdateLocationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateLocationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateLocationMultiError) AllErrors() []error { return m }

// UpdateLocationValidationError is the validation error returned by
// UpdateLocation.Validate if the designated constraints aren't met.
type UpdateLocationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateLocationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateLocationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateLocationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateLocationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateLocationValidationError) ErrorName() string { return "UpdateLocationValidationError" }

// Error satisfies the builtin error interface
func (e UpdateLocationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateLocation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateLocationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateLocationValidationError{}

// Validate checks the field values on DeleteLocationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteLocationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteLocationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteLocationRequestMultiError, or nil if none found.
func (m *DeleteLocationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteLocationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteLocationRequestMultiError(errors)
	}

	return nil
}

// DeleteLocationRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteLocationRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteLocationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteLocationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteLocationRequestMultiError) AllErrors() []error { return m }

// DeleteLocationRequestValidationError is the validation error returned by
// DeleteLocationRequest.Validate if the designated constraints aren't met.
type DeleteLocationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteLocationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteLocationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteLocationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteLocationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteLocationRequestValidationError) ErrorName() string {
	return "DeleteLocationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteLocationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteLocationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteLocationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteLocationRequestValidationError{}

// Validate checks the field values on DeleteLocationReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteLocationReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteLocationReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteLocationReplyMultiError, or nil if none found.
func (m *DeleteLocationReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteLocationReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if len(errors) > 0 {
		return DeleteLocationReplyMultiError(errors)
	}

	return nil
}

// DeleteLocationReplyMultiError is an error wrapping multiple validation
// errors returned by DeleteLocationReply.ValidateAll() if the designated
// constraints aren't met.
type DeleteLocationReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteLocationReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteLocationReplyMultiError) AllErrors() []error { return m }

// DeleteLocationReplyValidationError is the validation error returned by
// DeleteLocationReply.Validate if the designated constraints aren't met.
type DeleteLocationReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteLocationReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteLocationReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteLocationReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteLocationReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteLocationReplyValidationError) ErrorName() string {
	return "DeleteLocationReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteLocationReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteLocationReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteLocationReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteLocationReplyValidationError{}

// Validate checks the field values on GetLocationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLocationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLocationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLocationRequestMultiError, or nil if none found.
func (m *GetLocationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLocationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := GetLocationRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetLocationRequestMultiError(errors)
	}

	return nil
}

// GetLocationRequestMultiError is an error wrapping multiple validation errors
// returned by GetLocationRequest.ValidateAll() if the designated constraints
// aren't met.
type GetLocationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLocationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLocationRequestMultiError) AllErrors() []error { return m }

// GetLocationRequestValidationError is the validation error returned by
// GetLocationRequest.Validate if the designated constraints aren't met.
type GetLocationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLocationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLocationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLocationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLocationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLocationRequestValidationError) ErrorName() string {
	return "GetLocationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetLocationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLocationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLocationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLocationRequestValidationError{}

// Validate checks the field values on LocationFilter with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LocationFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LocationFilter with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LocationFilterMultiError,
// or nil if none found.
func (m *LocationFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *LocationFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LocationFilterValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LocationFilterValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LocationFilterValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetName()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LocationFilterValidationError{
					field:  "Name",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LocationFilterValidationError{
					field:  "Name",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LocationFilterValidationError{
				field:  "Name",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LocationFilterMultiError(errors)
	}

	return nil
}

// LocationFilterMultiError is an error wrapping multiple validation errors
// returned by LocationFilter.ValidateAll() if the designated constraints
// aren't met.
type LocationFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LocationFilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LocationFilterMultiError) AllErrors() []error { return m }

// LocationFilterValidationError is the validation error returned by
// LocationFilter.Validate if the designated constraints aren't met.
type LocationFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LocationFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LocationFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LocationFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LocationFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LocationFilterValidationError) ErrorName() string { return "LocationFilterValidationError" }

// Error satisfies the builtin error interface
func (e LocationFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLocationFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LocationFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LocationFilterValidationError{}

// Validate checks the field values on ListLocationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListLocationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListLocationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListLocationRequestMultiError, or nil if none found.
func (m *ListLocationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListLocationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageOffset

	// no validation rules for PageSize

	// no validation rules for Search

	if all {
		switch v := interface{}(m.GetFields()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListLocationRequestValidationError{
					field:  "Fields",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListLocationRequestValidationError{
					field:  "Fields",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListLocationRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListLocationRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListLocationRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListLocationRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListLocationRequestMultiError(errors)
	}

	return nil
}

// ListLocationRequestMultiError is an error wrapping multiple validation
// errors returned by ListLocationRequest.ValidateAll() if the designated
// constraints aren't met.
type ListLocationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListLocationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListLocationRequestMultiError) AllErrors() []error { return m }

// ListLocationRequestValidationError is the validation error returned by
// ListLocationRequest.Validate if the designated constraints aren't met.
type ListLocationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLocationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLocationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLocationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLocationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLocationRequestValidationError) ErrorName() string {
	return "ListLocationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListLocationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLocationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLocationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLocationRequestValidationError{}

// Validate checks the field values on ListLocationReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListLocationReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListLocationReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListLocationReplyMultiError, or nil if none found.
func (m *ListLocationReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListLocationReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TotalSize

	// no validation rules for FilterSize

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListLocationReplyValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListLocationReplyValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListLocationReplyValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListLocationReplyMultiError(errors)
	}

	return nil
}

// ListLocationReplyMultiError is an error wrapping multiple validation errors
// returned by ListLocationReply.ValidateAll() if the designated constraints
// aren't met.
type ListLocationReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListLocationReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListLocationReplyMultiError) AllErrors() []error { return m }

// ListLocationReplyValidationError is the validation error returned by
// ListLocationReply.Validate if the designated constraints aren't met.
type ListLocationReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLocationReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLocationReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLocationReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLocationReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLocationReplyValidationError) ErrorName() string {
	return "ListLocationReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListLocationReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLocationReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLocationReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLocationReplyValidationError{}

// Validate checks the field values on Location with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Location) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Location with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LocationMultiError, or nil
// if none found.
func (m *Location) ValidateAll() error {
	return m.validate(true)
}

func (m *Location) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LocationValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LocationValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LocationValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LocationMultiError(errors)
	}

	return nil
}

// LocationMultiError is an error wrapping multiple validation errors returned
// by Location.ValidateAll() if the designated constraints aren't met.
type LocationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LocationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LocationMultiError) AllErrors() []error { return m }

// LocationValidationError is the validation error returned by
// Location.Validate if the designated constraints aren't met.
type LocationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LocationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LocationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LocationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LocationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LocationValidationError) ErrorName() string { return "LocationValidationError" }

// Error satisfies the builtin error interface
func (e LocationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLocation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LocationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LocationValidationError{}
