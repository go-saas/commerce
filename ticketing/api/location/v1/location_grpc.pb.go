// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: ticketing/api/location/v1/location.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LocationService_ListLocation_FullMethodName          = "/ticketing.api.location.v1.LocationService/ListLocation"
	LocationService_GetLocation_FullMethodName           = "/ticketing.api.location.v1.LocationService/GetLocation"
	LocationService_CreateLocation_FullMethodName        = "/ticketing.api.location.v1.LocationService/CreateLocation"
	LocationService_UpdateLocation_FullMethodName        = "/ticketing.api.location.v1.LocationService/UpdateLocation"
	LocationService_DeleteLocation_FullMethodName        = "/ticketing.api.location.v1.LocationService/DeleteLocation"
	LocationService_GetLocationHalls_FullMethodName      = "/ticketing.api.location.v1.LocationService/GetLocationHalls"
	LocationService_GetLocationHallDetail_FullMethodName = "/ticketing.api.location.v1.LocationService/GetLocationHallDetail"
	LocationService_CreateLocationHall_FullMethodName    = "/ticketing.api.location.v1.LocationService/CreateLocationHall"
	LocationService_UpdateLocationHall_FullMethodName    = "/ticketing.api.location.v1.LocationService/UpdateLocationHall"
	LocationService_DeleteLocationHall_FullMethodName    = "/ticketing.api.location.v1.LocationService/DeleteLocationHall"
)

// LocationServiceClient is the client API for LocationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LocationServiceClient interface {
	ListLocation(ctx context.Context, in *ListLocationRequest, opts ...grpc.CallOption) (*ListLocationReply, error)
	GetLocation(ctx context.Context, in *GetLocationRequest, opts ...grpc.CallOption) (*Location, error)
	CreateLocation(ctx context.Context, in *CreateLocationRequest, opts ...grpc.CallOption) (*Location, error)
	UpdateLocation(ctx context.Context, in *UpdateLocationRequest, opts ...grpc.CallOption) (*Location, error)
	DeleteLocation(ctx context.Context, in *DeleteLocationRequest, opts ...grpc.CallOption) (*DeleteLocationReply, error)
	GetLocationHalls(ctx context.Context, in *GetLocationHallsRequest, opts ...grpc.CallOption) (*GetLocationHallsReply, error)
	GetLocationHallDetail(ctx context.Context, in *GetLocationHallDetailRequest, opts ...grpc.CallOption) (*GetLocationHallDetailReply, error)
	CreateLocationHall(ctx context.Context, in *CreateLocationHallRequest, opts ...grpc.CallOption) (*CreateLocationHallReply, error)
	UpdateLocationHall(ctx context.Context, in *UpdateLocationHallRequest, opts ...grpc.CallOption) (*UpdateLocationHallReply, error)
	DeleteLocationHall(ctx context.Context, in *DeleteLocationHallRequest, opts ...grpc.CallOption) (*DeleteLocationHallReply, error)
}

type locationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLocationServiceClient(cc grpc.ClientConnInterface) LocationServiceClient {
	return &locationServiceClient{cc}
}

func (c *locationServiceClient) ListLocation(ctx context.Context, in *ListLocationRequest, opts ...grpc.CallOption) (*ListLocationReply, error) {
	out := new(ListLocationReply)
	err := c.cc.Invoke(ctx, LocationService_ListLocation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) GetLocation(ctx context.Context, in *GetLocationRequest, opts ...grpc.CallOption) (*Location, error) {
	out := new(Location)
	err := c.cc.Invoke(ctx, LocationService_GetLocation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) CreateLocation(ctx context.Context, in *CreateLocationRequest, opts ...grpc.CallOption) (*Location, error) {
	out := new(Location)
	err := c.cc.Invoke(ctx, LocationService_CreateLocation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) UpdateLocation(ctx context.Context, in *UpdateLocationRequest, opts ...grpc.CallOption) (*Location, error) {
	out := new(Location)
	err := c.cc.Invoke(ctx, LocationService_UpdateLocation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) DeleteLocation(ctx context.Context, in *DeleteLocationRequest, opts ...grpc.CallOption) (*DeleteLocationReply, error) {
	out := new(DeleteLocationReply)
	err := c.cc.Invoke(ctx, LocationService_DeleteLocation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) GetLocationHalls(ctx context.Context, in *GetLocationHallsRequest, opts ...grpc.CallOption) (*GetLocationHallsReply, error) {
	out := new(GetLocationHallsReply)
	err := c.cc.Invoke(ctx, LocationService_GetLocationHalls_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) GetLocationHallDetail(ctx context.Context, in *GetLocationHallDetailRequest, opts ...grpc.CallOption) (*GetLocationHallDetailReply, error) {
	out := new(GetLocationHallDetailReply)
	err := c.cc.Invoke(ctx, LocationService_GetLocationHallDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) CreateLocationHall(ctx context.Context, in *CreateLocationHallRequest, opts ...grpc.CallOption) (*CreateLocationHallReply, error) {
	out := new(CreateLocationHallReply)
	err := c.cc.Invoke(ctx, LocationService_CreateLocationHall_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) UpdateLocationHall(ctx context.Context, in *UpdateLocationHallRequest, opts ...grpc.CallOption) (*UpdateLocationHallReply, error) {
	out := new(UpdateLocationHallReply)
	err := c.cc.Invoke(ctx, LocationService_UpdateLocationHall_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) DeleteLocationHall(ctx context.Context, in *DeleteLocationHallRequest, opts ...grpc.CallOption) (*DeleteLocationHallReply, error) {
	out := new(DeleteLocationHallReply)
	err := c.cc.Invoke(ctx, LocationService_DeleteLocationHall_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LocationServiceServer is the server API for LocationService service.
// All implementations should embed UnimplementedLocationServiceServer
// for forward compatibility
type LocationServiceServer interface {
	ListLocation(context.Context, *ListLocationRequest) (*ListLocationReply, error)
	GetLocation(context.Context, *GetLocationRequest) (*Location, error)
	CreateLocation(context.Context, *CreateLocationRequest) (*Location, error)
	UpdateLocation(context.Context, *UpdateLocationRequest) (*Location, error)
	DeleteLocation(context.Context, *DeleteLocationRequest) (*DeleteLocationReply, error)
	GetLocationHalls(context.Context, *GetLocationHallsRequest) (*GetLocationHallsReply, error)
	GetLocationHallDetail(context.Context, *GetLocationHallDetailRequest) (*GetLocationHallDetailReply, error)
	CreateLocationHall(context.Context, *CreateLocationHallRequest) (*CreateLocationHallReply, error)
	UpdateLocationHall(context.Context, *UpdateLocationHallRequest) (*UpdateLocationHallReply, error)
	DeleteLocationHall(context.Context, *DeleteLocationHallRequest) (*DeleteLocationHallReply, error)
}

// UnimplementedLocationServiceServer should be embedded to have forward compatible implementations.
type UnimplementedLocationServiceServer struct {
}

func (UnimplementedLocationServiceServer) ListLocation(context.Context, *ListLocationRequest) (*ListLocationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLocation not implemented")
}
func (UnimplementedLocationServiceServer) GetLocation(context.Context, *GetLocationRequest) (*Location, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLocation not implemented")
}
func (UnimplementedLocationServiceServer) CreateLocation(context.Context, *CreateLocationRequest) (*Location, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLocation not implemented")
}
func (UnimplementedLocationServiceServer) UpdateLocation(context.Context, *UpdateLocationRequest) (*Location, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLocation not implemented")
}
func (UnimplementedLocationServiceServer) DeleteLocation(context.Context, *DeleteLocationRequest) (*DeleteLocationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLocation not implemented")
}
func (UnimplementedLocationServiceServer) GetLocationHalls(context.Context, *GetLocationHallsRequest) (*GetLocationHallsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLocationHalls not implemented")
}
func (UnimplementedLocationServiceServer) GetLocationHallDetail(context.Context, *GetLocationHallDetailRequest) (*GetLocationHallDetailReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLocationHallDetail not implemented")
}
func (UnimplementedLocationServiceServer) CreateLocationHall(context.Context, *CreateLocationHallRequest) (*CreateLocationHallReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLocationHall not implemented")
}
func (UnimplementedLocationServiceServer) UpdateLocationHall(context.Context, *UpdateLocationHallRequest) (*UpdateLocationHallReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLocationHall not implemented")
}
func (UnimplementedLocationServiceServer) DeleteLocationHall(context.Context, *DeleteLocationHallRequest) (*DeleteLocationHallReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLocationHall not implemented")
}

// UnsafeLocationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LocationServiceServer will
// result in compilation errors.
type UnsafeLocationServiceServer interface {
	mustEmbedUnimplementedLocationServiceServer()
}

func RegisterLocationServiceServer(s grpc.ServiceRegistrar, srv LocationServiceServer) {
	s.RegisterService(&LocationService_ServiceDesc, srv)
}

func _LocationService_ListLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).ListLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocationService_ListLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).ListLocation(ctx, req.(*ListLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_GetLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).GetLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocationService_GetLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).GetLocation(ctx, req.(*GetLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_CreateLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).CreateLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocationService_CreateLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).CreateLocation(ctx, req.(*CreateLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_UpdateLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).UpdateLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocationService_UpdateLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).UpdateLocation(ctx, req.(*UpdateLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_DeleteLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).DeleteLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocationService_DeleteLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).DeleteLocation(ctx, req.(*DeleteLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_GetLocationHalls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLocationHallsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).GetLocationHalls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocationService_GetLocationHalls_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).GetLocationHalls(ctx, req.(*GetLocationHallsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_GetLocationHallDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLocationHallDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).GetLocationHallDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocationService_GetLocationHallDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).GetLocationHallDetail(ctx, req.(*GetLocationHallDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_CreateLocationHall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLocationHallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).CreateLocationHall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocationService_CreateLocationHall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).CreateLocationHall(ctx, req.(*CreateLocationHallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_UpdateLocationHall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLocationHallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).UpdateLocationHall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocationService_UpdateLocationHall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).UpdateLocationHall(ctx, req.(*UpdateLocationHallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_DeleteLocationHall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLocationHallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).DeleteLocationHall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LocationService_DeleteLocationHall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).DeleteLocationHall(ctx, req.(*DeleteLocationHallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LocationService_ServiceDesc is the grpc.ServiceDesc for LocationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LocationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ticketing.api.location.v1.LocationService",
	HandlerType: (*LocationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListLocation",
			Handler:    _LocationService_ListLocation_Handler,
		},
		{
			MethodName: "GetLocation",
			Handler:    _LocationService_GetLocation_Handler,
		},
		{
			MethodName: "CreateLocation",
			Handler:    _LocationService_CreateLocation_Handler,
		},
		{
			MethodName: "UpdateLocation",
			Handler:    _LocationService_UpdateLocation_Handler,
		},
		{
			MethodName: "DeleteLocation",
			Handler:    _LocationService_DeleteLocation_Handler,
		},
		{
			MethodName: "GetLocationHalls",
			Handler:    _LocationService_GetLocationHalls_Handler,
		},
		{
			MethodName: "GetLocationHallDetail",
			Handler:    _LocationService_GetLocationHallDetail_Handler,
		},
		{
			MethodName: "CreateLocationHall",
			Handler:    _LocationService_CreateLocationHall_Handler,
		},
		{
			MethodName: "UpdateLocationHall",
			Handler:    _LocationService_UpdateLocationHall_Handler,
		},
		{
			MethodName: "DeleteLocationHall",
			Handler:    _LocationService_DeleteLocationHall_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ticketing/api/location/v1/location.proto",
}
