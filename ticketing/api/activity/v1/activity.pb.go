// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: ticketing/api/activity/v1/activity.proto

package v1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	v11 "github.com/go-saas/commerce/ticketing/api/category/v1"
	v1 "github.com/go-saas/commerce/ticketing/api/location/v1"
	price "github.com/go-saas/kit/pkg/price"
	query "github.com/go-saas/kit/pkg/query"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RecommendActivityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	IsRecommend bool   `protobuf:"varint,2,opt,name=is_recommend,json=isRecommend,proto3" json:"is_recommend,omitempty"`
}

func (x *RecommendActivityRequest) Reset() {
	*x = RecommendActivityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticketing_api_activity_v1_activity_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecommendActivityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecommendActivityRequest) ProtoMessage() {}

func (x *RecommendActivityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ticketing_api_activity_v1_activity_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecommendActivityRequest.ProtoReflect.Descriptor instead.
func (*RecommendActivityRequest) Descriptor() ([]byte, []int) {
	return file_ticketing_api_activity_v1_activity_proto_rawDescGZIP(), []int{0}
}

func (x *RecommendActivityRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RecommendActivityRequest) GetIsRecommend() bool {
	if x != nil {
		return x.IsRecommend
	}
	return false
}

type RecommendActivityReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RecommendActivityReply) Reset() {
	*x = RecommendActivityReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticketing_api_activity_v1_activity_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecommendActivityReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecommendActivityReply) ProtoMessage() {}

func (x *RecommendActivityReply) ProtoReflect() protoreflect.Message {
	mi := &file_ticketing_api_activity_v1_activity_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecommendActivityReply.ProtoReflect.Descriptor instead.
func (*RecommendActivityReply) Descriptor() ([]byte, []int) {
	return file_ticketing_api_activity_v1_activity_proto_rawDescGZIP(), []int{1}
}

func (x *RecommendActivityReply) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ListAppActivityShowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ListAppActivityShowRequest) Reset() {
	*x = ListAppActivityShowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticketing_api_activity_v1_activity_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAppActivityShowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAppActivityShowRequest) ProtoMessage() {}

func (x *ListAppActivityShowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ticketing_api_activity_v1_activity_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAppActivityShowRequest.ProtoReflect.Descriptor instead.
func (*ListAppActivityShowRequest) Descriptor() ([]byte, []int) {
	return file_ticketing_api_activity_v1_activity_proto_rawDescGZIP(), []int{2}
}

func (x *ListAppActivityShowRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ListAppActivityShowReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Shows []*ActivityShow `protobuf:"bytes,1,rep,name=shows,proto3" json:"shows,omitempty"`
}

func (x *ListAppActivityShowReply) Reset() {
	*x = ListAppActivityShowReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticketing_api_activity_v1_activity_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAppActivityShowReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAppActivityShowReply) ProtoMessage() {}

func (x *ListAppActivityShowReply) ProtoReflect() protoreflect.Message {
	mi := &file_ticketing_api_activity_v1_activity_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAppActivityShowReply.ProtoReflect.Descriptor instead.
func (*ListAppActivityShowReply) Descriptor() ([]byte, []int) {
	return file_ticketing_api_activity_v1_activity_proto_rawDescGZIP(), []int{3}
}

func (x *ListAppActivityShowReply) GetShows() []*ActivityShow {
	if x != nil {
		return x.Shows
	}
	return nil
}

type ActivityShow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string                   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name       string                   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	CreatedAt  *timestamppb.Timestamp   `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	ActivityId string                   `protobuf:"bytes,10,opt,name=activity_id,json=activityId,proto3" json:"activity_id,omitempty"`
	Activity   *Activity                `protobuf:"bytes,11,opt,name=activity,proto3" json:"activity,omitempty"`
	StartTime  *timestamppb.Timestamp   `protobuf:"bytes,12,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime    *timestamppb.Timestamp   `protobuf:"bytes,13,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	LocationId string                   `protobuf:"bytes,20,opt,name=location_id,json=locationId,proto3" json:"location_id,omitempty"`
	Location   *v1.Location             `protobuf:"bytes,21,opt,name=location,proto3" json:"location,omitempty"`
	HallId     string                   `protobuf:"bytes,31,opt,name=hall_id,json=hallId,proto3" json:"hall_id,omitempty"`
	Hall       *v1.LocationHall         `protobuf:"bytes,32,opt,name=hall,proto3" json:"hall,omitempty"`
	SalesTypes []*ActivityShowSalesType `protobuf:"bytes,40,rep,name=sales_types,json=salesTypes,proto3" json:"sales_types,omitempty"`
	MainPic    *v1.TicketingMedia       `protobuf:"bytes,52,opt,name=main_pic,json=mainPic,proto3" json:"main_pic,omitempty"`
}

func (x *ActivityShow) Reset() {
	*x = ActivityShow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticketing_api_activity_v1_activity_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityShow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityShow) ProtoMessage() {}

func (x *ActivityShow) ProtoReflect() protoreflect.Message {
	mi := &file_ticketing_api_activity_v1_activity_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityShow.ProtoReflect.Descriptor instead.
func (*ActivityShow) Descriptor() ([]byte, []int) {
	return file_ticketing_api_activity_v1_activity_proto_rawDescGZIP(), []int{4}
}

func (x *ActivityShow) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ActivityShow) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ActivityShow) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ActivityShow) GetActivityId() string {
	if x != nil {
		return x.ActivityId
	}
	return ""
}

func (x *ActivityShow) GetActivity() *Activity {
	if x != nil {
		return x.Activity
	}
	return nil
}

func (x *ActivityShow) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *ActivityShow) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *ActivityShow) GetLocationId() string {
	if x != nil {
		return x.LocationId
	}
	return ""
}

func (x *ActivityShow) GetLocation() *v1.Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *ActivityShow) GetHallId() string {
	if x != nil {
		return x.HallId
	}
	return ""
}

func (x *ActivityShow) GetHall() *v1.LocationHall {
	if x != nil {
		return x.Hall
	}
	return nil
}

func (x *ActivityShow) GetSalesTypes() []*ActivityShowSalesType {
	if x != nil {
		return x.SalesTypes
	}
	return nil
}

func (x *ActivityShow) GetMainPic() *v1.TicketingMedia {
	if x != nil {
		return x.MainPic
	}
	return nil
}

type ActivityShowSalesType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	SeatGroup    *v1.SeatGroup          `protobuf:"bytes,3,opt,name=seat_group,json=seatGroup,proto3" json:"seat_group,omitempty"`
	SeatGroupId  *string                `protobuf:"bytes,4,opt,name=seat_group_id,json=seatGroupId,proto3,oneof" json:"seat_group_id,omitempty"`
	SaleableFrom *timestamppb.Timestamp `protobuf:"bytes,100,opt,name=saleable_from,json=saleableFrom,proto3" json:"saleable_from,omitempty"`
	SaleableTo   *timestamppb.Timestamp `protobuf:"bytes,101,opt,name=saleable_to,json=saleableTo,proto3" json:"saleable_to,omitempty"`
	Price        *price.InfoPb          `protobuf:"bytes,102,opt,name=price,proto3" json:"price,omitempty"`
}

func (x *ActivityShowSalesType) Reset() {
	*x = ActivityShowSalesType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticketing_api_activity_v1_activity_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityShowSalesType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityShowSalesType) ProtoMessage() {}

func (x *ActivityShowSalesType) ProtoReflect() protoreflect.Message {
	mi := &file_ticketing_api_activity_v1_activity_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityShowSalesType.ProtoReflect.Descriptor instead.
func (*ActivityShowSalesType) Descriptor() ([]byte, []int) {
	return file_ticketing_api_activity_v1_activity_proto_rawDescGZIP(), []int{5}
}

func (x *ActivityShowSalesType) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ActivityShowSalesType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ActivityShowSalesType) GetSeatGroup() *v1.SeatGroup {
	if x != nil {
		return x.SeatGroup
	}
	return nil
}

func (x *ActivityShowSalesType) GetSeatGroupId() string {
	if x != nil && x.SeatGroupId != nil {
		return *x.SeatGroupId
	}
	return ""
}

func (x *ActivityShowSalesType) GetSaleableFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.SaleableFrom
	}
	return nil
}

func (x *ActivityShowSalesType) GetSaleableTo() *timestamppb.Timestamp {
	if x != nil {
		return x.SaleableTo
	}
	return nil
}

func (x *ActivityShowSalesType) GetPrice() *price.InfoPb {
	if x != nil {
		return x.Price
	}
	return nil
}

type CreateActivityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	MainPic        *v1.TicketingMedia   `protobuf:"bytes,11,opt,name=main_pic,json=mainPic,proto3" json:"main_pic,omitempty"`
	Medias         []*v1.TicketingMedia `protobuf:"bytes,12,rep,name=medias,proto3" json:"medias,omitempty"`
	Desc           string               `protobuf:"bytes,13,opt,name=desc,proto3" json:"desc,omitempty"`
	ShortDesc      string               `protobuf:"bytes,14,opt,name=short_desc,json=shortDesc,proto3" json:"short_desc,omitempty"`
	Content        *structpb.Struct     `protobuf:"bytes,15,opt,name=content,proto3" json:"content,omitempty"`
	CategoryKeys   []string             `protobuf:"bytes,20,rep,name=category_keys,json=categoryKeys,proto3" json:"category_keys,omitempty"`
	SeatSelectable bool                 `protobuf:"varint,22,opt,name=seat_selectable,json=seatSelectable,proto3" json:"seat_selectable,omitempty"`
	Duration       *durationpb.Duration `protobuf:"bytes,23,opt,name=duration,proto3" json:"duration,omitempty"`
	Notice         string               `protobuf:"bytes,50,opt,name=notice,proto3" json:"notice,omitempty"`
}

func (x *CreateActivityRequest) Reset() {
	*x = CreateActivityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticketing_api_activity_v1_activity_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateActivityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateActivityRequest) ProtoMessage() {}

func (x *CreateActivityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ticketing_api_activity_v1_activity_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateActivityRequest.ProtoReflect.Descriptor instead.
func (*CreateActivityRequest) Descriptor() ([]byte, []int) {
	return file_ticketing_api_activity_v1_activity_proto_rawDescGZIP(), []int{6}
}

func (x *CreateActivityRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateActivityRequest) GetMainPic() *v1.TicketingMedia {
	if x != nil {
		return x.MainPic
	}
	return nil
}

func (x *CreateActivityRequest) GetMedias() []*v1.TicketingMedia {
	if x != nil {
		return x.Medias
	}
	return nil
}

func (x *CreateActivityRequest) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *CreateActivityRequest) GetShortDesc() string {
	if x != nil {
		return x.ShortDesc
	}
	return ""
}

func (x *CreateActivityRequest) GetContent() *structpb.Struct {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *CreateActivityRequest) GetCategoryKeys() []string {
	if x != nil {
		return x.CategoryKeys
	}
	return nil
}

func (x *CreateActivityRequest) GetSeatSelectable() bool {
	if x != nil {
		return x.SeatSelectable
	}
	return false
}

func (x *CreateActivityRequest) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *CreateActivityRequest) GetNotice() string {
	if x != nil {
		return x.Notice
	}
	return ""
}

type UpdateActivityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Activity   *UpdateActivity        `protobuf:"bytes,1,opt,name=activity,proto3" json:"activity,omitempty"`
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
}

func (x *UpdateActivityRequest) Reset() {
	*x = UpdateActivityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticketing_api_activity_v1_activity_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateActivityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateActivityRequest) ProtoMessage() {}

func (x *UpdateActivityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ticketing_api_activity_v1_activity_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateActivityRequest.ProtoReflect.Descriptor instead.
func (*UpdateActivityRequest) Descriptor() ([]byte, []int) {
	return file_ticketing_api_activity_v1_activity_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateActivityRequest) GetActivity() *UpdateActivity {
	if x != nil {
		return x.Activity
	}
	return nil
}

func (x *UpdateActivityRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type UpdateActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           string               `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	MainPic        *v1.TicketingMedia   `protobuf:"bytes,11,opt,name=main_pic,json=mainPic,proto3" json:"main_pic,omitempty"`
	Medias         []*v1.TicketingMedia `protobuf:"bytes,12,rep,name=medias,proto3" json:"medias,omitempty"`
	Desc           string               `protobuf:"bytes,13,opt,name=desc,proto3" json:"desc,omitempty"`
	ShortDesc      string               `protobuf:"bytes,14,opt,name=short_desc,json=shortDesc,proto3" json:"short_desc,omitempty"`
	Content        *structpb.Struct     `protobuf:"bytes,15,opt,name=content,proto3" json:"content,omitempty"`
	CategoryKeys   []string             `protobuf:"bytes,20,rep,name=category_keys,json=categoryKeys,proto3" json:"category_keys,omitempty"`
	SeatSelectable bool                 `protobuf:"varint,22,opt,name=seat_selectable,json=seatSelectable,proto3" json:"seat_selectable,omitempty"`
	Duration       *durationpb.Duration `protobuf:"bytes,23,opt,name=duration,proto3" json:"duration,omitempty"`
	Notice         string               `protobuf:"bytes,50,opt,name=notice,proto3" json:"notice,omitempty"`
}

func (x *UpdateActivity) Reset() {
	*x = UpdateActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticketing_api_activity_v1_activity_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateActivity) ProtoMessage() {}

func (x *UpdateActivity) ProtoReflect() protoreflect.Message {
	mi := &file_ticketing_api_activity_v1_activity_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateActivity.ProtoReflect.Descriptor instead.
func (*UpdateActivity) Descriptor() ([]byte, []int) {
	return file_ticketing_api_activity_v1_activity_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateActivity) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateActivity) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateActivity) GetMainPic() *v1.TicketingMedia {
	if x != nil {
		return x.MainPic
	}
	return nil
}

func (x *UpdateActivity) GetMedias() []*v1.TicketingMedia {
	if x != nil {
		return x.Medias
	}
	return nil
}

func (x *UpdateActivity) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *UpdateActivity) GetShortDesc() string {
	if x != nil {
		return x.ShortDesc
	}
	return ""
}

func (x *UpdateActivity) GetContent() *structpb.Struct {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *UpdateActivity) GetCategoryKeys() []string {
	if x != nil {
		return x.CategoryKeys
	}
	return nil
}

func (x *UpdateActivity) GetSeatSelectable() bool {
	if x != nil {
		return x.SeatSelectable
	}
	return false
}

func (x *UpdateActivity) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *UpdateActivity) GetNotice() string {
	if x != nil {
		return x.Notice
	}
	return ""
}

type DeleteActivityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteActivityRequest) Reset() {
	*x = DeleteActivityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticketing_api_activity_v1_activity_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteActivityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteActivityRequest) ProtoMessage() {}

func (x *DeleteActivityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ticketing_api_activity_v1_activity_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteActivityRequest.ProtoReflect.Descriptor instead.
func (*DeleteActivityRequest) Descriptor() ([]byte, []int) {
	return file_ticketing_api_activity_v1_activity_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteActivityRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteActivityReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteActivityReply) Reset() {
	*x = DeleteActivityReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticketing_api_activity_v1_activity_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteActivityReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteActivityReply) ProtoMessage() {}

func (x *DeleteActivityReply) ProtoReflect() protoreflect.Message {
	mi := &file_ticketing_api_activity_v1_activity_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteActivityReply.ProtoReflect.Descriptor instead.
func (*DeleteActivityReply) Descriptor() ([]byte, []int) {
	return file_ticketing_api_activity_v1_activity_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteActivityReply) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteActivityReply) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetActivityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetActivityRequest) Reset() {
	*x = GetActivityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticketing_api_activity_v1_activity_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActivityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActivityRequest) ProtoMessage() {}

func (x *GetActivityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ticketing_api_activity_v1_activity_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActivityRequest.ProtoReflect.Descriptor instead.
func (*GetActivityRequest) Descriptor() ([]byte, []int) {
	return file_ticketing_api_activity_v1_activity_proto_rawDescGZIP(), []int{11}
}

func (x *GetActivityRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ActivityFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *query.StringFilterOperation  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        *query.StringFilterOperation  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	IsRecommend *query.BooleanFilterOperators `protobuf:"bytes,3,opt,name=is_recommend,json=isRecommend,proto3" json:"is_recommend,omitempty"`
}

func (x *ActivityFilter) Reset() {
	*x = ActivityFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticketing_api_activity_v1_activity_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivityFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityFilter) ProtoMessage() {}

func (x *ActivityFilter) ProtoReflect() protoreflect.Message {
	mi := &file_ticketing_api_activity_v1_activity_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityFilter.ProtoReflect.Descriptor instead.
func (*ActivityFilter) Descriptor() ([]byte, []int) {
	return file_ticketing_api_activity_v1_activity_proto_rawDescGZIP(), []int{12}
}

func (x *ActivityFilter) GetId() *query.StringFilterOperation {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ActivityFilter) GetName() *query.StringFilterOperation {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ActivityFilter) GetIsRecommend() *query.BooleanFilterOperators {
	if x != nil {
		return x.IsRecommend
	}
	return nil
}

type ListActivityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageOffset      int32                  `protobuf:"varint,1,opt,name=page_offset,json=pageOffset,proto3" json:"page_offset,omitempty"`
	PageSize        int32                  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Search          string                 `protobuf:"bytes,3,opt,name=search,proto3" json:"search,omitempty"`
	Sort            []string               `protobuf:"bytes,4,rep,name=sort,proto3" json:"sort,omitempty"`
	Fields          *fieldmaskpb.FieldMask `protobuf:"bytes,5,opt,name=fields,proto3" json:"fields,omitempty"`
	Filter          *ActivityFilter        `protobuf:"bytes,6,opt,name=filter,proto3" json:"filter,omitempty"`
	AfterPageToken  string                 `protobuf:"bytes,10,opt,name=after_page_token,json=afterPageToken,proto3" json:"after_page_token,omitempty"`
	BeforePageToken string                 `protobuf:"bytes,11,opt,name=before_page_token,json=beforePageToken,proto3" json:"before_page_token,omitempty"`
}

func (x *ListActivityRequest) Reset() {
	*x = ListActivityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticketing_api_activity_v1_activity_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListActivityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListActivityRequest) ProtoMessage() {}

func (x *ListActivityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ticketing_api_activity_v1_activity_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListActivityRequest.ProtoReflect.Descriptor instead.
func (*ListActivityRequest) Descriptor() ([]byte, []int) {
	return file_ticketing_api_activity_v1_activity_proto_rawDescGZIP(), []int{13}
}

func (x *ListActivityRequest) GetPageOffset() int32 {
	if x != nil {
		return x.PageOffset
	}
	return 0
}

func (x *ListActivityRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListActivityRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *ListActivityRequest) GetSort() []string {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *ListActivityRequest) GetFields() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *ListActivityRequest) GetFilter() *ActivityFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *ListActivityRequest) GetAfterPageToken() string {
	if x != nil {
		return x.AfterPageToken
	}
	return ""
}

func (x *ListActivityRequest) GetBeforePageToken() string {
	if x != nil {
		return x.BeforePageToken
	}
	return ""
}

type ListActivityReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalSize           int32       `protobuf:"varint,1,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
	FilterSize          int32       `protobuf:"varint,2,opt,name=filter_size,json=filterSize,proto3" json:"filter_size,omitempty"`
	Items               []*Activity `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
	NextAfterPageToken  *string     `protobuf:"bytes,4,opt,name=next_after_page_token,json=nextAfterPageToken,proto3,oneof" json:"next_after_page_token,omitempty"`
	NextBeforePageToken *string     `protobuf:"bytes,5,opt,name=next_before_page_token,json=nextBeforePageToken,proto3,oneof" json:"next_before_page_token,omitempty"`
}

func (x *ListActivityReply) Reset() {
	*x = ListActivityReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticketing_api_activity_v1_activity_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListActivityReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListActivityReply) ProtoMessage() {}

func (x *ListActivityReply) ProtoReflect() protoreflect.Message {
	mi := &file_ticketing_api_activity_v1_activity_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListActivityReply.ProtoReflect.Descriptor instead.
func (*ListActivityReply) Descriptor() ([]byte, []int) {
	return file_ticketing_api_activity_v1_activity_proto_rawDescGZIP(), []int{14}
}

func (x *ListActivityReply) GetTotalSize() int32 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

func (x *ListActivityReply) GetFilterSize() int32 {
	if x != nil {
		return x.FilterSize
	}
	return 0
}

func (x *ListActivityReply) GetItems() []*Activity {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListActivityReply) GetNextAfterPageToken() string {
	if x != nil && x.NextAfterPageToken != nil {
		return *x.NextAfterPageToken
	}
	return ""
}

func (x *ListActivityReply) GetNextBeforePageToken() string {
	if x != nil && x.NextBeforePageToken != nil {
		return *x.NextBeforePageToken
	}
	return ""
}

type Activity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           string               `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	MainPic        *v1.TicketingMedia   `protobuf:"bytes,11,opt,name=main_pic,json=mainPic,proto3" json:"main_pic,omitempty"`
	Medias         []*v1.TicketingMedia `protobuf:"bytes,12,rep,name=medias,proto3" json:"medias,omitempty"`
	Desc           string               `protobuf:"bytes,13,opt,name=desc,proto3" json:"desc,omitempty"`
	ShortDesc      string               `protobuf:"bytes,14,opt,name=short_desc,json=shortDesc,proto3" json:"short_desc,omitempty"`
	Content        *structpb.Struct     `protobuf:"bytes,15,opt,name=content,proto3" json:"content,omitempty"`
	Categories     []*v11.Category      `protobuf:"bytes,20,rep,name=categories,proto3" json:"categories,omitempty"`
	Status         string               `protobuf:"bytes,21,opt,name=status,proto3" json:"status,omitempty"`
	SeatSelectable bool                 `protobuf:"varint,22,opt,name=seat_selectable,json=seatSelectable,proto3" json:"seat_selectable,omitempty"`
	Duration       *durationpb.Duration `protobuf:"bytes,23,opt,name=duration,proto3" json:"duration,omitempty"`
	Notice         string               `protobuf:"bytes,50,opt,name=notice,proto3" json:"notice,omitempty"`
	IsRecommend    bool                 `protobuf:"varint,51,opt,name=is_recommend,json=isRecommend,proto3" json:"is_recommend,omitempty"`
}

func (x *Activity) Reset() {
	*x = Activity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ticketing_api_activity_v1_activity_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Activity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Activity) ProtoMessage() {}

func (x *Activity) ProtoReflect() protoreflect.Message {
	mi := &file_ticketing_api_activity_v1_activity_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Activity.ProtoReflect.Descriptor instead.
func (*Activity) Descriptor() ([]byte, []int) {
	return file_ticketing_api_activity_v1_activity_proto_rawDescGZIP(), []int{15}
}

func (x *Activity) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Activity) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Activity) GetMainPic() *v1.TicketingMedia {
	if x != nil {
		return x.MainPic
	}
	return nil
}

func (x *Activity) GetMedias() []*v1.TicketingMedia {
	if x != nil {
		return x.Medias
	}
	return nil
}

func (x *Activity) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *Activity) GetShortDesc() string {
	if x != nil {
		return x.ShortDesc
	}
	return ""
}

func (x *Activity) GetContent() *structpb.Struct {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *Activity) GetCategories() []*v11.Category {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *Activity) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Activity) GetSeatSelectable() bool {
	if x != nil {
		return x.SeatSelectable
	}
	return false
}

func (x *Activity) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *Activity) GetNotice() string {
	if x != nil {
		return x.Notice
	}
	return ""
}

func (x *Activity) GetIsRecommend() bool {
	if x != nil {
		return x.IsRecommend
	}
	return false
}

var File_ticketing_api_activity_v1_activity_proto protoreflect.FileDescriptor

var file_ticketing_api_activity_v1_activity_proto_rawDesc = []byte{
	0x0a, 0x28, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65,
	0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31,
	0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x28, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x2f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4d, 0x0a, 0x18,
	0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x69, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x22, 0x28, 0x0a, 0x16, 0x52,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2c, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x68, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x59, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x68, 0x6f, 0x77, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x3d, 0x0a, 0x05, 0x73, 0x68, 0x6f, 0x77, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x53, 0x68, 0x6f, 0x77, 0x52, 0x05, 0x73, 0x68, 0x6f, 0x77, 0x73, 0x22, 0x92,
	0x05, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x68, 0x6f, 0x77, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12,
	0x3f, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x61, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x3b, 0x0a,
	0x04, 0x68, 0x61, 0x6c, 0x6c, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x61, 0x6c, 0x6c, 0x52, 0x04, 0x68, 0x61, 0x6c, 0x6c, 0x12, 0x51, 0x0a, 0x0b, 0x73, 0x61,
	0x6c, 0x65, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x28, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0a, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x44, 0x0a,
	0x08, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x69, 0x63, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x07, 0x6d, 0x61, 0x69, 0x6e,
	0x50, 0x69, 0x63, 0x22, 0xde, 0x02, 0x0a, 0x15, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x53, 0x68, 0x6f, 0x77, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x43, 0x0a, 0x0a, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x09, 0x73, 0x65, 0x61,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x27, 0x0a, 0x0d, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0b, 0x73, 0x65, 0x61, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x3f, 0x0a, 0x0d, 0x73, 0x61, 0x6c, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d,
	0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0c, 0x73, 0x61, 0x6c, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x72, 0x6f, 0x6d,
	0x12, 0x3b, 0x0a, 0x0b, 0x73, 0x61, 0x6c, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x18,
	0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0a, 0x73, 0x61, 0x6c, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x12, 0x23, 0x0a,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x62, 0x52, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x22, 0xc3, 0x03, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41,
	0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x44,
	0x0a, 0x08, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x69, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x07, 0x6d, 0x61, 0x69,
	0x6e, 0x50, 0x69, 0x63, 0x12, 0x41, 0x0a, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x18, 0x0c,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52,
	0x06, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x73, 0x63, 0x12, 0x31, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x14,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4b, 0x65,
	0x79, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x65, 0x61,
	0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x18, 0x32, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x22, 0xa8, 0x01, 0x0a, 0x15, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x42, 0x0b, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x08,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0xcc, 0x03, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x08, 0x6d, 0x61, 0x69, 0x6e,
	0x5f, 0x70, 0x69, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x07, 0x6d, 0x61, 0x69, 0x6e, 0x50, 0x69, 0x63, 0x12, 0x41,
	0x0a, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74,
	0x44, 0x65, 0x73, 0x63, 0x12, 0x31, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x27, 0x0a, 0x0f,
	0x73, 0x65, 0x61, 0x74, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x65, 0x61, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f,
	0x74, 0x69, 0x63, 0x65, 0x22, 0x27, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x39, 0x0a,
	0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x30, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0xd0, 0x01, 0x0a, 0x0e, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x36, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x4a, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61,
	0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73,
	0x52, 0x0b, 0x69, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x22, 0xcc, 0x02,
	0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12,
	0x32, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x06, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x12, 0x41, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x61, 0x66, 0x74, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x2a, 0x0a, 0x11, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xb5, 0x02, 0x0a,
	0x11, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x36, 0x0a,
	0x15, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x12,
	0x6e, 0x65, 0x78, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x16, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x62, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x13, 0x6e, 0x65, 0x78, 0x74, 0x42, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x42,
	0x18, 0x0a, 0x16, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xa1, 0x04, 0x0a, 0x08, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x44, 0x0a, 0x08, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x69, 0x63, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x07,
	0x6d, 0x61, 0x69, 0x6e, 0x50, 0x69, 0x63, 0x12, 0x41, 0x0a, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x52, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65,
	0x73, 0x63, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x73, 0x63, 0x12, 0x31, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x43, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x14,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a,
	0x0f, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x65, 0x61, 0x74, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e,
	0x6f, 0x74, 0x69, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x52,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x32, 0xe8, 0x07, 0x0a, 0x0f, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xae, 0x01, 0x0a,
	0x0c, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x2e,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x40, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x3a, 0x5a, 0x20, 0x3a, 0x01, 0x2a, 0x22, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x86, 0x01,
	0x0a, 0x0b, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x2d, 0x2e,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x8a, 0x01, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x30, 0x2e, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x3a, 0x01, 0x2a, 0x22, 0x16, 0x2f, 0x76, 0x31,
	0x2f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x12, 0xc3, 0x01, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x30, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x22, 0x5a, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x54, 0x3a, 0x01, 0x2a, 0x5a, 0x29, 0x3a, 0x01, 0x2a, 0x32, 0x24, 0x2f,
	0x76, 0x31, 0x2f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x2f, 0x7b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e,
	0x69, 0x64, 0x7d, 0x1a, 0x24, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x69,
	0x6e, 0x67, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2f, 0x7b, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x69, 0x64, 0x7d, 0x12, 0x97, 0x01, 0x0a, 0x0e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x30, 0x2e, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e,
	0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x23,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x2a, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x12, 0xad, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x33, 0x2e, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31,
	0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x3a, 0x01, 0x2a, 0x1a, 0x25, 0x2f, 0x76,
	0x31, 0x2f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x32, 0xf5, 0x04, 0x0a, 0x12, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x41, 0x70, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xda, 0x01, 0x0a, 0x0f, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x2e,
	0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c,
	0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x69, 0x92, 0x41,
	0x1e, 0x0a, 0x12, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x41, 0x70, 0x70, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x0a, 0x08, 0x55, 0x73, 0x61, 0x67, 0x65, 0x41, 0x70, 0x70, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x42, 0x5a, 0x24, 0x3a, 0x01, 0x2a, 0x22, 0x1f, 0x2f, 0x76, 0x31, 0x2f,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x2f, 0x76, 0x31,
	0x2f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0xae, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41,
	0x70, 0x70, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x2d, 0x2e, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x22, 0x48,
	0x92, 0x41, 0x1e, 0x0a, 0x12, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x41, 0x70, 0x70,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x0a, 0x08, 0x55, 0x73, 0x61, 0x67, 0x65, 0x41, 0x70,
	0x70, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12, 0x1f, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xd0, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x70, 0x70, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x68, 0x6f, 0x77,
	0x12, 0x35, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x70, 0x70, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x68, 0x6f, 0x77,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x53, 0x68, 0x6f, 0x77, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x4d, 0x92, 0x41,
	0x1e, 0x0a, 0x12, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x41, 0x70, 0x70, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x0a, 0x08, 0x55, 0x73, 0x61, 0x67, 0x65, 0x41, 0x70, 0x70, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x26, 0x12, 0x24, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x74, 0x69, 0x6e, 0x67, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x68, 0x6f, 0x77, 0x42, 0xa6, 0x01, 0x92, 0x41,
	0x69, 0x5a, 0x59, 0x0a, 0x57, 0x0a, 0x06, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x12, 0x4d, 0x08,
	0x02, 0x12, 0x38, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2c, 0x20, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x20, 0x62, 0x79, 0x20, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x3a, 0x20, 0x42, 0x65, 0x61,
	0x72, 0x65, 0x72, 0x20, 0x3c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x3e, 0x1a, 0x0d, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x02, 0x62, 0x0c, 0x0a, 0x0a,
	0x0a, 0x06, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x12, 0x00, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2d, 0x73, 0x61, 0x61, 0x73, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x72, 0x63, 0x65, 0x2f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2f, 0x76,
	0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ticketing_api_activity_v1_activity_proto_rawDescOnce sync.Once
	file_ticketing_api_activity_v1_activity_proto_rawDescData = file_ticketing_api_activity_v1_activity_proto_rawDesc
)

func file_ticketing_api_activity_v1_activity_proto_rawDescGZIP() []byte {
	file_ticketing_api_activity_v1_activity_proto_rawDescOnce.Do(func() {
		file_ticketing_api_activity_v1_activity_proto_rawDescData = protoimpl.X.CompressGZIP(file_ticketing_api_activity_v1_activity_proto_rawDescData)
	})
	return file_ticketing_api_activity_v1_activity_proto_rawDescData
}

var file_ticketing_api_activity_v1_activity_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_ticketing_api_activity_v1_activity_proto_goTypes = []interface{}{
	(*RecommendActivityRequest)(nil),     // 0: ticketing.api.activity.v1.RecommendActivityRequest
	(*RecommendActivityReply)(nil),       // 1: ticketing.api.activity.v1.RecommendActivityReply
	(*ListAppActivityShowRequest)(nil),   // 2: ticketing.api.activity.v1.ListAppActivityShowRequest
	(*ListAppActivityShowReply)(nil),     // 3: ticketing.api.activity.v1.ListAppActivityShowReply
	(*ActivityShow)(nil),                 // 4: ticketing.api.activity.v1.ActivityShow
	(*ActivityShowSalesType)(nil),        // 5: ticketing.api.activity.v1.ActivityShowSalesType
	(*CreateActivityRequest)(nil),        // 6: ticketing.api.activity.v1.CreateActivityRequest
	(*UpdateActivityRequest)(nil),        // 7: ticketing.api.activity.v1.UpdateActivityRequest
	(*UpdateActivity)(nil),               // 8: ticketing.api.activity.v1.UpdateActivity
	(*DeleteActivityRequest)(nil),        // 9: ticketing.api.activity.v1.DeleteActivityRequest
	(*DeleteActivityReply)(nil),          // 10: ticketing.api.activity.v1.DeleteActivityReply
	(*GetActivityRequest)(nil),           // 11: ticketing.api.activity.v1.GetActivityRequest
	(*ActivityFilter)(nil),               // 12: ticketing.api.activity.v1.ActivityFilter
	(*ListActivityRequest)(nil),          // 13: ticketing.api.activity.v1.ListActivityRequest
	(*ListActivityReply)(nil),            // 14: ticketing.api.activity.v1.ListActivityReply
	(*Activity)(nil),                     // 15: ticketing.api.activity.v1.Activity
	(*timestamppb.Timestamp)(nil),        // 16: google.protobuf.Timestamp
	(*v1.Location)(nil),                  // 17: ticketing.api.location.v1.Location
	(*v1.LocationHall)(nil),              // 18: ticketing.api.location.v1.LocationHall
	(*v1.TicketingMedia)(nil),            // 19: ticketing.api.location.v1.TicketingMedia
	(*v1.SeatGroup)(nil),                 // 20: ticketing.api.location.v1.SeatGroup
	(*price.InfoPb)(nil),                 // 21: price.InfoPb
	(*structpb.Struct)(nil),              // 22: google.protobuf.Struct
	(*durationpb.Duration)(nil),          // 23: google.protobuf.Duration
	(*fieldmaskpb.FieldMask)(nil),        // 24: google.protobuf.FieldMask
	(*query.StringFilterOperation)(nil),  // 25: query.operation.StringFilterOperation
	(*query.BooleanFilterOperators)(nil), // 26: query.operation.BooleanFilterOperators
	(*v11.Category)(nil),                 // 27: ticketing.api.category.v1.Category
}
var file_ticketing_api_activity_v1_activity_proto_depIdxs = []int32{
	4,  // 0: ticketing.api.activity.v1.ListAppActivityShowReply.shows:type_name -> ticketing.api.activity.v1.ActivityShow
	16, // 1: ticketing.api.activity.v1.ActivityShow.created_at:type_name -> google.protobuf.Timestamp
	15, // 2: ticketing.api.activity.v1.ActivityShow.activity:type_name -> ticketing.api.activity.v1.Activity
	16, // 3: ticketing.api.activity.v1.ActivityShow.start_time:type_name -> google.protobuf.Timestamp
	16, // 4: ticketing.api.activity.v1.ActivityShow.end_time:type_name -> google.protobuf.Timestamp
	17, // 5: ticketing.api.activity.v1.ActivityShow.location:type_name -> ticketing.api.location.v1.Location
	18, // 6: ticketing.api.activity.v1.ActivityShow.hall:type_name -> ticketing.api.location.v1.LocationHall
	5,  // 7: ticketing.api.activity.v1.ActivityShow.sales_types:type_name -> ticketing.api.activity.v1.ActivityShowSalesType
	19, // 8: ticketing.api.activity.v1.ActivityShow.main_pic:type_name -> ticketing.api.location.v1.TicketingMedia
	20, // 9: ticketing.api.activity.v1.ActivityShowSalesType.seat_group:type_name -> ticketing.api.location.v1.SeatGroup
	16, // 10: ticketing.api.activity.v1.ActivityShowSalesType.saleable_from:type_name -> google.protobuf.Timestamp
	16, // 11: ticketing.api.activity.v1.ActivityShowSalesType.saleable_to:type_name -> google.protobuf.Timestamp
	21, // 12: ticketing.api.activity.v1.ActivityShowSalesType.price:type_name -> price.InfoPb
	19, // 13: ticketing.api.activity.v1.CreateActivityRequest.main_pic:type_name -> ticketing.api.location.v1.TicketingMedia
	19, // 14: ticketing.api.activity.v1.CreateActivityRequest.medias:type_name -> ticketing.api.location.v1.TicketingMedia
	22, // 15: ticketing.api.activity.v1.CreateActivityRequest.content:type_name -> google.protobuf.Struct
	23, // 16: ticketing.api.activity.v1.CreateActivityRequest.duration:type_name -> google.protobuf.Duration
	8,  // 17: ticketing.api.activity.v1.UpdateActivityRequest.activity:type_name -> ticketing.api.activity.v1.UpdateActivity
	24, // 18: ticketing.api.activity.v1.UpdateActivityRequest.update_mask:type_name -> google.protobuf.FieldMask
	19, // 19: ticketing.api.activity.v1.UpdateActivity.main_pic:type_name -> ticketing.api.location.v1.TicketingMedia
	19, // 20: ticketing.api.activity.v1.UpdateActivity.medias:type_name -> ticketing.api.location.v1.TicketingMedia
	22, // 21: ticketing.api.activity.v1.UpdateActivity.content:type_name -> google.protobuf.Struct
	23, // 22: ticketing.api.activity.v1.UpdateActivity.duration:type_name -> google.protobuf.Duration
	25, // 23: ticketing.api.activity.v1.ActivityFilter.id:type_name -> query.operation.StringFilterOperation
	25, // 24: ticketing.api.activity.v1.ActivityFilter.name:type_name -> query.operation.StringFilterOperation
	26, // 25: ticketing.api.activity.v1.ActivityFilter.is_recommend:type_name -> query.operation.BooleanFilterOperators
	24, // 26: ticketing.api.activity.v1.ListActivityRequest.fields:type_name -> google.protobuf.FieldMask
	12, // 27: ticketing.api.activity.v1.ListActivityRequest.filter:type_name -> ticketing.api.activity.v1.ActivityFilter
	15, // 28: ticketing.api.activity.v1.ListActivityReply.items:type_name -> ticketing.api.activity.v1.Activity
	19, // 29: ticketing.api.activity.v1.Activity.main_pic:type_name -> ticketing.api.location.v1.TicketingMedia
	19, // 30: ticketing.api.activity.v1.Activity.medias:type_name -> ticketing.api.location.v1.TicketingMedia
	22, // 31: ticketing.api.activity.v1.Activity.content:type_name -> google.protobuf.Struct
	27, // 32: ticketing.api.activity.v1.Activity.categories:type_name -> ticketing.api.category.v1.Category
	23, // 33: ticketing.api.activity.v1.Activity.duration:type_name -> google.protobuf.Duration
	13, // 34: ticketing.api.activity.v1.ActivityService.ListActivity:input_type -> ticketing.api.activity.v1.ListActivityRequest
	11, // 35: ticketing.api.activity.v1.ActivityService.GetActivity:input_type -> ticketing.api.activity.v1.GetActivityRequest
	6,  // 36: ticketing.api.activity.v1.ActivityService.CreateActivity:input_type -> ticketing.api.activity.v1.CreateActivityRequest
	7,  // 37: ticketing.api.activity.v1.ActivityService.UpdateActivity:input_type -> ticketing.api.activity.v1.UpdateActivityRequest
	9,  // 38: ticketing.api.activity.v1.ActivityService.DeleteActivity:input_type -> ticketing.api.activity.v1.DeleteActivityRequest
	0,  // 39: ticketing.api.activity.v1.ActivityService.RecommendActivity:input_type -> ticketing.api.activity.v1.RecommendActivityRequest
	13, // 40: ticketing.api.activity.v1.ActivityAppService.ListAppActivity:input_type -> ticketing.api.activity.v1.ListActivityRequest
	11, // 41: ticketing.api.activity.v1.ActivityAppService.GetAppActivity:input_type -> ticketing.api.activity.v1.GetActivityRequest
	2,  // 42: ticketing.api.activity.v1.ActivityAppService.ListAppActivityShow:input_type -> ticketing.api.activity.v1.ListAppActivityShowRequest
	14, // 43: ticketing.api.activity.v1.ActivityService.ListActivity:output_type -> ticketing.api.activity.v1.ListActivityReply
	15, // 44: ticketing.api.activity.v1.ActivityService.GetActivity:output_type -> ticketing.api.activity.v1.Activity
	15, // 45: ticketing.api.activity.v1.ActivityService.CreateActivity:output_type -> ticketing.api.activity.v1.Activity
	15, // 46: ticketing.api.activity.v1.ActivityService.UpdateActivity:output_type -> ticketing.api.activity.v1.Activity
	10, // 47: ticketing.api.activity.v1.ActivityService.DeleteActivity:output_type -> ticketing.api.activity.v1.DeleteActivityReply
	1,  // 48: ticketing.api.activity.v1.ActivityService.RecommendActivity:output_type -> ticketing.api.activity.v1.RecommendActivityReply
	14, // 49: ticketing.api.activity.v1.ActivityAppService.ListAppActivity:output_type -> ticketing.api.activity.v1.ListActivityReply
	15, // 50: ticketing.api.activity.v1.ActivityAppService.GetAppActivity:output_type -> ticketing.api.activity.v1.Activity
	3,  // 51: ticketing.api.activity.v1.ActivityAppService.ListAppActivityShow:output_type -> ticketing.api.activity.v1.ListAppActivityShowReply
	43, // [43:52] is the sub-list for method output_type
	34, // [34:43] is the sub-list for method input_type
	34, // [34:34] is the sub-list for extension type_name
	34, // [34:34] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() { file_ticketing_api_activity_v1_activity_proto_init() }
func file_ticketing_api_activity_v1_activity_proto_init() {
	if File_ticketing_api_activity_v1_activity_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ticketing_api_activity_v1_activity_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecommendActivityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticketing_api_activity_v1_activity_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecommendActivityReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticketing_api_activity_v1_activity_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAppActivityShowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticketing_api_activity_v1_activity_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAppActivityShowReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticketing_api_activity_v1_activity_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityShow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticketing_api_activity_v1_activity_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityShowSalesType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticketing_api_activity_v1_activity_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateActivityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticketing_api_activity_v1_activity_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateActivityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticketing_api_activity_v1_activity_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticketing_api_activity_v1_activity_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteActivityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticketing_api_activity_v1_activity_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteActivityReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticketing_api_activity_v1_activity_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetActivityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticketing_api_activity_v1_activity_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivityFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticketing_api_activity_v1_activity_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListActivityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticketing_api_activity_v1_activity_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListActivityReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ticketing_api_activity_v1_activity_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Activity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_ticketing_api_activity_v1_activity_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_ticketing_api_activity_v1_activity_proto_msgTypes[14].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ticketing_api_activity_v1_activity_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_ticketing_api_activity_v1_activity_proto_goTypes,
		DependencyIndexes: file_ticketing_api_activity_v1_activity_proto_depIdxs,
		MessageInfos:      file_ticketing_api_activity_v1_activity_proto_msgTypes,
	}.Build()
	File_ticketing_api_activity_v1_activity_proto = out.File
	file_ticketing_api_activity_v1_activity_proto_rawDesc = nil
	file_ticketing_api_activity_v1_activity_proto_goTypes = nil
	file_ticketing_api_activity_v1_activity_proto_depIdxs = nil
}
