// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.2
// - protoc             (unknown)
// source: ticketing/api/activity/v1/activity.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationActivityServiceCreateActivity = "/ticketing.api.activity.v1.ActivityService/CreateActivity"
const OperationActivityServiceDeleteActivity = "/ticketing.api.activity.v1.ActivityService/DeleteActivity"
const OperationActivityServiceGetActivity = "/ticketing.api.activity.v1.ActivityService/GetActivity"
const OperationActivityServiceListActivity = "/ticketing.api.activity.v1.ActivityService/ListActivity"
const OperationActivityServiceRecommendActivity = "/ticketing.api.activity.v1.ActivityService/RecommendActivity"
const OperationActivityServiceUpdateActivity = "/ticketing.api.activity.v1.ActivityService/UpdateActivity"

type ActivityServiceHTTPServer interface {
	CreateActivity(context.Context, *CreateActivityRequest) (*Activity, error)
	DeleteActivity(context.Context, *DeleteActivityRequest) (*DeleteActivityReply, error)
	GetActivity(context.Context, *GetActivityRequest) (*Activity, error)
	ListActivity(context.Context, *ListActivityRequest) (*ListActivityReply, error)
	RecommendActivity(context.Context, *RecommendActivityRequest) (*RecommendActivityReply, error)
	UpdateActivity(context.Context, *UpdateActivityRequest) (*Activity, error)
}

func RegisterActivityServiceHTTPServer(s *http.Server, srv ActivityServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/ticketing/activity/list", _ActivityService_ListActivity0_HTTP_Handler(srv))
	r.GET("/v1/ticketing/activity", _ActivityService_ListActivity1_HTTP_Handler(srv))
	r.GET("/v1/ticketing/activity/{id}", _ActivityService_GetActivity0_HTTP_Handler(srv))
	r.POST("/v1/ticketing/activity", _ActivityService_CreateActivity0_HTTP_Handler(srv))
	r.PATCH("/v1/ticketing/activity/{activity.id}", _ActivityService_UpdateActivity0_HTTP_Handler(srv))
	r.PUT("/v1/ticketing/activity/{activity.id}", _ActivityService_UpdateActivity1_HTTP_Handler(srv))
	r.DELETE("/v1/ticketing/activity/{id}", _ActivityService_DeleteActivity0_HTTP_Handler(srv))
	r.PUT("/v1/ticketing/activity/{id}/recommend", _ActivityService_RecommendActivity0_HTTP_Handler(srv))
}

func _ActivityService_ListActivity0_HTTP_Handler(srv ActivityServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListActivityRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationActivityServiceListActivity)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListActivity(ctx, req.(*ListActivityRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListActivityReply)
		return ctx.Result(200, reply)
	}
}

func _ActivityService_ListActivity1_HTTP_Handler(srv ActivityServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListActivityRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationActivityServiceListActivity)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListActivity(ctx, req.(*ListActivityRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListActivityReply)
		return ctx.Result(200, reply)
	}
}

func _ActivityService_GetActivity0_HTTP_Handler(srv ActivityServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetActivityRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationActivityServiceGetActivity)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetActivity(ctx, req.(*GetActivityRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Activity)
		return ctx.Result(200, reply)
	}
}

func _ActivityService_CreateActivity0_HTTP_Handler(srv ActivityServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateActivityRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationActivityServiceCreateActivity)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateActivity(ctx, req.(*CreateActivityRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Activity)
		return ctx.Result(200, reply)
	}
}

func _ActivityService_UpdateActivity0_HTTP_Handler(srv ActivityServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateActivityRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationActivityServiceUpdateActivity)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateActivity(ctx, req.(*UpdateActivityRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Activity)
		return ctx.Result(200, reply)
	}
}

func _ActivityService_UpdateActivity1_HTTP_Handler(srv ActivityServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateActivityRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationActivityServiceUpdateActivity)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateActivity(ctx, req.(*UpdateActivityRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Activity)
		return ctx.Result(200, reply)
	}
}

func _ActivityService_DeleteActivity0_HTTP_Handler(srv ActivityServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteActivityRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationActivityServiceDeleteActivity)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteActivity(ctx, req.(*DeleteActivityRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteActivityReply)
		return ctx.Result(200, reply)
	}
}

func _ActivityService_RecommendActivity0_HTTP_Handler(srv ActivityServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RecommendActivityRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationActivityServiceRecommendActivity)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RecommendActivity(ctx, req.(*RecommendActivityRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RecommendActivityReply)
		return ctx.Result(200, reply)
	}
}

type ActivityServiceHTTPClient interface {
	CreateActivity(ctx context.Context, req *CreateActivityRequest, opts ...http.CallOption) (rsp *Activity, err error)
	DeleteActivity(ctx context.Context, req *DeleteActivityRequest, opts ...http.CallOption) (rsp *DeleteActivityReply, err error)
	GetActivity(ctx context.Context, req *GetActivityRequest, opts ...http.CallOption) (rsp *Activity, err error)
	ListActivity(ctx context.Context, req *ListActivityRequest, opts ...http.CallOption) (rsp *ListActivityReply, err error)
	RecommendActivity(ctx context.Context, req *RecommendActivityRequest, opts ...http.CallOption) (rsp *RecommendActivityReply, err error)
	UpdateActivity(ctx context.Context, req *UpdateActivityRequest, opts ...http.CallOption) (rsp *Activity, err error)
}

type ActivityServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewActivityServiceHTTPClient(client *http.Client) ActivityServiceHTTPClient {
	return &ActivityServiceHTTPClientImpl{client}
}

func (c *ActivityServiceHTTPClientImpl) CreateActivity(ctx context.Context, in *CreateActivityRequest, opts ...http.CallOption) (*Activity, error) {
	var out Activity
	pattern := "/v1/ticketing/activity"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationActivityServiceCreateActivity))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ActivityServiceHTTPClientImpl) DeleteActivity(ctx context.Context, in *DeleteActivityRequest, opts ...http.CallOption) (*DeleteActivityReply, error) {
	var out DeleteActivityReply
	pattern := "/v1/ticketing/activity/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationActivityServiceDeleteActivity))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ActivityServiceHTTPClientImpl) GetActivity(ctx context.Context, in *GetActivityRequest, opts ...http.CallOption) (*Activity, error) {
	var out Activity
	pattern := "/v1/ticketing/activity/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationActivityServiceGetActivity))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ActivityServiceHTTPClientImpl) ListActivity(ctx context.Context, in *ListActivityRequest, opts ...http.CallOption) (*ListActivityReply, error) {
	var out ListActivityReply
	pattern := "/v1/ticketing/activity"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationActivityServiceListActivity))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ActivityServiceHTTPClientImpl) RecommendActivity(ctx context.Context, in *RecommendActivityRequest, opts ...http.CallOption) (*RecommendActivityReply, error) {
	var out RecommendActivityReply
	pattern := "/v1/ticketing/activity/{id}/recommend"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationActivityServiceRecommendActivity))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ActivityServiceHTTPClientImpl) UpdateActivity(ctx context.Context, in *UpdateActivityRequest, opts ...http.CallOption) (*Activity, error) {
	var out Activity
	pattern := "/v1/ticketing/activity/{activity.id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationActivityServiceUpdateActivity))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

const OperationActivityAppServiceGetAppActivity = "/ticketing.api.activity.v1.ActivityAppService/GetAppActivity"
const OperationActivityAppServiceListAppActivity = "/ticketing.api.activity.v1.ActivityAppService/ListAppActivity"
const OperationActivityAppServiceListAppActivityShow = "/ticketing.api.activity.v1.ActivityAppService/ListAppActivityShow"

type ActivityAppServiceHTTPServer interface {
	GetAppActivity(context.Context, *GetActivityRequest) (*Activity, error)
	ListAppActivity(context.Context, *ListActivityRequest) (*ListActivityReply, error)
	ListAppActivityShow(context.Context, *ListAppActivityShowRequest) (*ListAppActivityShowReply, error)
}

func RegisterActivityAppServiceHTTPServer(s *http.Server, srv ActivityAppServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/ticketing/app/activity/list", _ActivityAppService_ListAppActivity0_HTTP_Handler(srv))
	r.GET("/v1/ticketing/app/activity", _ActivityAppService_ListAppActivity1_HTTP_Handler(srv))
	r.GET("/v1/ticketing/app/activity/{id}", _ActivityAppService_GetAppActivity0_HTTP_Handler(srv))
	r.GET("/v1/ticketing/app/activity/{id}/show", _ActivityAppService_ListAppActivityShow0_HTTP_Handler(srv))
}

func _ActivityAppService_ListAppActivity0_HTTP_Handler(srv ActivityAppServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListActivityRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationActivityAppServiceListAppActivity)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListAppActivity(ctx, req.(*ListActivityRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListActivityReply)
		return ctx.Result(200, reply)
	}
}

func _ActivityAppService_ListAppActivity1_HTTP_Handler(srv ActivityAppServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListActivityRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationActivityAppServiceListAppActivity)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListAppActivity(ctx, req.(*ListActivityRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListActivityReply)
		return ctx.Result(200, reply)
	}
}

func _ActivityAppService_GetAppActivity0_HTTP_Handler(srv ActivityAppServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetActivityRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationActivityAppServiceGetAppActivity)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAppActivity(ctx, req.(*GetActivityRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Activity)
		return ctx.Result(200, reply)
	}
}

func _ActivityAppService_ListAppActivityShow0_HTTP_Handler(srv ActivityAppServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListAppActivityShowRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationActivityAppServiceListAppActivityShow)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListAppActivityShow(ctx, req.(*ListAppActivityShowRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListAppActivityShowReply)
		return ctx.Result(200, reply)
	}
}

type ActivityAppServiceHTTPClient interface {
	GetAppActivity(ctx context.Context, req *GetActivityRequest, opts ...http.CallOption) (rsp *Activity, err error)
	ListAppActivity(ctx context.Context, req *ListActivityRequest, opts ...http.CallOption) (rsp *ListActivityReply, err error)
	ListAppActivityShow(ctx context.Context, req *ListAppActivityShowRequest, opts ...http.CallOption) (rsp *ListAppActivityShowReply, err error)
}

type ActivityAppServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewActivityAppServiceHTTPClient(client *http.Client) ActivityAppServiceHTTPClient {
	return &ActivityAppServiceHTTPClientImpl{client}
}

func (c *ActivityAppServiceHTTPClientImpl) GetAppActivity(ctx context.Context, in *GetActivityRequest, opts ...http.CallOption) (*Activity, error) {
	var out Activity
	pattern := "/v1/ticketing/app/activity/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationActivityAppServiceGetAppActivity))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ActivityAppServiceHTTPClientImpl) ListAppActivity(ctx context.Context, in *ListActivityRequest, opts ...http.CallOption) (*ListActivityReply, error) {
	var out ListActivityReply
	pattern := "/v1/ticketing/app/activity"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationActivityAppServiceListAppActivity))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ActivityAppServiceHTTPClientImpl) ListAppActivityShow(ctx context.Context, in *ListAppActivityShowRequest, opts ...http.CallOption) (*ListAppActivityShowReply, error) {
	var out ListAppActivityShowReply
	pattern := "/v1/ticketing/app/activity/{id}/show"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationActivityAppServiceListAppActivityShow))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
