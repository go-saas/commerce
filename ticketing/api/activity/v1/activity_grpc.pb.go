// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: ticketing/api/activity/v1/activity.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ActivityService_ListActivity_FullMethodName      = "/ticketing.api.activity.v1.ActivityService/ListActivity"
	ActivityService_GetActivity_FullMethodName       = "/ticketing.api.activity.v1.ActivityService/GetActivity"
	ActivityService_CreateActivity_FullMethodName    = "/ticketing.api.activity.v1.ActivityService/CreateActivity"
	ActivityService_UpdateActivity_FullMethodName    = "/ticketing.api.activity.v1.ActivityService/UpdateActivity"
	ActivityService_DeleteActivity_FullMethodName    = "/ticketing.api.activity.v1.ActivityService/DeleteActivity"
	ActivityService_RecommendActivity_FullMethodName = "/ticketing.api.activity.v1.ActivityService/RecommendActivity"
)

// ActivityServiceClient is the client API for ActivityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ActivityServiceClient interface {
	ListActivity(ctx context.Context, in *ListActivityRequest, opts ...grpc.CallOption) (*ListActivityReply, error)
	GetActivity(ctx context.Context, in *GetActivityRequest, opts ...grpc.CallOption) (*Activity, error)
	CreateActivity(ctx context.Context, in *CreateActivityRequest, opts ...grpc.CallOption) (*Activity, error)
	UpdateActivity(ctx context.Context, in *UpdateActivityRequest, opts ...grpc.CallOption) (*Activity, error)
	DeleteActivity(ctx context.Context, in *DeleteActivityRequest, opts ...grpc.CallOption) (*DeleteActivityReply, error)
	RecommendActivity(ctx context.Context, in *RecommendActivityRequest, opts ...grpc.CallOption) (*RecommendActivityReply, error)
}

type activityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewActivityServiceClient(cc grpc.ClientConnInterface) ActivityServiceClient {
	return &activityServiceClient{cc}
}

func (c *activityServiceClient) ListActivity(ctx context.Context, in *ListActivityRequest, opts ...grpc.CallOption) (*ListActivityReply, error) {
	out := new(ListActivityReply)
	err := c.cc.Invoke(ctx, ActivityService_ListActivity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityServiceClient) GetActivity(ctx context.Context, in *GetActivityRequest, opts ...grpc.CallOption) (*Activity, error) {
	out := new(Activity)
	err := c.cc.Invoke(ctx, ActivityService_GetActivity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityServiceClient) CreateActivity(ctx context.Context, in *CreateActivityRequest, opts ...grpc.CallOption) (*Activity, error) {
	out := new(Activity)
	err := c.cc.Invoke(ctx, ActivityService_CreateActivity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityServiceClient) UpdateActivity(ctx context.Context, in *UpdateActivityRequest, opts ...grpc.CallOption) (*Activity, error) {
	out := new(Activity)
	err := c.cc.Invoke(ctx, ActivityService_UpdateActivity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityServiceClient) DeleteActivity(ctx context.Context, in *DeleteActivityRequest, opts ...grpc.CallOption) (*DeleteActivityReply, error) {
	out := new(DeleteActivityReply)
	err := c.cc.Invoke(ctx, ActivityService_DeleteActivity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityServiceClient) RecommendActivity(ctx context.Context, in *RecommendActivityRequest, opts ...grpc.CallOption) (*RecommendActivityReply, error) {
	out := new(RecommendActivityReply)
	err := c.cc.Invoke(ctx, ActivityService_RecommendActivity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ActivityServiceServer is the server API for ActivityService service.
// All implementations should embed UnimplementedActivityServiceServer
// for forward compatibility
type ActivityServiceServer interface {
	ListActivity(context.Context, *ListActivityRequest) (*ListActivityReply, error)
	GetActivity(context.Context, *GetActivityRequest) (*Activity, error)
	CreateActivity(context.Context, *CreateActivityRequest) (*Activity, error)
	UpdateActivity(context.Context, *UpdateActivityRequest) (*Activity, error)
	DeleteActivity(context.Context, *DeleteActivityRequest) (*DeleteActivityReply, error)
	RecommendActivity(context.Context, *RecommendActivityRequest) (*RecommendActivityReply, error)
}

// UnimplementedActivityServiceServer should be embedded to have forward compatible implementations.
type UnimplementedActivityServiceServer struct {
}

func (UnimplementedActivityServiceServer) ListActivity(context.Context, *ListActivityRequest) (*ListActivityReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListActivity not implemented")
}
func (UnimplementedActivityServiceServer) GetActivity(context.Context, *GetActivityRequest) (*Activity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActivity not implemented")
}
func (UnimplementedActivityServiceServer) CreateActivity(context.Context, *CreateActivityRequest) (*Activity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateActivity not implemented")
}
func (UnimplementedActivityServiceServer) UpdateActivity(context.Context, *UpdateActivityRequest) (*Activity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateActivity not implemented")
}
func (UnimplementedActivityServiceServer) DeleteActivity(context.Context, *DeleteActivityRequest) (*DeleteActivityReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteActivity not implemented")
}
func (UnimplementedActivityServiceServer) RecommendActivity(context.Context, *RecommendActivityRequest) (*RecommendActivityReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecommendActivity not implemented")
}

// UnsafeActivityServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActivityServiceServer will
// result in compilation errors.
type UnsafeActivityServiceServer interface {
	mustEmbedUnimplementedActivityServiceServer()
}

func RegisterActivityServiceServer(s grpc.ServiceRegistrar, srv ActivityServiceServer) {
	s.RegisterService(&ActivityService_ServiceDesc, srv)
}

func _ActivityService_ListActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServiceServer).ListActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityService_ListActivity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServiceServer).ListActivity(ctx, req.(*ListActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityService_GetActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServiceServer).GetActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityService_GetActivity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServiceServer).GetActivity(ctx, req.(*GetActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityService_CreateActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServiceServer).CreateActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityService_CreateActivity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServiceServer).CreateActivity(ctx, req.(*CreateActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityService_UpdateActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServiceServer).UpdateActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityService_UpdateActivity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServiceServer).UpdateActivity(ctx, req.(*UpdateActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityService_DeleteActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServiceServer).DeleteActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityService_DeleteActivity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServiceServer).DeleteActivity(ctx, req.(*DeleteActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityService_RecommendActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecommendActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServiceServer).RecommendActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityService_RecommendActivity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServiceServer).RecommendActivity(ctx, req.(*RecommendActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ActivityService_ServiceDesc is the grpc.ServiceDesc for ActivityService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ActivityService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ticketing.api.activity.v1.ActivityService",
	HandlerType: (*ActivityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListActivity",
			Handler:    _ActivityService_ListActivity_Handler,
		},
		{
			MethodName: "GetActivity",
			Handler:    _ActivityService_GetActivity_Handler,
		},
		{
			MethodName: "CreateActivity",
			Handler:    _ActivityService_CreateActivity_Handler,
		},
		{
			MethodName: "UpdateActivity",
			Handler:    _ActivityService_UpdateActivity_Handler,
		},
		{
			MethodName: "DeleteActivity",
			Handler:    _ActivityService_DeleteActivity_Handler,
		},
		{
			MethodName: "RecommendActivity",
			Handler:    _ActivityService_RecommendActivity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ticketing/api/activity/v1/activity.proto",
}

const (
	ActivityAppService_ListAppActivity_FullMethodName     = "/ticketing.api.activity.v1.ActivityAppService/ListAppActivity"
	ActivityAppService_GetAppActivity_FullMethodName      = "/ticketing.api.activity.v1.ActivityAppService/GetAppActivity"
	ActivityAppService_ListAppActivityShow_FullMethodName = "/ticketing.api.activity.v1.ActivityAppService/ListAppActivityShow"
)

// ActivityAppServiceClient is the client API for ActivityAppService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ActivityAppServiceClient interface {
	ListAppActivity(ctx context.Context, in *ListActivityRequest, opts ...grpc.CallOption) (*ListActivityReply, error)
	GetAppActivity(ctx context.Context, in *GetActivityRequest, opts ...grpc.CallOption) (*Activity, error)
	ListAppActivityShow(ctx context.Context, in *ListAppActivityShowRequest, opts ...grpc.CallOption) (*ListAppActivityShowReply, error)
}

type activityAppServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewActivityAppServiceClient(cc grpc.ClientConnInterface) ActivityAppServiceClient {
	return &activityAppServiceClient{cc}
}

func (c *activityAppServiceClient) ListAppActivity(ctx context.Context, in *ListActivityRequest, opts ...grpc.CallOption) (*ListActivityReply, error) {
	out := new(ListActivityReply)
	err := c.cc.Invoke(ctx, ActivityAppService_ListAppActivity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityAppServiceClient) GetAppActivity(ctx context.Context, in *GetActivityRequest, opts ...grpc.CallOption) (*Activity, error) {
	out := new(Activity)
	err := c.cc.Invoke(ctx, ActivityAppService_GetAppActivity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityAppServiceClient) ListAppActivityShow(ctx context.Context, in *ListAppActivityShowRequest, opts ...grpc.CallOption) (*ListAppActivityShowReply, error) {
	out := new(ListAppActivityShowReply)
	err := c.cc.Invoke(ctx, ActivityAppService_ListAppActivityShow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ActivityAppServiceServer is the server API for ActivityAppService service.
// All implementations should embed UnimplementedActivityAppServiceServer
// for forward compatibility
type ActivityAppServiceServer interface {
	ListAppActivity(context.Context, *ListActivityRequest) (*ListActivityReply, error)
	GetAppActivity(context.Context, *GetActivityRequest) (*Activity, error)
	ListAppActivityShow(context.Context, *ListAppActivityShowRequest) (*ListAppActivityShowReply, error)
}

// UnimplementedActivityAppServiceServer should be embedded to have forward compatible implementations.
type UnimplementedActivityAppServiceServer struct {
}

func (UnimplementedActivityAppServiceServer) ListAppActivity(context.Context, *ListActivityRequest) (*ListActivityReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAppActivity not implemented")
}
func (UnimplementedActivityAppServiceServer) GetAppActivity(context.Context, *GetActivityRequest) (*Activity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppActivity not implemented")
}
func (UnimplementedActivityAppServiceServer) ListAppActivityShow(context.Context, *ListAppActivityShowRequest) (*ListAppActivityShowReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAppActivityShow not implemented")
}

// UnsafeActivityAppServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActivityAppServiceServer will
// result in compilation errors.
type UnsafeActivityAppServiceServer interface {
	mustEmbedUnimplementedActivityAppServiceServer()
}

func RegisterActivityAppServiceServer(s grpc.ServiceRegistrar, srv ActivityAppServiceServer) {
	s.RegisterService(&ActivityAppService_ServiceDesc, srv)
}

func _ActivityAppService_ListAppActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityAppServiceServer).ListAppActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityAppService_ListAppActivity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityAppServiceServer).ListAppActivity(ctx, req.(*ListActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityAppService_GetAppActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityAppServiceServer).GetAppActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityAppService_GetAppActivity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityAppServiceServer).GetAppActivity(ctx, req.(*GetActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityAppService_ListAppActivityShow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppActivityShowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityAppServiceServer).ListAppActivityShow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityAppService_ListAppActivityShow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityAppServiceServer).ListAppActivityShow(ctx, req.(*ListAppActivityShowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ActivityAppService_ServiceDesc is the grpc.ServiceDesc for ActivityAppService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ActivityAppService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ticketing.api.activity.v1.ActivityAppService",
	HandlerType: (*ActivityAppServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAppActivity",
			Handler:    _ActivityAppService_ListAppActivity_Handler,
		},
		{
			MethodName: "GetAppActivity",
			Handler:    _ActivityAppService_GetAppActivity_Handler,
		},
		{
			MethodName: "ListAppActivityShow",
			Handler:    _ActivityAppService_ListAppActivityShow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ticketing/api/activity/v1/activity.proto",
}
