// Code generated by protoc-gen-go-grpc-proxy. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc-proxy v1.2.0
// - protoc             (unknown)
// source: ticketing/api/activity/v1/activity.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

var _ ActivityServiceServer = (*activityServiceClientProxy)(nil)

const GrpcOperationActivityServiceListActivity = "/ticketing.api.activity.v1.ActivityService/ListActivity"
const GrpcOperationActivityServiceGetActivity = "/ticketing.api.activity.v1.ActivityService/GetActivity"
const GrpcOperationActivityServiceCreateActivity = "/ticketing.api.activity.v1.ActivityService/CreateActivity"
const GrpcOperationActivityServiceUpdateActivity = "/ticketing.api.activity.v1.ActivityService/UpdateActivity"
const GrpcOperationActivityServiceDeleteActivity = "/ticketing.api.activity.v1.ActivityService/DeleteActivity"

// activityServiceClientProxy is the proxy to turn ActivityService client to server interface.
type activityServiceClientProxy struct {
	cc ActivityServiceClient
}

func NewActivityServiceClientProxy(cc ActivityServiceClient) ActivityServiceServer {
	return &activityServiceClientProxy{cc}
}

func (c *activityServiceClientProxy) ListActivity(ctx context.Context, in *ListActivityRequest) (*ListActivityReply, error) {
	return c.cc.ListActivity(ctx, in)
}
func (c *activityServiceClientProxy) GetActivity(ctx context.Context, in *GetActivityRequest) (*Activity, error) {
	return c.cc.GetActivity(ctx, in)
}
func (c *activityServiceClientProxy) CreateActivity(ctx context.Context, in *CreateActivityRequest) (*Activity, error) {
	return c.cc.CreateActivity(ctx, in)
}
func (c *activityServiceClientProxy) UpdateActivity(ctx context.Context, in *UpdateActivityRequest) (*Activity, error) {
	return c.cc.UpdateActivity(ctx, in)
}
func (c *activityServiceClientProxy) DeleteActivity(ctx context.Context, in *DeleteActivityRequest) (*DeleteActivityReply, error) {
	return c.cc.DeleteActivity(ctx, in)
}
