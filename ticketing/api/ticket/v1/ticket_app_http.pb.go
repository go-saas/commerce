// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.2
// - protoc             (unknown)
// source: ticketing/api/ticket/v1/ticket_app.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationTicketAppServiceListMyTicket = "/ticketing.api.ticket.v1.TicketAppService/ListMyTicket"

type TicketAppServiceHTTPServer interface {
	ListMyTicket(context.Context, *ListTicketRequest) (*ListTicketReply, error)
}

func RegisterTicketAppServiceHTTPServer(s *http.Server, srv TicketAppServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/ticket/my-ticket/list", _TicketAppService_ListMyTicket0_HTTP_Handler(srv))
	r.GET("/v1/ticketing/my-ticket", _TicketAppService_ListMyTicket1_HTTP_Handler(srv))
}

func _TicketAppService_ListMyTicket0_HTTP_Handler(srv TicketAppServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListTicketRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTicketAppServiceListMyTicket)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListMyTicket(ctx, req.(*ListTicketRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListTicketReply)
		return ctx.Result(200, reply)
	}
}

func _TicketAppService_ListMyTicket1_HTTP_Handler(srv TicketAppServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListTicketRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTicketAppServiceListMyTicket)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListMyTicket(ctx, req.(*ListTicketRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListTicketReply)
		return ctx.Result(200, reply)
	}
}

type TicketAppServiceHTTPClient interface {
	ListMyTicket(ctx context.Context, req *ListTicketRequest, opts ...http.CallOption) (rsp *ListTicketReply, err error)
}

type TicketAppServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewTicketAppServiceHTTPClient(client *http.Client) TicketAppServiceHTTPClient {
	return &TicketAppServiceHTTPClientImpl{client}
}

func (c *TicketAppServiceHTTPClientImpl) ListMyTicket(ctx context.Context, in *ListTicketRequest, opts ...http.CallOption) (*ListTicketReply, error) {
	var out ListTicketReply
	pattern := "/v1/ticketing/my-ticket"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationTicketAppServiceListMyTicket))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
