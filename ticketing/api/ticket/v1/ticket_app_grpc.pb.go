// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: ticketing/api/ticket/v1/ticket_app.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TicketAppService_ListMyTicket_FullMethodName = "/ticketing.api.ticket.v1.TicketAppService/ListMyTicket"
)

// TicketAppServiceClient is the client API for TicketAppService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TicketAppServiceClient interface {
	ListMyTicket(ctx context.Context, in *ListTicketRequest, opts ...grpc.CallOption) (*ListTicketReply, error)
}

type ticketAppServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTicketAppServiceClient(cc grpc.ClientConnInterface) TicketAppServiceClient {
	return &ticketAppServiceClient{cc}
}

func (c *ticketAppServiceClient) ListMyTicket(ctx context.Context, in *ListTicketRequest, opts ...grpc.CallOption) (*ListTicketReply, error) {
	out := new(ListTicketReply)
	err := c.cc.Invoke(ctx, TicketAppService_ListMyTicket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TicketAppServiceServer is the server API for TicketAppService service.
// All implementations should embed UnimplementedTicketAppServiceServer
// for forward compatibility
type TicketAppServiceServer interface {
	ListMyTicket(context.Context, *ListTicketRequest) (*ListTicketReply, error)
}

// UnimplementedTicketAppServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTicketAppServiceServer struct {
}

func (UnimplementedTicketAppServiceServer) ListMyTicket(context.Context, *ListTicketRequest) (*ListTicketReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMyTicket not implemented")
}

// UnsafeTicketAppServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TicketAppServiceServer will
// result in compilation errors.
type UnsafeTicketAppServiceServer interface {
	mustEmbedUnimplementedTicketAppServiceServer()
}

func RegisterTicketAppServiceServer(s grpc.ServiceRegistrar, srv TicketAppServiceServer) {
	s.RegisterService(&TicketAppService_ServiceDesc, srv)
}

func _TicketAppService_ListMyTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketAppServiceServer).ListMyTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketAppService_ListMyTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketAppServiceServer).ListMyTicket(ctx, req.(*ListTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TicketAppService_ServiceDesc is the grpc.ServiceDesc for TicketAppService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TicketAppService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ticketing.api.ticket.v1.TicketAppService",
	HandlerType: (*TicketAppServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListMyTicket",
			Handler:    _TicketAppService_ListMyTicket_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ticketing/api/ticket/v1/ticket_app.proto",
}
