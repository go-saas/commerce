// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.2
// - protoc             (unknown)
// source: ticketing/api/show/v1/show.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationShowServiceCreateShow = "/ticketing.api.show.v1.ShowService/CreateShow"
const OperationShowServiceDeleteShow = "/ticketing.api.show.v1.ShowService/DeleteShow"
const OperationShowServiceGetShow = "/ticketing.api.show.v1.ShowService/GetShow"
const OperationShowServiceListShow = "/ticketing.api.show.v1.ShowService/ListShow"
const OperationShowServiceUpdateShow = "/ticketing.api.show.v1.ShowService/UpdateShow"

type ShowServiceHTTPServer interface {
	CreateShow(context.Context, *CreateShowRequest) (*Show, error)
	DeleteShow(context.Context, *DeleteShowRequest) (*DeleteShowReply, error)
	GetShow(context.Context, *GetShowRequest) (*Show, error)
	ListShow(context.Context, *ListShowRequest) (*ListShowReply, error)
	UpdateShow(context.Context, *UpdateShowRequest) (*Show, error)
}

func RegisterShowServiceHTTPServer(s *http.Server, srv ShowServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/ticketing/show/list", _ShowService_ListShow0_HTTP_Handler(srv))
	r.GET("/v1/ticketing/show", _ShowService_ListShow1_HTTP_Handler(srv))
	r.GET("/v1/ticketing/show/{id}", _ShowService_GetShow0_HTTP_Handler(srv))
	r.POST("/v1/ticketing/show", _ShowService_CreateShow0_HTTP_Handler(srv))
	r.PATCH("/v1/ticketing/show/{show.id}", _ShowService_UpdateShow0_HTTP_Handler(srv))
	r.PUT("/v1/ticketing/show/{show.id}", _ShowService_UpdateShow1_HTTP_Handler(srv))
	r.DELETE("/v1/ticketing/show/{id}", _ShowService_DeleteShow0_HTTP_Handler(srv))
}

func _ShowService_ListShow0_HTTP_Handler(srv ShowServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListShowRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShowServiceListShow)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListShow(ctx, req.(*ListShowRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListShowReply)
		return ctx.Result(200, reply)
	}
}

func _ShowService_ListShow1_HTTP_Handler(srv ShowServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListShowRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShowServiceListShow)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListShow(ctx, req.(*ListShowRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListShowReply)
		return ctx.Result(200, reply)
	}
}

func _ShowService_GetShow0_HTTP_Handler(srv ShowServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetShowRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShowServiceGetShow)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetShow(ctx, req.(*GetShowRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Show)
		return ctx.Result(200, reply)
	}
}

func _ShowService_CreateShow0_HTTP_Handler(srv ShowServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateShowRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShowServiceCreateShow)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateShow(ctx, req.(*CreateShowRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Show)
		return ctx.Result(200, reply)
	}
}

func _ShowService_UpdateShow0_HTTP_Handler(srv ShowServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateShowRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShowServiceUpdateShow)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateShow(ctx, req.(*UpdateShowRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Show)
		return ctx.Result(200, reply)
	}
}

func _ShowService_UpdateShow1_HTTP_Handler(srv ShowServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateShowRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShowServiceUpdateShow)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateShow(ctx, req.(*UpdateShowRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Show)
		return ctx.Result(200, reply)
	}
}

func _ShowService_DeleteShow0_HTTP_Handler(srv ShowServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteShowRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShowServiceDeleteShow)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteShow(ctx, req.(*DeleteShowRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteShowReply)
		return ctx.Result(200, reply)
	}
}

type ShowServiceHTTPClient interface {
	CreateShow(ctx context.Context, req *CreateShowRequest, opts ...http.CallOption) (rsp *Show, err error)
	DeleteShow(ctx context.Context, req *DeleteShowRequest, opts ...http.CallOption) (rsp *DeleteShowReply, err error)
	GetShow(ctx context.Context, req *GetShowRequest, opts ...http.CallOption) (rsp *Show, err error)
	ListShow(ctx context.Context, req *ListShowRequest, opts ...http.CallOption) (rsp *ListShowReply, err error)
	UpdateShow(ctx context.Context, req *UpdateShowRequest, opts ...http.CallOption) (rsp *Show, err error)
}

type ShowServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewShowServiceHTTPClient(client *http.Client) ShowServiceHTTPClient {
	return &ShowServiceHTTPClientImpl{client}
}

func (c *ShowServiceHTTPClientImpl) CreateShow(ctx context.Context, in *CreateShowRequest, opts ...http.CallOption) (*Show, error) {
	var out Show
	pattern := "/v1/ticketing/show"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationShowServiceCreateShow))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShowServiceHTTPClientImpl) DeleteShow(ctx context.Context, in *DeleteShowRequest, opts ...http.CallOption) (*DeleteShowReply, error) {
	var out DeleteShowReply
	pattern := "/v1/ticketing/show/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationShowServiceDeleteShow))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShowServiceHTTPClientImpl) GetShow(ctx context.Context, in *GetShowRequest, opts ...http.CallOption) (*Show, error) {
	var out Show
	pattern := "/v1/ticketing/show/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationShowServiceGetShow))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShowServiceHTTPClientImpl) ListShow(ctx context.Context, in *ListShowRequest, opts ...http.CallOption) (*ListShowReply, error) {
	var out ListShowReply
	pattern := "/v1/ticketing/show"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationShowServiceListShow))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShowServiceHTTPClientImpl) UpdateShow(ctx context.Context, in *UpdateShowRequest, opts ...http.CallOption) (*Show, error) {
	var out Show
	pattern := "/v1/ticketing/show/{show.id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationShowServiceUpdateShow))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
