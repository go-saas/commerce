// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: ticketing/api/show/v1/show.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ShowService_ListShow_FullMethodName      = "/ticketing.api.show.v1.ShowService/ListShow"
	ShowService_GetShow_FullMethodName       = "/ticketing.api.show.v1.ShowService/GetShow"
	ShowService_CreateShow_FullMethodName    = "/ticketing.api.show.v1.ShowService/CreateShow"
	ShowService_UpdateShow_FullMethodName    = "/ticketing.api.show.v1.ShowService/UpdateShow"
	ShowService_DeleteShow_FullMethodName    = "/ticketing.api.show.v1.ShowService/DeleteShow"
	ShowService_RecommendShow_FullMethodName = "/ticketing.api.show.v1.ShowService/RecommendShow"
)

// ShowServiceClient is the client API for ShowService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShowServiceClient interface {
	ListShow(ctx context.Context, in *ListShowRequest, opts ...grpc.CallOption) (*ListShowReply, error)
	GetShow(ctx context.Context, in *GetShowRequest, opts ...grpc.CallOption) (*Show, error)
	CreateShow(ctx context.Context, in *CreateShowRequest, opts ...grpc.CallOption) (*Show, error)
	UpdateShow(ctx context.Context, in *UpdateShowRequest, opts ...grpc.CallOption) (*Show, error)
	DeleteShow(ctx context.Context, in *DeleteShowRequest, opts ...grpc.CallOption) (*DeleteShowReply, error)
	RecommendShow(ctx context.Context, in *RecommendShowRequest, opts ...grpc.CallOption) (*RecommendShowReply, error)
}

type showServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShowServiceClient(cc grpc.ClientConnInterface) ShowServiceClient {
	return &showServiceClient{cc}
}

func (c *showServiceClient) ListShow(ctx context.Context, in *ListShowRequest, opts ...grpc.CallOption) (*ListShowReply, error) {
	out := new(ListShowReply)
	err := c.cc.Invoke(ctx, ShowService_ListShow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showServiceClient) GetShow(ctx context.Context, in *GetShowRequest, opts ...grpc.CallOption) (*Show, error) {
	out := new(Show)
	err := c.cc.Invoke(ctx, ShowService_GetShow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showServiceClient) CreateShow(ctx context.Context, in *CreateShowRequest, opts ...grpc.CallOption) (*Show, error) {
	out := new(Show)
	err := c.cc.Invoke(ctx, ShowService_CreateShow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showServiceClient) UpdateShow(ctx context.Context, in *UpdateShowRequest, opts ...grpc.CallOption) (*Show, error) {
	out := new(Show)
	err := c.cc.Invoke(ctx, ShowService_UpdateShow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showServiceClient) DeleteShow(ctx context.Context, in *DeleteShowRequest, opts ...grpc.CallOption) (*DeleteShowReply, error) {
	out := new(DeleteShowReply)
	err := c.cc.Invoke(ctx, ShowService_DeleteShow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showServiceClient) RecommendShow(ctx context.Context, in *RecommendShowRequest, opts ...grpc.CallOption) (*RecommendShowReply, error) {
	out := new(RecommendShowReply)
	err := c.cc.Invoke(ctx, ShowService_RecommendShow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShowServiceServer is the server API for ShowService service.
// All implementations should embed UnimplementedShowServiceServer
// for forward compatibility
type ShowServiceServer interface {
	ListShow(context.Context, *ListShowRequest) (*ListShowReply, error)
	GetShow(context.Context, *GetShowRequest) (*Show, error)
	CreateShow(context.Context, *CreateShowRequest) (*Show, error)
	UpdateShow(context.Context, *UpdateShowRequest) (*Show, error)
	DeleteShow(context.Context, *DeleteShowRequest) (*DeleteShowReply, error)
	RecommendShow(context.Context, *RecommendShowRequest) (*RecommendShowReply, error)
}

// UnimplementedShowServiceServer should be embedded to have forward compatible implementations.
type UnimplementedShowServiceServer struct {
}

func (UnimplementedShowServiceServer) ListShow(context.Context, *ListShowRequest) (*ListShowReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListShow not implemented")
}
func (UnimplementedShowServiceServer) GetShow(context.Context, *GetShowRequest) (*Show, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShow not implemented")
}
func (UnimplementedShowServiceServer) CreateShow(context.Context, *CreateShowRequest) (*Show, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShow not implemented")
}
func (UnimplementedShowServiceServer) UpdateShow(context.Context, *UpdateShowRequest) (*Show, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateShow not implemented")
}
func (UnimplementedShowServiceServer) DeleteShow(context.Context, *DeleteShowRequest) (*DeleteShowReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteShow not implemented")
}
func (UnimplementedShowServiceServer) RecommendShow(context.Context, *RecommendShowRequest) (*RecommendShowReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecommendShow not implemented")
}

// UnsafeShowServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShowServiceServer will
// result in compilation errors.
type UnsafeShowServiceServer interface {
	mustEmbedUnimplementedShowServiceServer()
}

func RegisterShowServiceServer(s grpc.ServiceRegistrar, srv ShowServiceServer) {
	s.RegisterService(&ShowService_ServiceDesc, srv)
}

func _ShowService_ListShow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListShowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShowServiceServer).ListShow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShowService_ListShow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShowServiceServer).ListShow(ctx, req.(*ListShowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShowService_GetShow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShowServiceServer).GetShow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShowService_GetShow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShowServiceServer).GetShow(ctx, req.(*GetShowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShowService_CreateShow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShowServiceServer).CreateShow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShowService_CreateShow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShowServiceServer).CreateShow(ctx, req.(*CreateShowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShowService_UpdateShow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateShowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShowServiceServer).UpdateShow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShowService_UpdateShow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShowServiceServer).UpdateShow(ctx, req.(*UpdateShowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShowService_DeleteShow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteShowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShowServiceServer).DeleteShow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShowService_DeleteShow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShowServiceServer).DeleteShow(ctx, req.(*DeleteShowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShowService_RecommendShow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecommendShowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShowServiceServer).RecommendShow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShowService_RecommendShow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShowServiceServer).RecommendShow(ctx, req.(*RecommendShowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShowService_ServiceDesc is the grpc.ServiceDesc for ShowService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShowService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ticketing.api.show.v1.ShowService",
	HandlerType: (*ShowServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListShow",
			Handler:    _ShowService_ListShow_Handler,
		},
		{
			MethodName: "GetShow",
			Handler:    _ShowService_GetShow_Handler,
		},
		{
			MethodName: "CreateShow",
			Handler:    _ShowService_CreateShow_Handler,
		},
		{
			MethodName: "UpdateShow",
			Handler:    _ShowService_UpdateShow_Handler,
		},
		{
			MethodName: "DeleteShow",
			Handler:    _ShowService_DeleteShow_Handler,
		},
		{
			MethodName: "RecommendShow",
			Handler:    _ShowService_RecommendShow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ticketing/api/show/v1/show.proto",
}
