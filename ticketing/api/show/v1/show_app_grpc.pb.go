// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: ticketing/api/show/v1/show_app.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ShowAppService_ListAppShow_FullMethodName    = "/ticketing.api.show.v1.ShowAppService/ListAppShow"
	ShowAppService_GetAppShow_FullMethodName     = "/ticketing.api.show.v1.ShowAppService/GetAppShow"
	ShowAppService_PlaceShowOrder_FullMethodName = "/ticketing.api.show.v1.ShowAppService/PlaceShowOrder"
)

// ShowAppServiceClient is the client API for ShowAppService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShowAppServiceClient interface {
	ListAppShow(ctx context.Context, in *ListShowRequest, opts ...grpc.CallOption) (*ListShowReply, error)
	GetAppShow(ctx context.Context, in *GetShowRequest, opts ...grpc.CallOption) (*Show, error)
	PlaceShowOrder(ctx context.Context, in *PlaceShowOrderRequest, opts ...grpc.CallOption) (*PlaceShowOrderReply, error)
}

type showAppServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShowAppServiceClient(cc grpc.ClientConnInterface) ShowAppServiceClient {
	return &showAppServiceClient{cc}
}

func (c *showAppServiceClient) ListAppShow(ctx context.Context, in *ListShowRequest, opts ...grpc.CallOption) (*ListShowReply, error) {
	out := new(ListShowReply)
	err := c.cc.Invoke(ctx, ShowAppService_ListAppShow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showAppServiceClient) GetAppShow(ctx context.Context, in *GetShowRequest, opts ...grpc.CallOption) (*Show, error) {
	out := new(Show)
	err := c.cc.Invoke(ctx, ShowAppService_GetAppShow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showAppServiceClient) PlaceShowOrder(ctx context.Context, in *PlaceShowOrderRequest, opts ...grpc.CallOption) (*PlaceShowOrderReply, error) {
	out := new(PlaceShowOrderReply)
	err := c.cc.Invoke(ctx, ShowAppService_PlaceShowOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShowAppServiceServer is the server API for ShowAppService service.
// All implementations should embed UnimplementedShowAppServiceServer
// for forward compatibility
type ShowAppServiceServer interface {
	ListAppShow(context.Context, *ListShowRequest) (*ListShowReply, error)
	GetAppShow(context.Context, *GetShowRequest) (*Show, error)
	PlaceShowOrder(context.Context, *PlaceShowOrderRequest) (*PlaceShowOrderReply, error)
}

// UnimplementedShowAppServiceServer should be embedded to have forward compatible implementations.
type UnimplementedShowAppServiceServer struct {
}

func (UnimplementedShowAppServiceServer) ListAppShow(context.Context, *ListShowRequest) (*ListShowReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAppShow not implemented")
}
func (UnimplementedShowAppServiceServer) GetAppShow(context.Context, *GetShowRequest) (*Show, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppShow not implemented")
}
func (UnimplementedShowAppServiceServer) PlaceShowOrder(context.Context, *PlaceShowOrderRequest) (*PlaceShowOrderReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaceShowOrder not implemented")
}

// UnsafeShowAppServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShowAppServiceServer will
// result in compilation errors.
type UnsafeShowAppServiceServer interface {
	mustEmbedUnimplementedShowAppServiceServer()
}

func RegisterShowAppServiceServer(s grpc.ServiceRegistrar, srv ShowAppServiceServer) {
	s.RegisterService(&ShowAppService_ServiceDesc, srv)
}

func _ShowAppService_ListAppShow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListShowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShowAppServiceServer).ListAppShow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShowAppService_ListAppShow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShowAppServiceServer).ListAppShow(ctx, req.(*ListShowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShowAppService_GetAppShow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShowAppServiceServer).GetAppShow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShowAppService_GetAppShow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShowAppServiceServer).GetAppShow(ctx, req.(*GetShowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShowAppService_PlaceShowOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaceShowOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShowAppServiceServer).PlaceShowOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShowAppService_PlaceShowOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShowAppServiceServer).PlaceShowOrder(ctx, req.(*PlaceShowOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShowAppService_ServiceDesc is the grpc.ServiceDesc for ShowAppService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShowAppService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ticketing.api.show.v1.ShowAppService",
	HandlerType: (*ShowAppServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAppShow",
			Handler:    _ShowAppService_ListAppShow_Handler,
		},
		{
			MethodName: "GetAppShow",
			Handler:    _ShowAppService_GetAppShow_Handler,
		},
		{
			MethodName: "PlaceShowOrder",
			Handler:    _ShowAppService_PlaceShowOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ticketing/api/show/v1/show_app.proto",
}
