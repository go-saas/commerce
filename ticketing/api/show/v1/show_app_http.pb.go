// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.2
// - protoc             (unknown)
// source: ticketing/api/show/v1/show_app.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationShowAppServicePlaceShowOrder = "/ticketing.api.show.v1.ShowAppService/PlaceShowOrder"

type ShowAppServiceHTTPServer interface {
	PlaceShowOrder(context.Context, *PlaceShowOrderRequest) (*PlaceShowOrderReply, error)
}

func RegisterShowAppServiceHTTPServer(s *http.Server, srv ShowAppServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/ticketing/app/show/order", _ShowAppService_PlaceShowOrder0_HTTP_Handler(srv))
}

func _ShowAppService_PlaceShowOrder0_HTTP_Handler(srv ShowAppServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PlaceShowOrderRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShowAppServicePlaceShowOrder)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PlaceShowOrder(ctx, req.(*PlaceShowOrderRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PlaceShowOrderReply)
		return ctx.Result(200, reply)
	}
}

type ShowAppServiceHTTPClient interface {
	PlaceShowOrder(ctx context.Context, req *PlaceShowOrderRequest, opts ...http.CallOption) (rsp *PlaceShowOrderReply, err error)
}

type ShowAppServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewShowAppServiceHTTPClient(client *http.Client) ShowAppServiceHTTPClient {
	return &ShowAppServiceHTTPClientImpl{client}
}

func (c *ShowAppServiceHTTPClientImpl) PlaceShowOrder(ctx context.Context, in *PlaceShowOrderRequest, opts ...http.CallOption) (*PlaceShowOrderReply, error) {
	var out PlaceShowOrderReply
	pattern := "/v1/ticketing/app/show/order"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationShowAppServicePlaceShowOrder))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
