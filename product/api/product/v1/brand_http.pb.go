// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.2
// - protoc             (unknown)
// source: product/api/product/v1/brand.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationBrandServiceCreateBrand = "/product.api.product.v1.BrandService/CreateBrand"
const OperationBrandServiceDeleteBrand = "/product.api.product.v1.BrandService/DeleteBrand"
const OperationBrandServiceGetBrand = "/product.api.product.v1.BrandService/GetBrand"
const OperationBrandServiceListBrand = "/product.api.product.v1.BrandService/ListBrand"
const OperationBrandServiceUpdateBrand = "/product.api.product.v1.BrandService/UpdateBrand"

type BrandServiceHTTPServer interface {
	CreateBrand(context.Context, *CreateBrandRequest) (*Brand, error)
	DeleteBrand(context.Context, *DeleteBrandRequest) (*DeleteBrandReply, error)
	GetBrand(context.Context, *GetBrandRequest) (*Brand, error)
	ListBrand(context.Context, *ListBrandRequest) (*ListBrandReply, error)
	UpdateBrand(context.Context, *UpdateBrandRequest) (*Brand, error)
}

func RegisterBrandServiceHTTPServer(s *http.Server, srv BrandServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/product/brand/list", _BrandService_ListBrand0_HTTP_Handler(srv))
	r.GET("/v1/product/brands", _BrandService_ListBrand1_HTTP_Handler(srv))
	r.GET("/v1/product/brand/{id}", _BrandService_GetBrand0_HTTP_Handler(srv))
	r.POST("/v1/product/brand", _BrandService_CreateBrand0_HTTP_Handler(srv))
	r.PATCH("/v1/product/brand/{brand.id}", _BrandService_UpdateBrand0_HTTP_Handler(srv))
	r.PUT("/v1/product/brand/{brand.id}", _BrandService_UpdateBrand1_HTTP_Handler(srv))
	r.DELETE("/v1/product/brand/{id}", _BrandService_DeleteBrand0_HTTP_Handler(srv))
}

func _BrandService_ListBrand0_HTTP_Handler(srv BrandServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListBrandRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBrandServiceListBrand)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListBrand(ctx, req.(*ListBrandRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListBrandReply)
		return ctx.Result(200, reply)
	}
}

func _BrandService_ListBrand1_HTTP_Handler(srv BrandServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListBrandRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBrandServiceListBrand)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListBrand(ctx, req.(*ListBrandRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListBrandReply)
		return ctx.Result(200, reply)
	}
}

func _BrandService_GetBrand0_HTTP_Handler(srv BrandServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetBrandRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBrandServiceGetBrand)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetBrand(ctx, req.(*GetBrandRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Brand)
		return ctx.Result(200, reply)
	}
}

func _BrandService_CreateBrand0_HTTP_Handler(srv BrandServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateBrandRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBrandServiceCreateBrand)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateBrand(ctx, req.(*CreateBrandRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Brand)
		return ctx.Result(200, reply)
	}
}

func _BrandService_UpdateBrand0_HTTP_Handler(srv BrandServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateBrandRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBrandServiceUpdateBrand)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateBrand(ctx, req.(*UpdateBrandRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Brand)
		return ctx.Result(200, reply)
	}
}

func _BrandService_UpdateBrand1_HTTP_Handler(srv BrandServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateBrandRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBrandServiceUpdateBrand)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateBrand(ctx, req.(*UpdateBrandRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Brand)
		return ctx.Result(200, reply)
	}
}

func _BrandService_DeleteBrand0_HTTP_Handler(srv BrandServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteBrandRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBrandServiceDeleteBrand)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteBrand(ctx, req.(*DeleteBrandRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteBrandReply)
		return ctx.Result(200, reply)
	}
}

type BrandServiceHTTPClient interface {
	CreateBrand(ctx context.Context, req *CreateBrandRequest, opts ...http.CallOption) (rsp *Brand, err error)
	DeleteBrand(ctx context.Context, req *DeleteBrandRequest, opts ...http.CallOption) (rsp *DeleteBrandReply, err error)
	GetBrand(ctx context.Context, req *GetBrandRequest, opts ...http.CallOption) (rsp *Brand, err error)
	ListBrand(ctx context.Context, req *ListBrandRequest, opts ...http.CallOption) (rsp *ListBrandReply, err error)
	UpdateBrand(ctx context.Context, req *UpdateBrandRequest, opts ...http.CallOption) (rsp *Brand, err error)
}

type BrandServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewBrandServiceHTTPClient(client *http.Client) BrandServiceHTTPClient {
	return &BrandServiceHTTPClientImpl{client}
}

func (c *BrandServiceHTTPClientImpl) CreateBrand(ctx context.Context, in *CreateBrandRequest, opts ...http.CallOption) (*Brand, error) {
	var out Brand
	pattern := "/v1/product/brand"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBrandServiceCreateBrand))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BrandServiceHTTPClientImpl) DeleteBrand(ctx context.Context, in *DeleteBrandRequest, opts ...http.CallOption) (*DeleteBrandReply, error) {
	var out DeleteBrandReply
	pattern := "/v1/product/brand/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBrandServiceDeleteBrand))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BrandServiceHTTPClientImpl) GetBrand(ctx context.Context, in *GetBrandRequest, opts ...http.CallOption) (*Brand, error) {
	var out Brand
	pattern := "/v1/product/brand/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBrandServiceGetBrand))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BrandServiceHTTPClientImpl) ListBrand(ctx context.Context, in *ListBrandRequest, opts ...http.CallOption) (*ListBrandReply, error) {
	var out ListBrandReply
	pattern := "/v1/product/brands"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBrandServiceListBrand))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BrandServiceHTTPClientImpl) UpdateBrand(ctx context.Context, in *UpdateBrandRequest, opts ...http.CallOption) (*Brand, error) {
	var out Brand
	pattern := "/v1/product/brand/{brand.id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBrandServiceUpdateBrand))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
