// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: product/api/product/v1/brand.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateBrandRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateBrandRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBrandRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateBrandRequestMultiError, or nil if none found.
func (m *CreateBrandRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBrandRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetCode()) < 1 {
		err := CreateBrandRequestValidationError{
			field:  "Code",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Name

	// no validation rules for Logo

	// no validation rules for Url

	// no validation rules for Desc

	if len(errors) > 0 {
		return CreateBrandRequestMultiError(errors)
	}

	return nil
}

// CreateBrandRequestMultiError is an error wrapping multiple validation errors
// returned by CreateBrandRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateBrandRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBrandRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBrandRequestMultiError) AllErrors() []error { return m }

// CreateBrandRequestValidationError is the validation error returned by
// CreateBrandRequest.Validate if the designated constraints aren't met.
type CreateBrandRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBrandRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBrandRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBrandRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBrandRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBrandRequestValidationError) ErrorName() string {
	return "CreateBrandRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBrandRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBrandRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBrandRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBrandRequestValidationError{}

// Validate checks the field values on UpdateBrandRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateBrandRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBrandRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateBrandRequestMultiError, or nil if none found.
func (m *UpdateBrandRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBrandRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetBrand() == nil {
		err := UpdateBrandRequestValidationError{
			field:  "Brand",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetBrand()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateBrandRequestValidationError{
					field:  "Brand",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateBrandRequestValidationError{
					field:  "Brand",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBrand()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateBrandRequestValidationError{
				field:  "Brand",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateBrandRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateBrandRequestValidationError{
					field:  "UpdateMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateBrandRequestValidationError{
				field:  "UpdateMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateBrandRequestMultiError(errors)
	}

	return nil
}

// UpdateBrandRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateBrandRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateBrandRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBrandRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBrandRequestMultiError) AllErrors() []error { return m }

// UpdateBrandRequestValidationError is the validation error returned by
// UpdateBrandRequest.Validate if the designated constraints aren't met.
type UpdateBrandRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBrandRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBrandRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBrandRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBrandRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBrandRequestValidationError) ErrorName() string {
	return "UpdateBrandRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBrandRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBrandRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBrandRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBrandRequestValidationError{}

// Validate checks the field values on UpdateBrand with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateBrand) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateBrand with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateBrandMultiError, or
// nil if none found.
func (m *UpdateBrand) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateBrand) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := UpdateBrandValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Code

	// no validation rules for Name

	// no validation rules for Logo

	// no validation rules for Url

	// no validation rules for Desc

	if len(errors) > 0 {
		return UpdateBrandMultiError(errors)
	}

	return nil
}

// UpdateBrandMultiError is an error wrapping multiple validation errors
// returned by UpdateBrand.ValidateAll() if the designated constraints aren't met.
type UpdateBrandMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateBrandMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateBrandMultiError) AllErrors() []error { return m }

// UpdateBrandValidationError is the validation error returned by
// UpdateBrand.Validate if the designated constraints aren't met.
type UpdateBrandValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBrandValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBrandValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBrandValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBrandValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBrandValidationError) ErrorName() string { return "UpdateBrandValidationError" }

// Error satisfies the builtin error interface
func (e UpdateBrandValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBrand.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBrandValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBrandValidationError{}

// Validate checks the field values on DeleteBrandRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteBrandRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBrandRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteBrandRequestMultiError, or nil if none found.
func (m *DeleteBrandRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBrandRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteBrandRequestMultiError(errors)
	}

	return nil
}

// DeleteBrandRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteBrandRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteBrandRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBrandRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBrandRequestMultiError) AllErrors() []error { return m }

// DeleteBrandRequestValidationError is the validation error returned by
// DeleteBrandRequest.Validate if the designated constraints aren't met.
type DeleteBrandRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBrandRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBrandRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBrandRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBrandRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBrandRequestValidationError) ErrorName() string {
	return "DeleteBrandRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBrandRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBrandRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBrandRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBrandRequestValidationError{}

// Validate checks the field values on DeleteBrandReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteBrandReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBrandReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteBrandReplyMultiError, or nil if none found.
func (m *DeleteBrandReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBrandReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Code

	if len(errors) > 0 {
		return DeleteBrandReplyMultiError(errors)
	}

	return nil
}

// DeleteBrandReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteBrandReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteBrandReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBrandReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBrandReplyMultiError) AllErrors() []error { return m }

// DeleteBrandReplyValidationError is the validation error returned by
// DeleteBrandReply.Validate if the designated constraints aren't met.
type DeleteBrandReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBrandReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBrandReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBrandReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBrandReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBrandReplyValidationError) ErrorName() string { return "DeleteBrandReplyValidationError" }

// Error satisfies the builtin error interface
func (e DeleteBrandReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBrandReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBrandReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBrandReplyValidationError{}

// Validate checks the field values on GetBrandRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetBrandRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBrandRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBrandRequestMultiError, or nil if none found.
func (m *GetBrandRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBrandRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := GetBrandRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetBrandRequestMultiError(errors)
	}

	return nil
}

// GetBrandRequestMultiError is an error wrapping multiple validation errors
// returned by GetBrandRequest.ValidateAll() if the designated constraints
// aren't met.
type GetBrandRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBrandRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBrandRequestMultiError) AllErrors() []error { return m }

// GetBrandRequestValidationError is the validation error returned by
// GetBrandRequest.Validate if the designated constraints aren't met.
type GetBrandRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBrandRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBrandRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBrandRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBrandRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBrandRequestValidationError) ErrorName() string { return "GetBrandRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetBrandRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBrandRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBrandRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBrandRequestValidationError{}

// Validate checks the field values on BrandFilter with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BrandFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BrandFilter with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BrandFilterMultiError, or
// nil if none found.
func (m *BrandFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *BrandFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BrandFilterValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BrandFilterValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BrandFilterValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCode()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BrandFilterValidationError{
					field:  "Code",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BrandFilterValidationError{
					field:  "Code",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCode()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BrandFilterValidationError{
				field:  "Code",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BrandFilterMultiError(errors)
	}

	return nil
}

// BrandFilterMultiError is an error wrapping multiple validation errors
// returned by BrandFilter.ValidateAll() if the designated constraints aren't met.
type BrandFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BrandFilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BrandFilterMultiError) AllErrors() []error { return m }

// BrandFilterValidationError is the validation error returned by
// BrandFilter.Validate if the designated constraints aren't met.
type BrandFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BrandFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BrandFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BrandFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BrandFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BrandFilterValidationError) ErrorName() string { return "BrandFilterValidationError" }

// Error satisfies the builtin error interface
func (e BrandFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBrandFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BrandFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BrandFilterValidationError{}

// Validate checks the field values on ListBrandRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListBrandRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBrandRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBrandRequestMultiError, or nil if none found.
func (m *ListBrandRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBrandRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageOffset

	// no validation rules for PageSize

	// no validation rules for Search

	if all {
		switch v := interface{}(m.GetFields()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListBrandRequestValidationError{
					field:  "Fields",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListBrandRequestValidationError{
					field:  "Fields",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFields()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListBrandRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListBrandRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListBrandRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListBrandRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListBrandRequestMultiError(errors)
	}

	return nil
}

// ListBrandRequestMultiError is an error wrapping multiple validation errors
// returned by ListBrandRequest.ValidateAll() if the designated constraints
// aren't met.
type ListBrandRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBrandRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBrandRequestMultiError) AllErrors() []error { return m }

// ListBrandRequestValidationError is the validation error returned by
// ListBrandRequest.Validate if the designated constraints aren't met.
type ListBrandRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBrandRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBrandRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBrandRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBrandRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBrandRequestValidationError) ErrorName() string { return "ListBrandRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListBrandRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBrandRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBrandRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBrandRequestValidationError{}

// Validate checks the field values on ListBrandReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListBrandReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBrandReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListBrandReplyMultiError,
// or nil if none found.
func (m *ListBrandReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBrandReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TotalSize

	// no validation rules for FilterSize

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListBrandReplyValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListBrandReplyValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListBrandReplyValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListBrandReplyMultiError(errors)
	}

	return nil
}

// ListBrandReplyMultiError is an error wrapping multiple validation errors
// returned by ListBrandReply.ValidateAll() if the designated constraints
// aren't met.
type ListBrandReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBrandReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBrandReplyMultiError) AllErrors() []error { return m }

// ListBrandReplyValidationError is the validation error returned by
// ListBrandReply.Validate if the designated constraints aren't met.
type ListBrandReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBrandReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBrandReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBrandReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBrandReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBrandReplyValidationError) ErrorName() string { return "ListBrandReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListBrandReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBrandReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBrandReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBrandReplyValidationError{}

// Validate checks the field values on Brand with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Brand) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Brand with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in BrandMultiError, or nil if none found.
func (m *Brand) ValidateAll() error {
	return m.validate(true)
}

func (m *Brand) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Code

	// no validation rules for Name

	// no validation rules for Logo

	// no validation rules for Url

	// no validation rules for Desc

	if len(errors) > 0 {
		return BrandMultiError(errors)
	}

	return nil
}

// BrandMultiError is an error wrapping multiple validation errors returned by
// Brand.ValidateAll() if the designated constraints aren't met.
type BrandMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BrandMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BrandMultiError) AllErrors() []error { return m }

// BrandValidationError is the validation error returned by Brand.Validate if
// the designated constraints aren't met.
type BrandValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BrandValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BrandValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BrandValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BrandValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BrandValidationError) ErrorName() string { return "BrandValidationError" }

// Error satisfies the builtin error interface
func (e BrandValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBrand.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BrandValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BrandValidationError{}
