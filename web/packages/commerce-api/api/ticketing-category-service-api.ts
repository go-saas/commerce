/* tslint:disable */
/* eslint-disable */
/**
 * order/api/order/v1/order.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GooglerpcStatus } from '../models';
// @ts-ignore
import { Ticketingapicategoryv1Category } from '../models';
// @ts-ignore
import { Ticketingapicategoryv1CreateCategoryRequest } from '../models';
// @ts-ignore
import { Ticketingapicategoryv1DeleteCategoryReply } from '../models';
// @ts-ignore
import { Ticketingapicategoryv1ListCategoryReply } from '../models';
// @ts-ignore
import { Ticketingapicategoryv1ListCategoryRequest } from '../models';
// @ts-ignore
import { Ticketingapicategoryv1UpdateCategoryRequest } from '../models';
/**
 * TicketingCategoryServiceApi - axios parameter creator
 * @export
 */
export const TicketingCategoryServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Ticketingapicategoryv1CreateCategoryRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketingCategoryServiceCreateCategory: async (body: Ticketingapicategoryv1CreateCategoryRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('ticketingCategoryServiceCreateCategory', 'body', body)
            const localVarPath = `/v1/ticketing/category`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} key 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketingCategoryServiceDeleteCategory: async (key: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'key' is not null or undefined
            assertParamExists('ticketingCategoryServiceDeleteCategory', 'key', key)
            const localVarPath = `/v1/ticketing/category/{key}`
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} key 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketingCategoryServiceGetCategory: async (key: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'key' is not null or undefined
            assertParamExists('ticketingCategoryServiceGetCategory', 'key', key)
            const localVarPath = `/v1/ticketing/category/{key}`
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [pageOffset] 
         * @param {number} [pageSize] 
         * @param {string} [search] 
         * @param {Array<string>} [sort] 
         * @param {string} [fields] 
         * @param {string} [filterKey$eq] 
         * @param {string} [filterKey$neq] 
         * @param {string} [filterKey$contains] 
         * @param {string} [filterKey$startsWith] 
         * @param {string} [filterKey$nstartsWith] 
         * @param {string} [filterKey$endsWith] 
         * @param {string} [filterKey$nendsWith] 
         * @param {Array<string>} [filterKey$in] 
         * @param {Array<string>} [filterKey$nin] 
         * @param {boolean} [filterKey$null] 
         * @param {boolean} [filterKey$nnull] 
         * @param {boolean} [filterKey$empty] 
         * @param {boolean} [filterKey$nempty] 
         * @param {string} [filterKey$like] 
         * @param {string} [filterName$eq] 
         * @param {string} [filterName$neq] 
         * @param {string} [filterName$contains] 
         * @param {string} [filterName$startsWith] 
         * @param {string} [filterName$nstartsWith] 
         * @param {string} [filterName$endsWith] 
         * @param {string} [filterName$nendsWith] 
         * @param {Array<string>} [filterName$in] 
         * @param {Array<string>} [filterName$nin] 
         * @param {boolean} [filterName$null] 
         * @param {boolean} [filterName$nnull] 
         * @param {boolean} [filterName$empty] 
         * @param {boolean} [filterName$nempty] 
         * @param {string} [filterName$like] 
         * @param {string} [filterParent$eq] 
         * @param {string} [filterParent$neq] 
         * @param {string} [filterParent$contains] 
         * @param {string} [filterParent$startsWith] 
         * @param {string} [filterParent$nstartsWith] 
         * @param {string} [filterParent$endsWith] 
         * @param {string} [filterParent$nendsWith] 
         * @param {Array<string>} [filterParent$in] 
         * @param {Array<string>} [filterParent$nin] 
         * @param {boolean} [filterParent$null] 
         * @param {boolean} [filterParent$nnull] 
         * @param {boolean} [filterParent$empty] 
         * @param {boolean} [filterParent$nempty] 
         * @param {string} [filterParent$like] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketingCategoryServiceListCategory: async (pageOffset?: number, pageSize?: number, search?: string, sort?: Array<string>, fields?: string, filterKey$eq?: string, filterKey$neq?: string, filterKey$contains?: string, filterKey$startsWith?: string, filterKey$nstartsWith?: string, filterKey$endsWith?: string, filterKey$nendsWith?: string, filterKey$in?: Array<string>, filterKey$nin?: Array<string>, filterKey$null?: boolean, filterKey$nnull?: boolean, filterKey$empty?: boolean, filterKey$nempty?: boolean, filterKey$like?: string, filterName$eq?: string, filterName$neq?: string, filterName$contains?: string, filterName$startsWith?: string, filterName$nstartsWith?: string, filterName$endsWith?: string, filterName$nendsWith?: string, filterName$in?: Array<string>, filterName$nin?: Array<string>, filterName$null?: boolean, filterName$nnull?: boolean, filterName$empty?: boolean, filterName$nempty?: boolean, filterName$like?: string, filterParent$eq?: string, filterParent$neq?: string, filterParent$contains?: string, filterParent$startsWith?: string, filterParent$nstartsWith?: string, filterParent$endsWith?: string, filterParent$nendsWith?: string, filterParent$in?: Array<string>, filterParent$nin?: Array<string>, filterParent$null?: boolean, filterParent$nnull?: boolean, filterParent$empty?: boolean, filterParent$nempty?: boolean, filterParent$like?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/ticketing/category`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (pageOffset !== undefined) {
                localVarQueryParameter['pageOffset'] = pageOffset;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (filterKey$eq !== undefined) {
                localVarQueryParameter['filter.key.$eq'] = filterKey$eq;
            }

            if (filterKey$neq !== undefined) {
                localVarQueryParameter['filter.key.$neq'] = filterKey$neq;
            }

            if (filterKey$contains !== undefined) {
                localVarQueryParameter['filter.key.$contains'] = filterKey$contains;
            }

            if (filterKey$startsWith !== undefined) {
                localVarQueryParameter['filter.key.$starts_with'] = filterKey$startsWith;
            }

            if (filterKey$nstartsWith !== undefined) {
                localVarQueryParameter['filter.key.$nstarts_with'] = filterKey$nstartsWith;
            }

            if (filterKey$endsWith !== undefined) {
                localVarQueryParameter['filter.key.$ends_with'] = filterKey$endsWith;
            }

            if (filterKey$nendsWith !== undefined) {
                localVarQueryParameter['filter.key.$nends_with'] = filterKey$nendsWith;
            }

            if (filterKey$in) {
                localVarQueryParameter['filter.key.$in'] = filterKey$in;
            }

            if (filterKey$nin) {
                localVarQueryParameter['filter.key.$nin'] = filterKey$nin;
            }

            if (filterKey$null !== undefined) {
                localVarQueryParameter['filter.key.$null'] = filterKey$null;
            }

            if (filterKey$nnull !== undefined) {
                localVarQueryParameter['filter.key.$nnull'] = filterKey$nnull;
            }

            if (filterKey$empty !== undefined) {
                localVarQueryParameter['filter.key.$empty'] = filterKey$empty;
            }

            if (filterKey$nempty !== undefined) {
                localVarQueryParameter['filter.key.$nempty'] = filterKey$nempty;
            }

            if (filterKey$like !== undefined) {
                localVarQueryParameter['filter.key.$like'] = filterKey$like;
            }

            if (filterName$eq !== undefined) {
                localVarQueryParameter['filter.name.$eq'] = filterName$eq;
            }

            if (filterName$neq !== undefined) {
                localVarQueryParameter['filter.name.$neq'] = filterName$neq;
            }

            if (filterName$contains !== undefined) {
                localVarQueryParameter['filter.name.$contains'] = filterName$contains;
            }

            if (filterName$startsWith !== undefined) {
                localVarQueryParameter['filter.name.$starts_with'] = filterName$startsWith;
            }

            if (filterName$nstartsWith !== undefined) {
                localVarQueryParameter['filter.name.$nstarts_with'] = filterName$nstartsWith;
            }

            if (filterName$endsWith !== undefined) {
                localVarQueryParameter['filter.name.$ends_with'] = filterName$endsWith;
            }

            if (filterName$nendsWith !== undefined) {
                localVarQueryParameter['filter.name.$nends_with'] = filterName$nendsWith;
            }

            if (filterName$in) {
                localVarQueryParameter['filter.name.$in'] = filterName$in;
            }

            if (filterName$nin) {
                localVarQueryParameter['filter.name.$nin'] = filterName$nin;
            }

            if (filterName$null !== undefined) {
                localVarQueryParameter['filter.name.$null'] = filterName$null;
            }

            if (filterName$nnull !== undefined) {
                localVarQueryParameter['filter.name.$nnull'] = filterName$nnull;
            }

            if (filterName$empty !== undefined) {
                localVarQueryParameter['filter.name.$empty'] = filterName$empty;
            }

            if (filterName$nempty !== undefined) {
                localVarQueryParameter['filter.name.$nempty'] = filterName$nempty;
            }

            if (filterName$like !== undefined) {
                localVarQueryParameter['filter.name.$like'] = filterName$like;
            }

            if (filterParent$eq !== undefined) {
                localVarQueryParameter['filter.parent.$eq'] = filterParent$eq;
            }

            if (filterParent$neq !== undefined) {
                localVarQueryParameter['filter.parent.$neq'] = filterParent$neq;
            }

            if (filterParent$contains !== undefined) {
                localVarQueryParameter['filter.parent.$contains'] = filterParent$contains;
            }

            if (filterParent$startsWith !== undefined) {
                localVarQueryParameter['filter.parent.$starts_with'] = filterParent$startsWith;
            }

            if (filterParent$nstartsWith !== undefined) {
                localVarQueryParameter['filter.parent.$nstarts_with'] = filterParent$nstartsWith;
            }

            if (filterParent$endsWith !== undefined) {
                localVarQueryParameter['filter.parent.$ends_with'] = filterParent$endsWith;
            }

            if (filterParent$nendsWith !== undefined) {
                localVarQueryParameter['filter.parent.$nends_with'] = filterParent$nendsWith;
            }

            if (filterParent$in) {
                localVarQueryParameter['filter.parent.$in'] = filterParent$in;
            }

            if (filterParent$nin) {
                localVarQueryParameter['filter.parent.$nin'] = filterParent$nin;
            }

            if (filterParent$null !== undefined) {
                localVarQueryParameter['filter.parent.$null'] = filterParent$null;
            }

            if (filterParent$nnull !== undefined) {
                localVarQueryParameter['filter.parent.$nnull'] = filterParent$nnull;
            }

            if (filterParent$empty !== undefined) {
                localVarQueryParameter['filter.parent.$empty'] = filterParent$empty;
            }

            if (filterParent$nempty !== undefined) {
                localVarQueryParameter['filter.parent.$nempty'] = filterParent$nempty;
            }

            if (filterParent$like !== undefined) {
                localVarQueryParameter['filter.parent.$like'] = filterParent$like;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Ticketingapicategoryv1ListCategoryRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketingCategoryServiceListCategory2: async (body: Ticketingapicategoryv1ListCategoryRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('ticketingCategoryServiceListCategory2', 'body', body)
            const localVarPath = `/v1/ticketing/category/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} categoryKey 
         * @param {Ticketingapicategoryv1UpdateCategoryRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketingCategoryServiceUpdateCategory: async (categoryKey: string, body: Ticketingapicategoryv1UpdateCategoryRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryKey' is not null or undefined
            assertParamExists('ticketingCategoryServiceUpdateCategory', 'categoryKey', categoryKey)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('ticketingCategoryServiceUpdateCategory', 'body', body)
            const localVarPath = `/v1/ticketing/category/{category.key}`
                .replace(`{${"category.key"}}`, encodeURIComponent(String(categoryKey)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} categoryKey 
         * @param {Ticketingapicategoryv1UpdateCategoryRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketingCategoryServiceUpdateCategory2: async (categoryKey: string, body: Ticketingapicategoryv1UpdateCategoryRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryKey' is not null or undefined
            assertParamExists('ticketingCategoryServiceUpdateCategory2', 'categoryKey', categoryKey)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('ticketingCategoryServiceUpdateCategory2', 'body', body)
            const localVarPath = `/v1/ticketing/category/{category.key}`
                .replace(`{${"category.key"}}`, encodeURIComponent(String(categoryKey)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TicketingCategoryServiceApi - functional programming interface
 * @export
 */
export const TicketingCategoryServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TicketingCategoryServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Ticketingapicategoryv1CreateCategoryRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ticketingCategoryServiceCreateCategory(body: Ticketingapicategoryv1CreateCategoryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Ticketingapicategoryv1Category>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ticketingCategoryServiceCreateCategory(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} key 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ticketingCategoryServiceDeleteCategory(key: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Ticketingapicategoryv1DeleteCategoryReply>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ticketingCategoryServiceDeleteCategory(key, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} key 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ticketingCategoryServiceGetCategory(key: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Ticketingapicategoryv1Category>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ticketingCategoryServiceGetCategory(key, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [pageOffset] 
         * @param {number} [pageSize] 
         * @param {string} [search] 
         * @param {Array<string>} [sort] 
         * @param {string} [fields] 
         * @param {string} [filterKey$eq] 
         * @param {string} [filterKey$neq] 
         * @param {string} [filterKey$contains] 
         * @param {string} [filterKey$startsWith] 
         * @param {string} [filterKey$nstartsWith] 
         * @param {string} [filterKey$endsWith] 
         * @param {string} [filterKey$nendsWith] 
         * @param {Array<string>} [filterKey$in] 
         * @param {Array<string>} [filterKey$nin] 
         * @param {boolean} [filterKey$null] 
         * @param {boolean} [filterKey$nnull] 
         * @param {boolean} [filterKey$empty] 
         * @param {boolean} [filterKey$nempty] 
         * @param {string} [filterKey$like] 
         * @param {string} [filterName$eq] 
         * @param {string} [filterName$neq] 
         * @param {string} [filterName$contains] 
         * @param {string} [filterName$startsWith] 
         * @param {string} [filterName$nstartsWith] 
         * @param {string} [filterName$endsWith] 
         * @param {string} [filterName$nendsWith] 
         * @param {Array<string>} [filterName$in] 
         * @param {Array<string>} [filterName$nin] 
         * @param {boolean} [filterName$null] 
         * @param {boolean} [filterName$nnull] 
         * @param {boolean} [filterName$empty] 
         * @param {boolean} [filterName$nempty] 
         * @param {string} [filterName$like] 
         * @param {string} [filterParent$eq] 
         * @param {string} [filterParent$neq] 
         * @param {string} [filterParent$contains] 
         * @param {string} [filterParent$startsWith] 
         * @param {string} [filterParent$nstartsWith] 
         * @param {string} [filterParent$endsWith] 
         * @param {string} [filterParent$nendsWith] 
         * @param {Array<string>} [filterParent$in] 
         * @param {Array<string>} [filterParent$nin] 
         * @param {boolean} [filterParent$null] 
         * @param {boolean} [filterParent$nnull] 
         * @param {boolean} [filterParent$empty] 
         * @param {boolean} [filterParent$nempty] 
         * @param {string} [filterParent$like] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ticketingCategoryServiceListCategory(pageOffset?: number, pageSize?: number, search?: string, sort?: Array<string>, fields?: string, filterKey$eq?: string, filterKey$neq?: string, filterKey$contains?: string, filterKey$startsWith?: string, filterKey$nstartsWith?: string, filterKey$endsWith?: string, filterKey$nendsWith?: string, filterKey$in?: Array<string>, filterKey$nin?: Array<string>, filterKey$null?: boolean, filterKey$nnull?: boolean, filterKey$empty?: boolean, filterKey$nempty?: boolean, filterKey$like?: string, filterName$eq?: string, filterName$neq?: string, filterName$contains?: string, filterName$startsWith?: string, filterName$nstartsWith?: string, filterName$endsWith?: string, filterName$nendsWith?: string, filterName$in?: Array<string>, filterName$nin?: Array<string>, filterName$null?: boolean, filterName$nnull?: boolean, filterName$empty?: boolean, filterName$nempty?: boolean, filterName$like?: string, filterParent$eq?: string, filterParent$neq?: string, filterParent$contains?: string, filterParent$startsWith?: string, filterParent$nstartsWith?: string, filterParent$endsWith?: string, filterParent$nendsWith?: string, filterParent$in?: Array<string>, filterParent$nin?: Array<string>, filterParent$null?: boolean, filterParent$nnull?: boolean, filterParent$empty?: boolean, filterParent$nempty?: boolean, filterParent$like?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Ticketingapicategoryv1ListCategoryReply>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ticketingCategoryServiceListCategory(pageOffset, pageSize, search, sort, fields, filterKey$eq, filterKey$neq, filterKey$contains, filterKey$startsWith, filterKey$nstartsWith, filterKey$endsWith, filterKey$nendsWith, filterKey$in, filterKey$nin, filterKey$null, filterKey$nnull, filterKey$empty, filterKey$nempty, filterKey$like, filterName$eq, filterName$neq, filterName$contains, filterName$startsWith, filterName$nstartsWith, filterName$endsWith, filterName$nendsWith, filterName$in, filterName$nin, filterName$null, filterName$nnull, filterName$empty, filterName$nempty, filterName$like, filterParent$eq, filterParent$neq, filterParent$contains, filterParent$startsWith, filterParent$nstartsWith, filterParent$endsWith, filterParent$nendsWith, filterParent$in, filterParent$nin, filterParent$null, filterParent$nnull, filterParent$empty, filterParent$nempty, filterParent$like, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Ticketingapicategoryv1ListCategoryRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ticketingCategoryServiceListCategory2(body: Ticketingapicategoryv1ListCategoryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Ticketingapicategoryv1ListCategoryReply>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ticketingCategoryServiceListCategory2(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} categoryKey 
         * @param {Ticketingapicategoryv1UpdateCategoryRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ticketingCategoryServiceUpdateCategory(categoryKey: string, body: Ticketingapicategoryv1UpdateCategoryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Ticketingapicategoryv1Category>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ticketingCategoryServiceUpdateCategory(categoryKey, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} categoryKey 
         * @param {Ticketingapicategoryv1UpdateCategoryRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ticketingCategoryServiceUpdateCategory2(categoryKey: string, body: Ticketingapicategoryv1UpdateCategoryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Ticketingapicategoryv1Category>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ticketingCategoryServiceUpdateCategory2(categoryKey, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TicketingCategoryServiceApi - factory interface
 * @export
 */
export const TicketingCategoryServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TicketingCategoryServiceApiFp(configuration)
    return {
        /**
         * 
         * @param {Ticketingapicategoryv1CreateCategoryRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketingCategoryServiceCreateCategory(body: Ticketingapicategoryv1CreateCategoryRequest, options?: any): AxiosPromise<Ticketingapicategoryv1Category> {
            return localVarFp.ticketingCategoryServiceCreateCategory(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} key 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketingCategoryServiceDeleteCategory(key: string, options?: any): AxiosPromise<Ticketingapicategoryv1DeleteCategoryReply> {
            return localVarFp.ticketingCategoryServiceDeleteCategory(key, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} key 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketingCategoryServiceGetCategory(key: string, options?: any): AxiosPromise<Ticketingapicategoryv1Category> {
            return localVarFp.ticketingCategoryServiceGetCategory(key, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [pageOffset] 
         * @param {number} [pageSize] 
         * @param {string} [search] 
         * @param {Array<string>} [sort] 
         * @param {string} [fields] 
         * @param {string} [filterKey$eq] 
         * @param {string} [filterKey$neq] 
         * @param {string} [filterKey$contains] 
         * @param {string} [filterKey$startsWith] 
         * @param {string} [filterKey$nstartsWith] 
         * @param {string} [filterKey$endsWith] 
         * @param {string} [filterKey$nendsWith] 
         * @param {Array<string>} [filterKey$in] 
         * @param {Array<string>} [filterKey$nin] 
         * @param {boolean} [filterKey$null] 
         * @param {boolean} [filterKey$nnull] 
         * @param {boolean} [filterKey$empty] 
         * @param {boolean} [filterKey$nempty] 
         * @param {string} [filterKey$like] 
         * @param {string} [filterName$eq] 
         * @param {string} [filterName$neq] 
         * @param {string} [filterName$contains] 
         * @param {string} [filterName$startsWith] 
         * @param {string} [filterName$nstartsWith] 
         * @param {string} [filterName$endsWith] 
         * @param {string} [filterName$nendsWith] 
         * @param {Array<string>} [filterName$in] 
         * @param {Array<string>} [filterName$nin] 
         * @param {boolean} [filterName$null] 
         * @param {boolean} [filterName$nnull] 
         * @param {boolean} [filterName$empty] 
         * @param {boolean} [filterName$nempty] 
         * @param {string} [filterName$like] 
         * @param {string} [filterParent$eq] 
         * @param {string} [filterParent$neq] 
         * @param {string} [filterParent$contains] 
         * @param {string} [filterParent$startsWith] 
         * @param {string} [filterParent$nstartsWith] 
         * @param {string} [filterParent$endsWith] 
         * @param {string} [filterParent$nendsWith] 
         * @param {Array<string>} [filterParent$in] 
         * @param {Array<string>} [filterParent$nin] 
         * @param {boolean} [filterParent$null] 
         * @param {boolean} [filterParent$nnull] 
         * @param {boolean} [filterParent$empty] 
         * @param {boolean} [filterParent$nempty] 
         * @param {string} [filterParent$like] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketingCategoryServiceListCategory(pageOffset?: number, pageSize?: number, search?: string, sort?: Array<string>, fields?: string, filterKey$eq?: string, filterKey$neq?: string, filterKey$contains?: string, filterKey$startsWith?: string, filterKey$nstartsWith?: string, filterKey$endsWith?: string, filterKey$nendsWith?: string, filterKey$in?: Array<string>, filterKey$nin?: Array<string>, filterKey$null?: boolean, filterKey$nnull?: boolean, filterKey$empty?: boolean, filterKey$nempty?: boolean, filterKey$like?: string, filterName$eq?: string, filterName$neq?: string, filterName$contains?: string, filterName$startsWith?: string, filterName$nstartsWith?: string, filterName$endsWith?: string, filterName$nendsWith?: string, filterName$in?: Array<string>, filterName$nin?: Array<string>, filterName$null?: boolean, filterName$nnull?: boolean, filterName$empty?: boolean, filterName$nempty?: boolean, filterName$like?: string, filterParent$eq?: string, filterParent$neq?: string, filterParent$contains?: string, filterParent$startsWith?: string, filterParent$nstartsWith?: string, filterParent$endsWith?: string, filterParent$nendsWith?: string, filterParent$in?: Array<string>, filterParent$nin?: Array<string>, filterParent$null?: boolean, filterParent$nnull?: boolean, filterParent$empty?: boolean, filterParent$nempty?: boolean, filterParent$like?: string, options?: any): AxiosPromise<Ticketingapicategoryv1ListCategoryReply> {
            return localVarFp.ticketingCategoryServiceListCategory(pageOffset, pageSize, search, sort, fields, filterKey$eq, filterKey$neq, filterKey$contains, filterKey$startsWith, filterKey$nstartsWith, filterKey$endsWith, filterKey$nendsWith, filterKey$in, filterKey$nin, filterKey$null, filterKey$nnull, filterKey$empty, filterKey$nempty, filterKey$like, filterName$eq, filterName$neq, filterName$contains, filterName$startsWith, filterName$nstartsWith, filterName$endsWith, filterName$nendsWith, filterName$in, filterName$nin, filterName$null, filterName$nnull, filterName$empty, filterName$nempty, filterName$like, filterParent$eq, filterParent$neq, filterParent$contains, filterParent$startsWith, filterParent$nstartsWith, filterParent$endsWith, filterParent$nendsWith, filterParent$in, filterParent$nin, filterParent$null, filterParent$nnull, filterParent$empty, filterParent$nempty, filterParent$like, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Ticketingapicategoryv1ListCategoryRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketingCategoryServiceListCategory2(body: Ticketingapicategoryv1ListCategoryRequest, options?: any): AxiosPromise<Ticketingapicategoryv1ListCategoryReply> {
            return localVarFp.ticketingCategoryServiceListCategory2(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} categoryKey 
         * @param {Ticketingapicategoryv1UpdateCategoryRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketingCategoryServiceUpdateCategory(categoryKey: string, body: Ticketingapicategoryv1UpdateCategoryRequest, options?: any): AxiosPromise<Ticketingapicategoryv1Category> {
            return localVarFp.ticketingCategoryServiceUpdateCategory(categoryKey, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} categoryKey 
         * @param {Ticketingapicategoryv1UpdateCategoryRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketingCategoryServiceUpdateCategory2(categoryKey: string, body: Ticketingapicategoryv1UpdateCategoryRequest, options?: any): AxiosPromise<Ticketingapicategoryv1Category> {
            return localVarFp.ticketingCategoryServiceUpdateCategory2(categoryKey, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for ticketingCategoryServiceCreateCategory operation in TicketingCategoryServiceApi.
 * @export
 * @interface TicketingCategoryServiceApiTicketingCategoryServiceCreateCategoryRequest
 */
export interface TicketingCategoryServiceApiTicketingCategoryServiceCreateCategoryRequest {
    /**
     * 
     * @type {Ticketingapicategoryv1CreateCategoryRequest}
     * @memberof TicketingCategoryServiceApiTicketingCategoryServiceCreateCategory
     */
    readonly body: Ticketingapicategoryv1CreateCategoryRequest
}

/**
 * Request parameters for ticketingCategoryServiceDeleteCategory operation in TicketingCategoryServiceApi.
 * @export
 * @interface TicketingCategoryServiceApiTicketingCategoryServiceDeleteCategoryRequest
 */
export interface TicketingCategoryServiceApiTicketingCategoryServiceDeleteCategoryRequest {
    /**
     * 
     * @type {string}
     * @memberof TicketingCategoryServiceApiTicketingCategoryServiceDeleteCategory
     */
    readonly key: string
}

/**
 * Request parameters for ticketingCategoryServiceGetCategory operation in TicketingCategoryServiceApi.
 * @export
 * @interface TicketingCategoryServiceApiTicketingCategoryServiceGetCategoryRequest
 */
export interface TicketingCategoryServiceApiTicketingCategoryServiceGetCategoryRequest {
    /**
     * 
     * @type {string}
     * @memberof TicketingCategoryServiceApiTicketingCategoryServiceGetCategory
     */
    readonly key: string
}

/**
 * Request parameters for ticketingCategoryServiceListCategory operation in TicketingCategoryServiceApi.
 * @export
 * @interface TicketingCategoryServiceApiTicketingCategoryServiceListCategoryRequest
 */
export interface TicketingCategoryServiceApiTicketingCategoryServiceListCategoryRequest {
    /**
     * 
     * @type {number}
     * @memberof TicketingCategoryServiceApiTicketingCategoryServiceListCategory
     */
    readonly pageOffset?: number

    /**
     * 
     * @type {number}
     * @memberof TicketingCategoryServiceApiTicketingCategoryServiceListCategory
     */
    readonly pageSize?: number

    /**
     * 
     * @type {string}
     * @memberof TicketingCategoryServiceApiTicketingCategoryServiceListCategory
     */
    readonly search?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof TicketingCategoryServiceApiTicketingCategoryServiceListCategory
     */
    readonly sort?: Array<string>

    /**
     * 
     * @type {string}
     * @memberof TicketingCategoryServiceApiTicketingCategoryServiceListCategory
     */
    readonly fields?: string

    /**
     * 
     * @type {string}
     * @memberof TicketingCategoryServiceApiTicketingCategoryServiceListCategory
     */
    readonly filterKey$eq?: string

    /**
     * 
     * @type {string}
     * @memberof TicketingCategoryServiceApiTicketingCategoryServiceListCategory
     */
    readonly filterKey$neq?: string

    /**
     * 
     * @type {string}
     * @memberof TicketingCategoryServiceApiTicketingCategoryServiceListCategory
     */
    readonly filterKey$contains?: string

    /**
     * 
     * @type {string}
     * @memberof TicketingCategoryServiceApiTicketingCategoryServiceListCategory
     */
    readonly filterKey$startsWith?: string

    /**
     * 
     * @type {string}
     * @memberof TicketingCategoryServiceApiTicketingCategoryServiceListCategory
     */
    readonly filterKey$nstartsWith?: string

    /**
     * 
     * @type {string}
     * @memberof TicketingCategoryServiceApiTicketingCategoryServiceListCategory
     */
    readonly filterKey$endsWith?: string

    /**
     * 
     * @type {string}
     * @memberof TicketingCategoryServiceApiTicketingCategoryServiceListCategory
     */
    readonly filterKey$nendsWith?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof TicketingCategoryServiceApiTicketingCategoryServiceListCategory
     */
    readonly filterKey$in?: Array<string>

    /**
     * 
     * @type {Array<string>}
     * @memberof TicketingCategoryServiceApiTicketingCategoryServiceListCategory
     */
    readonly filterKey$nin?: Array<string>

    /**
     * 
     * @type {boolean}
     * @memberof TicketingCategoryServiceApiTicketingCategoryServiceListCategory
     */
    readonly filterKey$null?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof TicketingCategoryServiceApiTicketingCategoryServiceListCategory
     */
    readonly filterKey$nnull?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof TicketingCategoryServiceApiTicketingCategoryServiceListCategory
     */
    readonly filterKey$empty?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof TicketingCategoryServiceApiTicketingCategoryServiceListCategory
     */
    readonly filterKey$nempty?: boolean

    /**
     * 
     * @type {string}
     * @memberof TicketingCategoryServiceApiTicketingCategoryServiceListCategory
     */
    readonly filterKey$like?: string

    /**
     * 
     * @type {string}
     * @memberof TicketingCategoryServiceApiTicketingCategoryServiceListCategory
     */
    readonly filterName$eq?: string

    /**
     * 
     * @type {string}
     * @memberof TicketingCategoryServiceApiTicketingCategoryServiceListCategory
     */
    readonly filterName$neq?: string

    /**
     * 
     * @type {string}
     * @memberof TicketingCategoryServiceApiTicketingCategoryServiceListCategory
     */
    readonly filterName$contains?: string

    /**
     * 
     * @type {string}
     * @memberof TicketingCategoryServiceApiTicketingCategoryServiceListCategory
     */
    readonly filterName$startsWith?: string

    /**
     * 
     * @type {string}
     * @memberof TicketingCategoryServiceApiTicketingCategoryServiceListCategory
     */
    readonly filterName$nstartsWith?: string

    /**
     * 
     * @type {string}
     * @memberof TicketingCategoryServiceApiTicketingCategoryServiceListCategory
     */
    readonly filterName$endsWith?: string

    /**
     * 
     * @type {string}
     * @memberof TicketingCategoryServiceApiTicketingCategoryServiceListCategory
     */
    readonly filterName$nendsWith?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof TicketingCategoryServiceApiTicketingCategoryServiceListCategory
     */
    readonly filterName$in?: Array<string>

    /**
     * 
     * @type {Array<string>}
     * @memberof TicketingCategoryServiceApiTicketingCategoryServiceListCategory
     */
    readonly filterName$nin?: Array<string>

    /**
     * 
     * @type {boolean}
     * @memberof TicketingCategoryServiceApiTicketingCategoryServiceListCategory
     */
    readonly filterName$null?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof TicketingCategoryServiceApiTicketingCategoryServiceListCategory
     */
    readonly filterName$nnull?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof TicketingCategoryServiceApiTicketingCategoryServiceListCategory
     */
    readonly filterName$empty?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof TicketingCategoryServiceApiTicketingCategoryServiceListCategory
     */
    readonly filterName$nempty?: boolean

    /**
     * 
     * @type {string}
     * @memberof TicketingCategoryServiceApiTicketingCategoryServiceListCategory
     */
    readonly filterName$like?: string

    /**
     * 
     * @type {string}
     * @memberof TicketingCategoryServiceApiTicketingCategoryServiceListCategory
     */
    readonly filterParent$eq?: string

    /**
     * 
     * @type {string}
     * @memberof TicketingCategoryServiceApiTicketingCategoryServiceListCategory
     */
    readonly filterParent$neq?: string

    /**
     * 
     * @type {string}
     * @memberof TicketingCategoryServiceApiTicketingCategoryServiceListCategory
     */
    readonly filterParent$contains?: string

    /**
     * 
     * @type {string}
     * @memberof TicketingCategoryServiceApiTicketingCategoryServiceListCategory
     */
    readonly filterParent$startsWith?: string

    /**
     * 
     * @type {string}
     * @memberof TicketingCategoryServiceApiTicketingCategoryServiceListCategory
     */
    readonly filterParent$nstartsWith?: string

    /**
     * 
     * @type {string}
     * @memberof TicketingCategoryServiceApiTicketingCategoryServiceListCategory
     */
    readonly filterParent$endsWith?: string

    /**
     * 
     * @type {string}
     * @memberof TicketingCategoryServiceApiTicketingCategoryServiceListCategory
     */
    readonly filterParent$nendsWith?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof TicketingCategoryServiceApiTicketingCategoryServiceListCategory
     */
    readonly filterParent$in?: Array<string>

    /**
     * 
     * @type {Array<string>}
     * @memberof TicketingCategoryServiceApiTicketingCategoryServiceListCategory
     */
    readonly filterParent$nin?: Array<string>

    /**
     * 
     * @type {boolean}
     * @memberof TicketingCategoryServiceApiTicketingCategoryServiceListCategory
     */
    readonly filterParent$null?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof TicketingCategoryServiceApiTicketingCategoryServiceListCategory
     */
    readonly filterParent$nnull?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof TicketingCategoryServiceApiTicketingCategoryServiceListCategory
     */
    readonly filterParent$empty?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof TicketingCategoryServiceApiTicketingCategoryServiceListCategory
     */
    readonly filterParent$nempty?: boolean

    /**
     * 
     * @type {string}
     * @memberof TicketingCategoryServiceApiTicketingCategoryServiceListCategory
     */
    readonly filterParent$like?: string
}

/**
 * Request parameters for ticketingCategoryServiceListCategory2 operation in TicketingCategoryServiceApi.
 * @export
 * @interface TicketingCategoryServiceApiTicketingCategoryServiceListCategory2Request
 */
export interface TicketingCategoryServiceApiTicketingCategoryServiceListCategory2Request {
    /**
     * 
     * @type {Ticketingapicategoryv1ListCategoryRequest}
     * @memberof TicketingCategoryServiceApiTicketingCategoryServiceListCategory2
     */
    readonly body: Ticketingapicategoryv1ListCategoryRequest
}

/**
 * Request parameters for ticketingCategoryServiceUpdateCategory operation in TicketingCategoryServiceApi.
 * @export
 * @interface TicketingCategoryServiceApiTicketingCategoryServiceUpdateCategoryRequest
 */
export interface TicketingCategoryServiceApiTicketingCategoryServiceUpdateCategoryRequest {
    /**
     * 
     * @type {string}
     * @memberof TicketingCategoryServiceApiTicketingCategoryServiceUpdateCategory
     */
    readonly categoryKey: string

    /**
     * 
     * @type {Ticketingapicategoryv1UpdateCategoryRequest}
     * @memberof TicketingCategoryServiceApiTicketingCategoryServiceUpdateCategory
     */
    readonly body: Ticketingapicategoryv1UpdateCategoryRequest
}

/**
 * Request parameters for ticketingCategoryServiceUpdateCategory2 operation in TicketingCategoryServiceApi.
 * @export
 * @interface TicketingCategoryServiceApiTicketingCategoryServiceUpdateCategory2Request
 */
export interface TicketingCategoryServiceApiTicketingCategoryServiceUpdateCategory2Request {
    /**
     * 
     * @type {string}
     * @memberof TicketingCategoryServiceApiTicketingCategoryServiceUpdateCategory2
     */
    readonly categoryKey: string

    /**
     * 
     * @type {Ticketingapicategoryv1UpdateCategoryRequest}
     * @memberof TicketingCategoryServiceApiTicketingCategoryServiceUpdateCategory2
     */
    readonly body: Ticketingapicategoryv1UpdateCategoryRequest
}

/**
 * TicketingCategoryServiceApi - object-oriented interface
 * @export
 * @class TicketingCategoryServiceApi
 * @extends {BaseAPI}
 */
export class TicketingCategoryServiceApi extends BaseAPI {
    /**
     * 
     * @param {TicketingCategoryServiceApiTicketingCategoryServiceCreateCategoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketingCategoryServiceApi
     */
    public ticketingCategoryServiceCreateCategory(requestParameters: TicketingCategoryServiceApiTicketingCategoryServiceCreateCategoryRequest, options?: AxiosRequestConfig) {
        return TicketingCategoryServiceApiFp(this.configuration).ticketingCategoryServiceCreateCategory(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TicketingCategoryServiceApiTicketingCategoryServiceDeleteCategoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketingCategoryServiceApi
     */
    public ticketingCategoryServiceDeleteCategory(requestParameters: TicketingCategoryServiceApiTicketingCategoryServiceDeleteCategoryRequest, options?: AxiosRequestConfig) {
        return TicketingCategoryServiceApiFp(this.configuration).ticketingCategoryServiceDeleteCategory(requestParameters.key, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TicketingCategoryServiceApiTicketingCategoryServiceGetCategoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketingCategoryServiceApi
     */
    public ticketingCategoryServiceGetCategory(requestParameters: TicketingCategoryServiceApiTicketingCategoryServiceGetCategoryRequest, options?: AxiosRequestConfig) {
        return TicketingCategoryServiceApiFp(this.configuration).ticketingCategoryServiceGetCategory(requestParameters.key, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TicketingCategoryServiceApiTicketingCategoryServiceListCategoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketingCategoryServiceApi
     */
    public ticketingCategoryServiceListCategory(requestParameters: TicketingCategoryServiceApiTicketingCategoryServiceListCategoryRequest = {}, options?: AxiosRequestConfig) {
        return TicketingCategoryServiceApiFp(this.configuration).ticketingCategoryServiceListCategory(requestParameters.pageOffset, requestParameters.pageSize, requestParameters.search, requestParameters.sort, requestParameters.fields, requestParameters.filterKey$eq, requestParameters.filterKey$neq, requestParameters.filterKey$contains, requestParameters.filterKey$startsWith, requestParameters.filterKey$nstartsWith, requestParameters.filterKey$endsWith, requestParameters.filterKey$nendsWith, requestParameters.filterKey$in, requestParameters.filterKey$nin, requestParameters.filterKey$null, requestParameters.filterKey$nnull, requestParameters.filterKey$empty, requestParameters.filterKey$nempty, requestParameters.filterKey$like, requestParameters.filterName$eq, requestParameters.filterName$neq, requestParameters.filterName$contains, requestParameters.filterName$startsWith, requestParameters.filterName$nstartsWith, requestParameters.filterName$endsWith, requestParameters.filterName$nendsWith, requestParameters.filterName$in, requestParameters.filterName$nin, requestParameters.filterName$null, requestParameters.filterName$nnull, requestParameters.filterName$empty, requestParameters.filterName$nempty, requestParameters.filterName$like, requestParameters.filterParent$eq, requestParameters.filterParent$neq, requestParameters.filterParent$contains, requestParameters.filterParent$startsWith, requestParameters.filterParent$nstartsWith, requestParameters.filterParent$endsWith, requestParameters.filterParent$nendsWith, requestParameters.filterParent$in, requestParameters.filterParent$nin, requestParameters.filterParent$null, requestParameters.filterParent$nnull, requestParameters.filterParent$empty, requestParameters.filterParent$nempty, requestParameters.filterParent$like, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TicketingCategoryServiceApiTicketingCategoryServiceListCategory2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketingCategoryServiceApi
     */
    public ticketingCategoryServiceListCategory2(requestParameters: TicketingCategoryServiceApiTicketingCategoryServiceListCategory2Request, options?: AxiosRequestConfig) {
        return TicketingCategoryServiceApiFp(this.configuration).ticketingCategoryServiceListCategory2(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TicketingCategoryServiceApiTicketingCategoryServiceUpdateCategoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketingCategoryServiceApi
     */
    public ticketingCategoryServiceUpdateCategory(requestParameters: TicketingCategoryServiceApiTicketingCategoryServiceUpdateCategoryRequest, options?: AxiosRequestConfig) {
        return TicketingCategoryServiceApiFp(this.configuration).ticketingCategoryServiceUpdateCategory(requestParameters.categoryKey, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TicketingCategoryServiceApiTicketingCategoryServiceUpdateCategory2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketingCategoryServiceApi
     */
    public ticketingCategoryServiceUpdateCategory2(requestParameters: TicketingCategoryServiceApiTicketingCategoryServiceUpdateCategory2Request, options?: AxiosRequestConfig) {
        return TicketingCategoryServiceApiFp(this.configuration).ticketingCategoryServiceUpdateCategory2(requestParameters.categoryKey, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}
