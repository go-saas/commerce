/* tslint:disable */
/* eslint-disable */
/**
 * order/api/order/v1/order.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GooglerpcStatus } from '../models';
// @ts-ignore
import { V1CreateShowRequest } from '../models';
// @ts-ignore
import { V1DeleteShowReply } from '../models';
// @ts-ignore
import { V1ListShowReply } from '../models';
// @ts-ignore
import { V1ListShowRequest } from '../models';
// @ts-ignore
import { V1Show } from '../models';
// @ts-ignore
import { V1UpdateShowRequest } from '../models';
/**
 * ShowServiceApi - axios parameter creator
 * @export
 */
export const ShowServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {V1CreateShowRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showServiceCreateShow: async (body: V1CreateShowRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('showServiceCreateShow', 'body', body)
            const localVarPath = `/v1/ticketing/show`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showServiceDeleteShow: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('showServiceDeleteShow', 'id', id)
            const localVarPath = `/v1/ticketing/show/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showServiceGetShow: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('showServiceGetShow', 'id', id)
            const localVarPath = `/v1/ticketing/show/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [pageOffset] 
         * @param {number} [pageSize] 
         * @param {string} [search] 
         * @param {Array<string>} [sort] 
         * @param {string} [fields] 
         * @param {string} [filterId$eq] 
         * @param {string} [filterId$neq] 
         * @param {string} [filterId$contains] 
         * @param {string} [filterId$startsWith] 
         * @param {string} [filterId$nstartsWith] 
         * @param {string} [filterId$endsWith] 
         * @param {string} [filterId$nendsWith] 
         * @param {Array<string>} [filterId$in] 
         * @param {Array<string>} [filterId$nin] 
         * @param {boolean} [filterId$null] 
         * @param {boolean} [filterId$nnull] 
         * @param {boolean} [filterId$empty] 
         * @param {boolean} [filterId$nempty] 
         * @param {string} [filterId$like] 
         * @param {string} [filterName$eq] 
         * @param {string} [filterName$neq] 
         * @param {string} [filterName$contains] 
         * @param {string} [filterName$startsWith] 
         * @param {string} [filterName$nstartsWith] 
         * @param {string} [filterName$endsWith] 
         * @param {string} [filterName$nendsWith] 
         * @param {Array<string>} [filterName$in] 
         * @param {Array<string>} [filterName$nin] 
         * @param {boolean} [filterName$null] 
         * @param {boolean} [filterName$nnull] 
         * @param {boolean} [filterName$empty] 
         * @param {boolean} [filterName$nempty] 
         * @param {string} [filterName$like] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showServiceListShow: async (pageOffset?: number, pageSize?: number, search?: string, sort?: Array<string>, fields?: string, filterId$eq?: string, filterId$neq?: string, filterId$contains?: string, filterId$startsWith?: string, filterId$nstartsWith?: string, filterId$endsWith?: string, filterId$nendsWith?: string, filterId$in?: Array<string>, filterId$nin?: Array<string>, filterId$null?: boolean, filterId$nnull?: boolean, filterId$empty?: boolean, filterId$nempty?: boolean, filterId$like?: string, filterName$eq?: string, filterName$neq?: string, filterName$contains?: string, filterName$startsWith?: string, filterName$nstartsWith?: string, filterName$endsWith?: string, filterName$nendsWith?: string, filterName$in?: Array<string>, filterName$nin?: Array<string>, filterName$null?: boolean, filterName$nnull?: boolean, filterName$empty?: boolean, filterName$nempty?: boolean, filterName$like?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/ticketing/show`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (pageOffset !== undefined) {
                localVarQueryParameter['pageOffset'] = pageOffset;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (filterId$eq !== undefined) {
                localVarQueryParameter['filter.id.$eq'] = filterId$eq;
            }

            if (filterId$neq !== undefined) {
                localVarQueryParameter['filter.id.$neq'] = filterId$neq;
            }

            if (filterId$contains !== undefined) {
                localVarQueryParameter['filter.id.$contains'] = filterId$contains;
            }

            if (filterId$startsWith !== undefined) {
                localVarQueryParameter['filter.id.$starts_with'] = filterId$startsWith;
            }

            if (filterId$nstartsWith !== undefined) {
                localVarQueryParameter['filter.id.$nstarts_with'] = filterId$nstartsWith;
            }

            if (filterId$endsWith !== undefined) {
                localVarQueryParameter['filter.id.$ends_with'] = filterId$endsWith;
            }

            if (filterId$nendsWith !== undefined) {
                localVarQueryParameter['filter.id.$nends_with'] = filterId$nendsWith;
            }

            if (filterId$in) {
                localVarQueryParameter['filter.id.$in'] = filterId$in;
            }

            if (filterId$nin) {
                localVarQueryParameter['filter.id.$nin'] = filterId$nin;
            }

            if (filterId$null !== undefined) {
                localVarQueryParameter['filter.id.$null'] = filterId$null;
            }

            if (filterId$nnull !== undefined) {
                localVarQueryParameter['filter.id.$nnull'] = filterId$nnull;
            }

            if (filterId$empty !== undefined) {
                localVarQueryParameter['filter.id.$empty'] = filterId$empty;
            }

            if (filterId$nempty !== undefined) {
                localVarQueryParameter['filter.id.$nempty'] = filterId$nempty;
            }

            if (filterId$like !== undefined) {
                localVarQueryParameter['filter.id.$like'] = filterId$like;
            }

            if (filterName$eq !== undefined) {
                localVarQueryParameter['filter.name.$eq'] = filterName$eq;
            }

            if (filterName$neq !== undefined) {
                localVarQueryParameter['filter.name.$neq'] = filterName$neq;
            }

            if (filterName$contains !== undefined) {
                localVarQueryParameter['filter.name.$contains'] = filterName$contains;
            }

            if (filterName$startsWith !== undefined) {
                localVarQueryParameter['filter.name.$starts_with'] = filterName$startsWith;
            }

            if (filterName$nstartsWith !== undefined) {
                localVarQueryParameter['filter.name.$nstarts_with'] = filterName$nstartsWith;
            }

            if (filterName$endsWith !== undefined) {
                localVarQueryParameter['filter.name.$ends_with'] = filterName$endsWith;
            }

            if (filterName$nendsWith !== undefined) {
                localVarQueryParameter['filter.name.$nends_with'] = filterName$nendsWith;
            }

            if (filterName$in) {
                localVarQueryParameter['filter.name.$in'] = filterName$in;
            }

            if (filterName$nin) {
                localVarQueryParameter['filter.name.$nin'] = filterName$nin;
            }

            if (filterName$null !== undefined) {
                localVarQueryParameter['filter.name.$null'] = filterName$null;
            }

            if (filterName$nnull !== undefined) {
                localVarQueryParameter['filter.name.$nnull'] = filterName$nnull;
            }

            if (filterName$empty !== undefined) {
                localVarQueryParameter['filter.name.$empty'] = filterName$empty;
            }

            if (filterName$nempty !== undefined) {
                localVarQueryParameter['filter.name.$nempty'] = filterName$nempty;
            }

            if (filterName$like !== undefined) {
                localVarQueryParameter['filter.name.$like'] = filterName$like;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {V1ListShowRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showServiceListShow2: async (body: V1ListShowRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('showServiceListShow2', 'body', body)
            const localVarPath = `/v1/show/show/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} showId 
         * @param {V1UpdateShowRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showServiceUpdateShow: async (showId: string, body: V1UpdateShowRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'showId' is not null or undefined
            assertParamExists('showServiceUpdateShow', 'showId', showId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('showServiceUpdateShow', 'body', body)
            const localVarPath = `/v1/ticketing/show/{show.id}`
                .replace(`{${"show.id"}}`, encodeURIComponent(String(showId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} showId 
         * @param {V1UpdateShowRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showServiceUpdateShow2: async (showId: string, body: V1UpdateShowRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'showId' is not null or undefined
            assertParamExists('showServiceUpdateShow2', 'showId', showId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('showServiceUpdateShow2', 'body', body)
            const localVarPath = `/v1/ticketing/show/{show.id}`
                .replace(`{${"show.id"}}`, encodeURIComponent(String(showId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShowServiceApi - functional programming interface
 * @export
 */
export const ShowServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShowServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {V1CreateShowRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showServiceCreateShow(body: V1CreateShowRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Show>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showServiceCreateShow(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showServiceDeleteShow(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1DeleteShowReply>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showServiceDeleteShow(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showServiceGetShow(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Show>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showServiceGetShow(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [pageOffset] 
         * @param {number} [pageSize] 
         * @param {string} [search] 
         * @param {Array<string>} [sort] 
         * @param {string} [fields] 
         * @param {string} [filterId$eq] 
         * @param {string} [filterId$neq] 
         * @param {string} [filterId$contains] 
         * @param {string} [filterId$startsWith] 
         * @param {string} [filterId$nstartsWith] 
         * @param {string} [filterId$endsWith] 
         * @param {string} [filterId$nendsWith] 
         * @param {Array<string>} [filterId$in] 
         * @param {Array<string>} [filterId$nin] 
         * @param {boolean} [filterId$null] 
         * @param {boolean} [filterId$nnull] 
         * @param {boolean} [filterId$empty] 
         * @param {boolean} [filterId$nempty] 
         * @param {string} [filterId$like] 
         * @param {string} [filterName$eq] 
         * @param {string} [filterName$neq] 
         * @param {string} [filterName$contains] 
         * @param {string} [filterName$startsWith] 
         * @param {string} [filterName$nstartsWith] 
         * @param {string} [filterName$endsWith] 
         * @param {string} [filterName$nendsWith] 
         * @param {Array<string>} [filterName$in] 
         * @param {Array<string>} [filterName$nin] 
         * @param {boolean} [filterName$null] 
         * @param {boolean} [filterName$nnull] 
         * @param {boolean} [filterName$empty] 
         * @param {boolean} [filterName$nempty] 
         * @param {string} [filterName$like] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showServiceListShow(pageOffset?: number, pageSize?: number, search?: string, sort?: Array<string>, fields?: string, filterId$eq?: string, filterId$neq?: string, filterId$contains?: string, filterId$startsWith?: string, filterId$nstartsWith?: string, filterId$endsWith?: string, filterId$nendsWith?: string, filterId$in?: Array<string>, filterId$nin?: Array<string>, filterId$null?: boolean, filterId$nnull?: boolean, filterId$empty?: boolean, filterId$nempty?: boolean, filterId$like?: string, filterName$eq?: string, filterName$neq?: string, filterName$contains?: string, filterName$startsWith?: string, filterName$nstartsWith?: string, filterName$endsWith?: string, filterName$nendsWith?: string, filterName$in?: Array<string>, filterName$nin?: Array<string>, filterName$null?: boolean, filterName$nnull?: boolean, filterName$empty?: boolean, filterName$nempty?: boolean, filterName$like?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1ListShowReply>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showServiceListShow(pageOffset, pageSize, search, sort, fields, filterId$eq, filterId$neq, filterId$contains, filterId$startsWith, filterId$nstartsWith, filterId$endsWith, filterId$nendsWith, filterId$in, filterId$nin, filterId$null, filterId$nnull, filterId$empty, filterId$nempty, filterId$like, filterName$eq, filterName$neq, filterName$contains, filterName$startsWith, filterName$nstartsWith, filterName$endsWith, filterName$nendsWith, filterName$in, filterName$nin, filterName$null, filterName$nnull, filterName$empty, filterName$nempty, filterName$like, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {V1ListShowRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showServiceListShow2(body: V1ListShowRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1ListShowReply>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showServiceListShow2(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} showId 
         * @param {V1UpdateShowRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showServiceUpdateShow(showId: string, body: V1UpdateShowRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Show>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showServiceUpdateShow(showId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} showId 
         * @param {V1UpdateShowRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showServiceUpdateShow2(showId: string, body: V1UpdateShowRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Show>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showServiceUpdateShow2(showId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShowServiceApi - factory interface
 * @export
 */
export const ShowServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShowServiceApiFp(configuration)
    return {
        /**
         * 
         * @param {V1CreateShowRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showServiceCreateShow(body: V1CreateShowRequest, options?: any): AxiosPromise<V1Show> {
            return localVarFp.showServiceCreateShow(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showServiceDeleteShow(id: string, options?: any): AxiosPromise<V1DeleteShowReply> {
            return localVarFp.showServiceDeleteShow(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showServiceGetShow(id: string, options?: any): AxiosPromise<V1Show> {
            return localVarFp.showServiceGetShow(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [pageOffset] 
         * @param {number} [pageSize] 
         * @param {string} [search] 
         * @param {Array<string>} [sort] 
         * @param {string} [fields] 
         * @param {string} [filterId$eq] 
         * @param {string} [filterId$neq] 
         * @param {string} [filterId$contains] 
         * @param {string} [filterId$startsWith] 
         * @param {string} [filterId$nstartsWith] 
         * @param {string} [filterId$endsWith] 
         * @param {string} [filterId$nendsWith] 
         * @param {Array<string>} [filterId$in] 
         * @param {Array<string>} [filterId$nin] 
         * @param {boolean} [filterId$null] 
         * @param {boolean} [filterId$nnull] 
         * @param {boolean} [filterId$empty] 
         * @param {boolean} [filterId$nempty] 
         * @param {string} [filterId$like] 
         * @param {string} [filterName$eq] 
         * @param {string} [filterName$neq] 
         * @param {string} [filterName$contains] 
         * @param {string} [filterName$startsWith] 
         * @param {string} [filterName$nstartsWith] 
         * @param {string} [filterName$endsWith] 
         * @param {string} [filterName$nendsWith] 
         * @param {Array<string>} [filterName$in] 
         * @param {Array<string>} [filterName$nin] 
         * @param {boolean} [filterName$null] 
         * @param {boolean} [filterName$nnull] 
         * @param {boolean} [filterName$empty] 
         * @param {boolean} [filterName$nempty] 
         * @param {string} [filterName$like] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showServiceListShow(pageOffset?: number, pageSize?: number, search?: string, sort?: Array<string>, fields?: string, filterId$eq?: string, filterId$neq?: string, filterId$contains?: string, filterId$startsWith?: string, filterId$nstartsWith?: string, filterId$endsWith?: string, filterId$nendsWith?: string, filterId$in?: Array<string>, filterId$nin?: Array<string>, filterId$null?: boolean, filterId$nnull?: boolean, filterId$empty?: boolean, filterId$nempty?: boolean, filterId$like?: string, filterName$eq?: string, filterName$neq?: string, filterName$contains?: string, filterName$startsWith?: string, filterName$nstartsWith?: string, filterName$endsWith?: string, filterName$nendsWith?: string, filterName$in?: Array<string>, filterName$nin?: Array<string>, filterName$null?: boolean, filterName$nnull?: boolean, filterName$empty?: boolean, filterName$nempty?: boolean, filterName$like?: string, options?: any): AxiosPromise<V1ListShowReply> {
            return localVarFp.showServiceListShow(pageOffset, pageSize, search, sort, fields, filterId$eq, filterId$neq, filterId$contains, filterId$startsWith, filterId$nstartsWith, filterId$endsWith, filterId$nendsWith, filterId$in, filterId$nin, filterId$null, filterId$nnull, filterId$empty, filterId$nempty, filterId$like, filterName$eq, filterName$neq, filterName$contains, filterName$startsWith, filterName$nstartsWith, filterName$endsWith, filterName$nendsWith, filterName$in, filterName$nin, filterName$null, filterName$nnull, filterName$empty, filterName$nempty, filterName$like, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {V1ListShowRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showServiceListShow2(body: V1ListShowRequest, options?: any): AxiosPromise<V1ListShowReply> {
            return localVarFp.showServiceListShow2(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} showId 
         * @param {V1UpdateShowRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showServiceUpdateShow(showId: string, body: V1UpdateShowRequest, options?: any): AxiosPromise<V1Show> {
            return localVarFp.showServiceUpdateShow(showId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} showId 
         * @param {V1UpdateShowRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showServiceUpdateShow2(showId: string, body: V1UpdateShowRequest, options?: any): AxiosPromise<V1Show> {
            return localVarFp.showServiceUpdateShow2(showId, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for showServiceCreateShow operation in ShowServiceApi.
 * @export
 * @interface ShowServiceApiShowServiceCreateShowRequest
 */
export interface ShowServiceApiShowServiceCreateShowRequest {
    /**
     * 
     * @type {V1CreateShowRequest}
     * @memberof ShowServiceApiShowServiceCreateShow
     */
    readonly body: V1CreateShowRequest
}

/**
 * Request parameters for showServiceDeleteShow operation in ShowServiceApi.
 * @export
 * @interface ShowServiceApiShowServiceDeleteShowRequest
 */
export interface ShowServiceApiShowServiceDeleteShowRequest {
    /**
     * 
     * @type {string}
     * @memberof ShowServiceApiShowServiceDeleteShow
     */
    readonly id: string
}

/**
 * Request parameters for showServiceGetShow operation in ShowServiceApi.
 * @export
 * @interface ShowServiceApiShowServiceGetShowRequest
 */
export interface ShowServiceApiShowServiceGetShowRequest {
    /**
     * 
     * @type {string}
     * @memberof ShowServiceApiShowServiceGetShow
     */
    readonly id: string
}

/**
 * Request parameters for showServiceListShow operation in ShowServiceApi.
 * @export
 * @interface ShowServiceApiShowServiceListShowRequest
 */
export interface ShowServiceApiShowServiceListShowRequest {
    /**
     * 
     * @type {number}
     * @memberof ShowServiceApiShowServiceListShow
     */
    readonly pageOffset?: number

    /**
     * 
     * @type {number}
     * @memberof ShowServiceApiShowServiceListShow
     */
    readonly pageSize?: number

    /**
     * 
     * @type {string}
     * @memberof ShowServiceApiShowServiceListShow
     */
    readonly search?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof ShowServiceApiShowServiceListShow
     */
    readonly sort?: Array<string>

    /**
     * 
     * @type {string}
     * @memberof ShowServiceApiShowServiceListShow
     */
    readonly fields?: string

    /**
     * 
     * @type {string}
     * @memberof ShowServiceApiShowServiceListShow
     */
    readonly filterId$eq?: string

    /**
     * 
     * @type {string}
     * @memberof ShowServiceApiShowServiceListShow
     */
    readonly filterId$neq?: string

    /**
     * 
     * @type {string}
     * @memberof ShowServiceApiShowServiceListShow
     */
    readonly filterId$contains?: string

    /**
     * 
     * @type {string}
     * @memberof ShowServiceApiShowServiceListShow
     */
    readonly filterId$startsWith?: string

    /**
     * 
     * @type {string}
     * @memberof ShowServiceApiShowServiceListShow
     */
    readonly filterId$nstartsWith?: string

    /**
     * 
     * @type {string}
     * @memberof ShowServiceApiShowServiceListShow
     */
    readonly filterId$endsWith?: string

    /**
     * 
     * @type {string}
     * @memberof ShowServiceApiShowServiceListShow
     */
    readonly filterId$nendsWith?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof ShowServiceApiShowServiceListShow
     */
    readonly filterId$in?: Array<string>

    /**
     * 
     * @type {Array<string>}
     * @memberof ShowServiceApiShowServiceListShow
     */
    readonly filterId$nin?: Array<string>

    /**
     * 
     * @type {boolean}
     * @memberof ShowServiceApiShowServiceListShow
     */
    readonly filterId$null?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof ShowServiceApiShowServiceListShow
     */
    readonly filterId$nnull?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof ShowServiceApiShowServiceListShow
     */
    readonly filterId$empty?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof ShowServiceApiShowServiceListShow
     */
    readonly filterId$nempty?: boolean

    /**
     * 
     * @type {string}
     * @memberof ShowServiceApiShowServiceListShow
     */
    readonly filterId$like?: string

    /**
     * 
     * @type {string}
     * @memberof ShowServiceApiShowServiceListShow
     */
    readonly filterName$eq?: string

    /**
     * 
     * @type {string}
     * @memberof ShowServiceApiShowServiceListShow
     */
    readonly filterName$neq?: string

    /**
     * 
     * @type {string}
     * @memberof ShowServiceApiShowServiceListShow
     */
    readonly filterName$contains?: string

    /**
     * 
     * @type {string}
     * @memberof ShowServiceApiShowServiceListShow
     */
    readonly filterName$startsWith?: string

    /**
     * 
     * @type {string}
     * @memberof ShowServiceApiShowServiceListShow
     */
    readonly filterName$nstartsWith?: string

    /**
     * 
     * @type {string}
     * @memberof ShowServiceApiShowServiceListShow
     */
    readonly filterName$endsWith?: string

    /**
     * 
     * @type {string}
     * @memberof ShowServiceApiShowServiceListShow
     */
    readonly filterName$nendsWith?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof ShowServiceApiShowServiceListShow
     */
    readonly filterName$in?: Array<string>

    /**
     * 
     * @type {Array<string>}
     * @memberof ShowServiceApiShowServiceListShow
     */
    readonly filterName$nin?: Array<string>

    /**
     * 
     * @type {boolean}
     * @memberof ShowServiceApiShowServiceListShow
     */
    readonly filterName$null?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof ShowServiceApiShowServiceListShow
     */
    readonly filterName$nnull?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof ShowServiceApiShowServiceListShow
     */
    readonly filterName$empty?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof ShowServiceApiShowServiceListShow
     */
    readonly filterName$nempty?: boolean

    /**
     * 
     * @type {string}
     * @memberof ShowServiceApiShowServiceListShow
     */
    readonly filterName$like?: string
}

/**
 * Request parameters for showServiceListShow2 operation in ShowServiceApi.
 * @export
 * @interface ShowServiceApiShowServiceListShow2Request
 */
export interface ShowServiceApiShowServiceListShow2Request {
    /**
     * 
     * @type {V1ListShowRequest}
     * @memberof ShowServiceApiShowServiceListShow2
     */
    readonly body: V1ListShowRequest
}

/**
 * Request parameters for showServiceUpdateShow operation in ShowServiceApi.
 * @export
 * @interface ShowServiceApiShowServiceUpdateShowRequest
 */
export interface ShowServiceApiShowServiceUpdateShowRequest {
    /**
     * 
     * @type {string}
     * @memberof ShowServiceApiShowServiceUpdateShow
     */
    readonly showId: string

    /**
     * 
     * @type {V1UpdateShowRequest}
     * @memberof ShowServiceApiShowServiceUpdateShow
     */
    readonly body: V1UpdateShowRequest
}

/**
 * Request parameters for showServiceUpdateShow2 operation in ShowServiceApi.
 * @export
 * @interface ShowServiceApiShowServiceUpdateShow2Request
 */
export interface ShowServiceApiShowServiceUpdateShow2Request {
    /**
     * 
     * @type {string}
     * @memberof ShowServiceApiShowServiceUpdateShow2
     */
    readonly showId: string

    /**
     * 
     * @type {V1UpdateShowRequest}
     * @memberof ShowServiceApiShowServiceUpdateShow2
     */
    readonly body: V1UpdateShowRequest
}

/**
 * ShowServiceApi - object-oriented interface
 * @export
 * @class ShowServiceApi
 * @extends {BaseAPI}
 */
export class ShowServiceApi extends BaseAPI {
    /**
     * 
     * @param {ShowServiceApiShowServiceCreateShowRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowServiceApi
     */
    public showServiceCreateShow(requestParameters: ShowServiceApiShowServiceCreateShowRequest, options?: AxiosRequestConfig) {
        return ShowServiceApiFp(this.configuration).showServiceCreateShow(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ShowServiceApiShowServiceDeleteShowRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowServiceApi
     */
    public showServiceDeleteShow(requestParameters: ShowServiceApiShowServiceDeleteShowRequest, options?: AxiosRequestConfig) {
        return ShowServiceApiFp(this.configuration).showServiceDeleteShow(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ShowServiceApiShowServiceGetShowRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowServiceApi
     */
    public showServiceGetShow(requestParameters: ShowServiceApiShowServiceGetShowRequest, options?: AxiosRequestConfig) {
        return ShowServiceApiFp(this.configuration).showServiceGetShow(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ShowServiceApiShowServiceListShowRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowServiceApi
     */
    public showServiceListShow(requestParameters: ShowServiceApiShowServiceListShowRequest = {}, options?: AxiosRequestConfig) {
        return ShowServiceApiFp(this.configuration).showServiceListShow(requestParameters.pageOffset, requestParameters.pageSize, requestParameters.search, requestParameters.sort, requestParameters.fields, requestParameters.filterId$eq, requestParameters.filterId$neq, requestParameters.filterId$contains, requestParameters.filterId$startsWith, requestParameters.filterId$nstartsWith, requestParameters.filterId$endsWith, requestParameters.filterId$nendsWith, requestParameters.filterId$in, requestParameters.filterId$nin, requestParameters.filterId$null, requestParameters.filterId$nnull, requestParameters.filterId$empty, requestParameters.filterId$nempty, requestParameters.filterId$like, requestParameters.filterName$eq, requestParameters.filterName$neq, requestParameters.filterName$contains, requestParameters.filterName$startsWith, requestParameters.filterName$nstartsWith, requestParameters.filterName$endsWith, requestParameters.filterName$nendsWith, requestParameters.filterName$in, requestParameters.filterName$nin, requestParameters.filterName$null, requestParameters.filterName$nnull, requestParameters.filterName$empty, requestParameters.filterName$nempty, requestParameters.filterName$like, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ShowServiceApiShowServiceListShow2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowServiceApi
     */
    public showServiceListShow2(requestParameters: ShowServiceApiShowServiceListShow2Request, options?: AxiosRequestConfig) {
        return ShowServiceApiFp(this.configuration).showServiceListShow2(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ShowServiceApiShowServiceUpdateShowRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowServiceApi
     */
    public showServiceUpdateShow(requestParameters: ShowServiceApiShowServiceUpdateShowRequest, options?: AxiosRequestConfig) {
        return ShowServiceApiFp(this.configuration).showServiceUpdateShow(requestParameters.showId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ShowServiceApiShowServiceUpdateShow2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowServiceApi
     */
    public showServiceUpdateShow2(requestParameters: ShowServiceApiShowServiceUpdateShow2Request, options?: AxiosRequestConfig) {
        return ShowServiceApiFp(this.configuration).showServiceUpdateShow2(requestParameters.showId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}
