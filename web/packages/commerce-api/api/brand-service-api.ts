/* tslint:disable */
/* eslint-disable */
/**
 * order/api/order/v1/order.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GooglerpcStatus } from '../models';
// @ts-ignore
import { V1Brand } from '../models';
// @ts-ignore
import { V1CreateBrandRequest } from '../models';
// @ts-ignore
import { V1DeleteBrandReply } from '../models';
// @ts-ignore
import { V1ListBrandReply } from '../models';
// @ts-ignore
import { V1ListBrandRequest } from '../models';
// @ts-ignore
import { V1UpdateBrandRequest } from '../models';
/**
 * BrandServiceApi - axios parameter creator
 * @export
 */
export const BrandServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {V1CreateBrandRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        brandServiceCreateBrand: async (body: V1CreateBrandRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('brandServiceCreateBrand', 'body', body)
            const localVarPath = `/v1/product/brand`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        brandServiceDeleteBrand: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('brandServiceDeleteBrand', 'id', id)
            const localVarPath = `/v1/product/brand/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        brandServiceGetBrand: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('brandServiceGetBrand', 'id', id)
            const localVarPath = `/v1/product/brand/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [pageOffset] 
         * @param {number} [pageSize] 
         * @param {string} [search] 
         * @param {Array<string>} [sort] 
         * @param {string} [fields] 
         * @param {string} [filterId$eq] 
         * @param {string} [filterId$neq] 
         * @param {string} [filterId$contains] 
         * @param {string} [filterId$startsWith] 
         * @param {string} [filterId$nstartsWith] 
         * @param {string} [filterId$endsWith] 
         * @param {string} [filterId$nendsWith] 
         * @param {Array<string>} [filterId$in] 
         * @param {Array<string>} [filterId$nin] 
         * @param {boolean} [filterId$null] 
         * @param {boolean} [filterId$nnull] 
         * @param {boolean} [filterId$empty] 
         * @param {boolean} [filterId$nempty] 
         * @param {string} [filterId$like] 
         * @param {string} [filterCode$eq] 
         * @param {string} [filterCode$neq] 
         * @param {string} [filterCode$contains] 
         * @param {string} [filterCode$startsWith] 
         * @param {string} [filterCode$nstartsWith] 
         * @param {string} [filterCode$endsWith] 
         * @param {string} [filterCode$nendsWith] 
         * @param {Array<string>} [filterCode$in] 
         * @param {Array<string>} [filterCode$nin] 
         * @param {boolean} [filterCode$null] 
         * @param {boolean} [filterCode$nnull] 
         * @param {boolean} [filterCode$empty] 
         * @param {boolean} [filterCode$nempty] 
         * @param {string} [filterCode$like] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        brandServiceListBrand: async (pageOffset?: number, pageSize?: number, search?: string, sort?: Array<string>, fields?: string, filterId$eq?: string, filterId$neq?: string, filterId$contains?: string, filterId$startsWith?: string, filterId$nstartsWith?: string, filterId$endsWith?: string, filterId$nendsWith?: string, filterId$in?: Array<string>, filterId$nin?: Array<string>, filterId$null?: boolean, filterId$nnull?: boolean, filterId$empty?: boolean, filterId$nempty?: boolean, filterId$like?: string, filterCode$eq?: string, filterCode$neq?: string, filterCode$contains?: string, filterCode$startsWith?: string, filterCode$nstartsWith?: string, filterCode$endsWith?: string, filterCode$nendsWith?: string, filterCode$in?: Array<string>, filterCode$nin?: Array<string>, filterCode$null?: boolean, filterCode$nnull?: boolean, filterCode$empty?: boolean, filterCode$nempty?: boolean, filterCode$like?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/product/brands`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (pageOffset !== undefined) {
                localVarQueryParameter['pageOffset'] = pageOffset;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (filterId$eq !== undefined) {
                localVarQueryParameter['filter.id.$eq'] = filterId$eq;
            }

            if (filterId$neq !== undefined) {
                localVarQueryParameter['filter.id.$neq'] = filterId$neq;
            }

            if (filterId$contains !== undefined) {
                localVarQueryParameter['filter.id.$contains'] = filterId$contains;
            }

            if (filterId$startsWith !== undefined) {
                localVarQueryParameter['filter.id.$starts_with'] = filterId$startsWith;
            }

            if (filterId$nstartsWith !== undefined) {
                localVarQueryParameter['filter.id.$nstarts_with'] = filterId$nstartsWith;
            }

            if (filterId$endsWith !== undefined) {
                localVarQueryParameter['filter.id.$ends_with'] = filterId$endsWith;
            }

            if (filterId$nendsWith !== undefined) {
                localVarQueryParameter['filter.id.$nends_with'] = filterId$nendsWith;
            }

            if (filterId$in) {
                localVarQueryParameter['filter.id.$in'] = filterId$in;
            }

            if (filterId$nin) {
                localVarQueryParameter['filter.id.$nin'] = filterId$nin;
            }

            if (filterId$null !== undefined) {
                localVarQueryParameter['filter.id.$null'] = filterId$null;
            }

            if (filterId$nnull !== undefined) {
                localVarQueryParameter['filter.id.$nnull'] = filterId$nnull;
            }

            if (filterId$empty !== undefined) {
                localVarQueryParameter['filter.id.$empty'] = filterId$empty;
            }

            if (filterId$nempty !== undefined) {
                localVarQueryParameter['filter.id.$nempty'] = filterId$nempty;
            }

            if (filterId$like !== undefined) {
                localVarQueryParameter['filter.id.$like'] = filterId$like;
            }

            if (filterCode$eq !== undefined) {
                localVarQueryParameter['filter.code.$eq'] = filterCode$eq;
            }

            if (filterCode$neq !== undefined) {
                localVarQueryParameter['filter.code.$neq'] = filterCode$neq;
            }

            if (filterCode$contains !== undefined) {
                localVarQueryParameter['filter.code.$contains'] = filterCode$contains;
            }

            if (filterCode$startsWith !== undefined) {
                localVarQueryParameter['filter.code.$starts_with'] = filterCode$startsWith;
            }

            if (filterCode$nstartsWith !== undefined) {
                localVarQueryParameter['filter.code.$nstarts_with'] = filterCode$nstartsWith;
            }

            if (filterCode$endsWith !== undefined) {
                localVarQueryParameter['filter.code.$ends_with'] = filterCode$endsWith;
            }

            if (filterCode$nendsWith !== undefined) {
                localVarQueryParameter['filter.code.$nends_with'] = filterCode$nendsWith;
            }

            if (filterCode$in) {
                localVarQueryParameter['filter.code.$in'] = filterCode$in;
            }

            if (filterCode$nin) {
                localVarQueryParameter['filter.code.$nin'] = filterCode$nin;
            }

            if (filterCode$null !== undefined) {
                localVarQueryParameter['filter.code.$null'] = filterCode$null;
            }

            if (filterCode$nnull !== undefined) {
                localVarQueryParameter['filter.code.$nnull'] = filterCode$nnull;
            }

            if (filterCode$empty !== undefined) {
                localVarQueryParameter['filter.code.$empty'] = filterCode$empty;
            }

            if (filterCode$nempty !== undefined) {
                localVarQueryParameter['filter.code.$nempty'] = filterCode$nempty;
            }

            if (filterCode$like !== undefined) {
                localVarQueryParameter['filter.code.$like'] = filterCode$like;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {V1ListBrandRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        brandServiceListBrand2: async (body: V1ListBrandRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('brandServiceListBrand2', 'body', body)
            const localVarPath = `/v1/product/brand/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} brandId 
         * @param {V1UpdateBrandRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        brandServiceUpdateBrand: async (brandId: string, body: V1UpdateBrandRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('brandServiceUpdateBrand', 'brandId', brandId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('brandServiceUpdateBrand', 'body', body)
            const localVarPath = `/v1/product/brand/{brand.id}`
                .replace(`{${"brand.id"}}`, encodeURIComponent(String(brandId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} brandId 
         * @param {V1UpdateBrandRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        brandServiceUpdateBrand2: async (brandId: string, body: V1UpdateBrandRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brandId' is not null or undefined
            assertParamExists('brandServiceUpdateBrand2', 'brandId', brandId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('brandServiceUpdateBrand2', 'body', body)
            const localVarPath = `/v1/product/brand/{brand.id}`
                .replace(`{${"brand.id"}}`, encodeURIComponent(String(brandId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BrandServiceApi - functional programming interface
 * @export
 */
export const BrandServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BrandServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {V1CreateBrandRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async brandServiceCreateBrand(body: V1CreateBrandRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Brand>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.brandServiceCreateBrand(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async brandServiceDeleteBrand(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1DeleteBrandReply>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.brandServiceDeleteBrand(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async brandServiceGetBrand(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Brand>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.brandServiceGetBrand(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [pageOffset] 
         * @param {number} [pageSize] 
         * @param {string} [search] 
         * @param {Array<string>} [sort] 
         * @param {string} [fields] 
         * @param {string} [filterId$eq] 
         * @param {string} [filterId$neq] 
         * @param {string} [filterId$contains] 
         * @param {string} [filterId$startsWith] 
         * @param {string} [filterId$nstartsWith] 
         * @param {string} [filterId$endsWith] 
         * @param {string} [filterId$nendsWith] 
         * @param {Array<string>} [filterId$in] 
         * @param {Array<string>} [filterId$nin] 
         * @param {boolean} [filterId$null] 
         * @param {boolean} [filterId$nnull] 
         * @param {boolean} [filterId$empty] 
         * @param {boolean} [filterId$nempty] 
         * @param {string} [filterId$like] 
         * @param {string} [filterCode$eq] 
         * @param {string} [filterCode$neq] 
         * @param {string} [filterCode$contains] 
         * @param {string} [filterCode$startsWith] 
         * @param {string} [filterCode$nstartsWith] 
         * @param {string} [filterCode$endsWith] 
         * @param {string} [filterCode$nendsWith] 
         * @param {Array<string>} [filterCode$in] 
         * @param {Array<string>} [filterCode$nin] 
         * @param {boolean} [filterCode$null] 
         * @param {boolean} [filterCode$nnull] 
         * @param {boolean} [filterCode$empty] 
         * @param {boolean} [filterCode$nempty] 
         * @param {string} [filterCode$like] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async brandServiceListBrand(pageOffset?: number, pageSize?: number, search?: string, sort?: Array<string>, fields?: string, filterId$eq?: string, filterId$neq?: string, filterId$contains?: string, filterId$startsWith?: string, filterId$nstartsWith?: string, filterId$endsWith?: string, filterId$nendsWith?: string, filterId$in?: Array<string>, filterId$nin?: Array<string>, filterId$null?: boolean, filterId$nnull?: boolean, filterId$empty?: boolean, filterId$nempty?: boolean, filterId$like?: string, filterCode$eq?: string, filterCode$neq?: string, filterCode$contains?: string, filterCode$startsWith?: string, filterCode$nstartsWith?: string, filterCode$endsWith?: string, filterCode$nendsWith?: string, filterCode$in?: Array<string>, filterCode$nin?: Array<string>, filterCode$null?: boolean, filterCode$nnull?: boolean, filterCode$empty?: boolean, filterCode$nempty?: boolean, filterCode$like?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1ListBrandReply>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.brandServiceListBrand(pageOffset, pageSize, search, sort, fields, filterId$eq, filterId$neq, filterId$contains, filterId$startsWith, filterId$nstartsWith, filterId$endsWith, filterId$nendsWith, filterId$in, filterId$nin, filterId$null, filterId$nnull, filterId$empty, filterId$nempty, filterId$like, filterCode$eq, filterCode$neq, filterCode$contains, filterCode$startsWith, filterCode$nstartsWith, filterCode$endsWith, filterCode$nendsWith, filterCode$in, filterCode$nin, filterCode$null, filterCode$nnull, filterCode$empty, filterCode$nempty, filterCode$like, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {V1ListBrandRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async brandServiceListBrand2(body: V1ListBrandRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1ListBrandReply>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.brandServiceListBrand2(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} brandId 
         * @param {V1UpdateBrandRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async brandServiceUpdateBrand(brandId: string, body: V1UpdateBrandRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Brand>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.brandServiceUpdateBrand(brandId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} brandId 
         * @param {V1UpdateBrandRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async brandServiceUpdateBrand2(brandId: string, body: V1UpdateBrandRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Brand>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.brandServiceUpdateBrand2(brandId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BrandServiceApi - factory interface
 * @export
 */
export const BrandServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BrandServiceApiFp(configuration)
    return {
        /**
         * 
         * @param {V1CreateBrandRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        brandServiceCreateBrand(body: V1CreateBrandRequest, options?: any): AxiosPromise<V1Brand> {
            return localVarFp.brandServiceCreateBrand(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        brandServiceDeleteBrand(id: string, options?: any): AxiosPromise<V1DeleteBrandReply> {
            return localVarFp.brandServiceDeleteBrand(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        brandServiceGetBrand(id: string, options?: any): AxiosPromise<V1Brand> {
            return localVarFp.brandServiceGetBrand(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [pageOffset] 
         * @param {number} [pageSize] 
         * @param {string} [search] 
         * @param {Array<string>} [sort] 
         * @param {string} [fields] 
         * @param {string} [filterId$eq] 
         * @param {string} [filterId$neq] 
         * @param {string} [filterId$contains] 
         * @param {string} [filterId$startsWith] 
         * @param {string} [filterId$nstartsWith] 
         * @param {string} [filterId$endsWith] 
         * @param {string} [filterId$nendsWith] 
         * @param {Array<string>} [filterId$in] 
         * @param {Array<string>} [filterId$nin] 
         * @param {boolean} [filterId$null] 
         * @param {boolean} [filterId$nnull] 
         * @param {boolean} [filterId$empty] 
         * @param {boolean} [filterId$nempty] 
         * @param {string} [filterId$like] 
         * @param {string} [filterCode$eq] 
         * @param {string} [filterCode$neq] 
         * @param {string} [filterCode$contains] 
         * @param {string} [filterCode$startsWith] 
         * @param {string} [filterCode$nstartsWith] 
         * @param {string} [filterCode$endsWith] 
         * @param {string} [filterCode$nendsWith] 
         * @param {Array<string>} [filterCode$in] 
         * @param {Array<string>} [filterCode$nin] 
         * @param {boolean} [filterCode$null] 
         * @param {boolean} [filterCode$nnull] 
         * @param {boolean} [filterCode$empty] 
         * @param {boolean} [filterCode$nempty] 
         * @param {string} [filterCode$like] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        brandServiceListBrand(pageOffset?: number, pageSize?: number, search?: string, sort?: Array<string>, fields?: string, filterId$eq?: string, filterId$neq?: string, filterId$contains?: string, filterId$startsWith?: string, filterId$nstartsWith?: string, filterId$endsWith?: string, filterId$nendsWith?: string, filterId$in?: Array<string>, filterId$nin?: Array<string>, filterId$null?: boolean, filterId$nnull?: boolean, filterId$empty?: boolean, filterId$nempty?: boolean, filterId$like?: string, filterCode$eq?: string, filterCode$neq?: string, filterCode$contains?: string, filterCode$startsWith?: string, filterCode$nstartsWith?: string, filterCode$endsWith?: string, filterCode$nendsWith?: string, filterCode$in?: Array<string>, filterCode$nin?: Array<string>, filterCode$null?: boolean, filterCode$nnull?: boolean, filterCode$empty?: boolean, filterCode$nempty?: boolean, filterCode$like?: string, options?: any): AxiosPromise<V1ListBrandReply> {
            return localVarFp.brandServiceListBrand(pageOffset, pageSize, search, sort, fields, filterId$eq, filterId$neq, filterId$contains, filterId$startsWith, filterId$nstartsWith, filterId$endsWith, filterId$nendsWith, filterId$in, filterId$nin, filterId$null, filterId$nnull, filterId$empty, filterId$nempty, filterId$like, filterCode$eq, filterCode$neq, filterCode$contains, filterCode$startsWith, filterCode$nstartsWith, filterCode$endsWith, filterCode$nendsWith, filterCode$in, filterCode$nin, filterCode$null, filterCode$nnull, filterCode$empty, filterCode$nempty, filterCode$like, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {V1ListBrandRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        brandServiceListBrand2(body: V1ListBrandRequest, options?: any): AxiosPromise<V1ListBrandReply> {
            return localVarFp.brandServiceListBrand2(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} brandId 
         * @param {V1UpdateBrandRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        brandServiceUpdateBrand(brandId: string, body: V1UpdateBrandRequest, options?: any): AxiosPromise<V1Brand> {
            return localVarFp.brandServiceUpdateBrand(brandId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} brandId 
         * @param {V1UpdateBrandRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        brandServiceUpdateBrand2(brandId: string, body: V1UpdateBrandRequest, options?: any): AxiosPromise<V1Brand> {
            return localVarFp.brandServiceUpdateBrand2(brandId, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for brandServiceCreateBrand operation in BrandServiceApi.
 * @export
 * @interface BrandServiceApiBrandServiceCreateBrandRequest
 */
export interface BrandServiceApiBrandServiceCreateBrandRequest {
    /**
     * 
     * @type {V1CreateBrandRequest}
     * @memberof BrandServiceApiBrandServiceCreateBrand
     */
    readonly body: V1CreateBrandRequest
}

/**
 * Request parameters for brandServiceDeleteBrand operation in BrandServiceApi.
 * @export
 * @interface BrandServiceApiBrandServiceDeleteBrandRequest
 */
export interface BrandServiceApiBrandServiceDeleteBrandRequest {
    /**
     * 
     * @type {string}
     * @memberof BrandServiceApiBrandServiceDeleteBrand
     */
    readonly id: string
}

/**
 * Request parameters for brandServiceGetBrand operation in BrandServiceApi.
 * @export
 * @interface BrandServiceApiBrandServiceGetBrandRequest
 */
export interface BrandServiceApiBrandServiceGetBrandRequest {
    /**
     * 
     * @type {string}
     * @memberof BrandServiceApiBrandServiceGetBrand
     */
    readonly id: string
}

/**
 * Request parameters for brandServiceListBrand operation in BrandServiceApi.
 * @export
 * @interface BrandServiceApiBrandServiceListBrandRequest
 */
export interface BrandServiceApiBrandServiceListBrandRequest {
    /**
     * 
     * @type {number}
     * @memberof BrandServiceApiBrandServiceListBrand
     */
    readonly pageOffset?: number

    /**
     * 
     * @type {number}
     * @memberof BrandServiceApiBrandServiceListBrand
     */
    readonly pageSize?: number

    /**
     * 
     * @type {string}
     * @memberof BrandServiceApiBrandServiceListBrand
     */
    readonly search?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof BrandServiceApiBrandServiceListBrand
     */
    readonly sort?: Array<string>

    /**
     * 
     * @type {string}
     * @memberof BrandServiceApiBrandServiceListBrand
     */
    readonly fields?: string

    /**
     * 
     * @type {string}
     * @memberof BrandServiceApiBrandServiceListBrand
     */
    readonly filterId$eq?: string

    /**
     * 
     * @type {string}
     * @memberof BrandServiceApiBrandServiceListBrand
     */
    readonly filterId$neq?: string

    /**
     * 
     * @type {string}
     * @memberof BrandServiceApiBrandServiceListBrand
     */
    readonly filterId$contains?: string

    /**
     * 
     * @type {string}
     * @memberof BrandServiceApiBrandServiceListBrand
     */
    readonly filterId$startsWith?: string

    /**
     * 
     * @type {string}
     * @memberof BrandServiceApiBrandServiceListBrand
     */
    readonly filterId$nstartsWith?: string

    /**
     * 
     * @type {string}
     * @memberof BrandServiceApiBrandServiceListBrand
     */
    readonly filterId$endsWith?: string

    /**
     * 
     * @type {string}
     * @memberof BrandServiceApiBrandServiceListBrand
     */
    readonly filterId$nendsWith?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof BrandServiceApiBrandServiceListBrand
     */
    readonly filterId$in?: Array<string>

    /**
     * 
     * @type {Array<string>}
     * @memberof BrandServiceApiBrandServiceListBrand
     */
    readonly filterId$nin?: Array<string>

    /**
     * 
     * @type {boolean}
     * @memberof BrandServiceApiBrandServiceListBrand
     */
    readonly filterId$null?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof BrandServiceApiBrandServiceListBrand
     */
    readonly filterId$nnull?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof BrandServiceApiBrandServiceListBrand
     */
    readonly filterId$empty?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof BrandServiceApiBrandServiceListBrand
     */
    readonly filterId$nempty?: boolean

    /**
     * 
     * @type {string}
     * @memberof BrandServiceApiBrandServiceListBrand
     */
    readonly filterId$like?: string

    /**
     * 
     * @type {string}
     * @memberof BrandServiceApiBrandServiceListBrand
     */
    readonly filterCode$eq?: string

    /**
     * 
     * @type {string}
     * @memberof BrandServiceApiBrandServiceListBrand
     */
    readonly filterCode$neq?: string

    /**
     * 
     * @type {string}
     * @memberof BrandServiceApiBrandServiceListBrand
     */
    readonly filterCode$contains?: string

    /**
     * 
     * @type {string}
     * @memberof BrandServiceApiBrandServiceListBrand
     */
    readonly filterCode$startsWith?: string

    /**
     * 
     * @type {string}
     * @memberof BrandServiceApiBrandServiceListBrand
     */
    readonly filterCode$nstartsWith?: string

    /**
     * 
     * @type {string}
     * @memberof BrandServiceApiBrandServiceListBrand
     */
    readonly filterCode$endsWith?: string

    /**
     * 
     * @type {string}
     * @memberof BrandServiceApiBrandServiceListBrand
     */
    readonly filterCode$nendsWith?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof BrandServiceApiBrandServiceListBrand
     */
    readonly filterCode$in?: Array<string>

    /**
     * 
     * @type {Array<string>}
     * @memberof BrandServiceApiBrandServiceListBrand
     */
    readonly filterCode$nin?: Array<string>

    /**
     * 
     * @type {boolean}
     * @memberof BrandServiceApiBrandServiceListBrand
     */
    readonly filterCode$null?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof BrandServiceApiBrandServiceListBrand
     */
    readonly filterCode$nnull?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof BrandServiceApiBrandServiceListBrand
     */
    readonly filterCode$empty?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof BrandServiceApiBrandServiceListBrand
     */
    readonly filterCode$nempty?: boolean

    /**
     * 
     * @type {string}
     * @memberof BrandServiceApiBrandServiceListBrand
     */
    readonly filterCode$like?: string
}

/**
 * Request parameters for brandServiceListBrand2 operation in BrandServiceApi.
 * @export
 * @interface BrandServiceApiBrandServiceListBrand2Request
 */
export interface BrandServiceApiBrandServiceListBrand2Request {
    /**
     * 
     * @type {V1ListBrandRequest}
     * @memberof BrandServiceApiBrandServiceListBrand2
     */
    readonly body: V1ListBrandRequest
}

/**
 * Request parameters for brandServiceUpdateBrand operation in BrandServiceApi.
 * @export
 * @interface BrandServiceApiBrandServiceUpdateBrandRequest
 */
export interface BrandServiceApiBrandServiceUpdateBrandRequest {
    /**
     * 
     * @type {string}
     * @memberof BrandServiceApiBrandServiceUpdateBrand
     */
    readonly brandId: string

    /**
     * 
     * @type {V1UpdateBrandRequest}
     * @memberof BrandServiceApiBrandServiceUpdateBrand
     */
    readonly body: V1UpdateBrandRequest
}

/**
 * Request parameters for brandServiceUpdateBrand2 operation in BrandServiceApi.
 * @export
 * @interface BrandServiceApiBrandServiceUpdateBrand2Request
 */
export interface BrandServiceApiBrandServiceUpdateBrand2Request {
    /**
     * 
     * @type {string}
     * @memberof BrandServiceApiBrandServiceUpdateBrand2
     */
    readonly brandId: string

    /**
     * 
     * @type {V1UpdateBrandRequest}
     * @memberof BrandServiceApiBrandServiceUpdateBrand2
     */
    readonly body: V1UpdateBrandRequest
}

/**
 * BrandServiceApi - object-oriented interface
 * @export
 * @class BrandServiceApi
 * @extends {BaseAPI}
 */
export class BrandServiceApi extends BaseAPI {
    /**
     * 
     * @param {BrandServiceApiBrandServiceCreateBrandRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrandServiceApi
     */
    public brandServiceCreateBrand(requestParameters: BrandServiceApiBrandServiceCreateBrandRequest, options?: AxiosRequestConfig) {
        return BrandServiceApiFp(this.configuration).brandServiceCreateBrand(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BrandServiceApiBrandServiceDeleteBrandRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrandServiceApi
     */
    public brandServiceDeleteBrand(requestParameters: BrandServiceApiBrandServiceDeleteBrandRequest, options?: AxiosRequestConfig) {
        return BrandServiceApiFp(this.configuration).brandServiceDeleteBrand(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BrandServiceApiBrandServiceGetBrandRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrandServiceApi
     */
    public brandServiceGetBrand(requestParameters: BrandServiceApiBrandServiceGetBrandRequest, options?: AxiosRequestConfig) {
        return BrandServiceApiFp(this.configuration).brandServiceGetBrand(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BrandServiceApiBrandServiceListBrandRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrandServiceApi
     */
    public brandServiceListBrand(requestParameters: BrandServiceApiBrandServiceListBrandRequest = {}, options?: AxiosRequestConfig) {
        return BrandServiceApiFp(this.configuration).brandServiceListBrand(requestParameters.pageOffset, requestParameters.pageSize, requestParameters.search, requestParameters.sort, requestParameters.fields, requestParameters.filterId$eq, requestParameters.filterId$neq, requestParameters.filterId$contains, requestParameters.filterId$startsWith, requestParameters.filterId$nstartsWith, requestParameters.filterId$endsWith, requestParameters.filterId$nendsWith, requestParameters.filterId$in, requestParameters.filterId$nin, requestParameters.filterId$null, requestParameters.filterId$nnull, requestParameters.filterId$empty, requestParameters.filterId$nempty, requestParameters.filterId$like, requestParameters.filterCode$eq, requestParameters.filterCode$neq, requestParameters.filterCode$contains, requestParameters.filterCode$startsWith, requestParameters.filterCode$nstartsWith, requestParameters.filterCode$endsWith, requestParameters.filterCode$nendsWith, requestParameters.filterCode$in, requestParameters.filterCode$nin, requestParameters.filterCode$null, requestParameters.filterCode$nnull, requestParameters.filterCode$empty, requestParameters.filterCode$nempty, requestParameters.filterCode$like, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BrandServiceApiBrandServiceListBrand2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrandServiceApi
     */
    public brandServiceListBrand2(requestParameters: BrandServiceApiBrandServiceListBrand2Request, options?: AxiosRequestConfig) {
        return BrandServiceApiFp(this.configuration).brandServiceListBrand2(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BrandServiceApiBrandServiceUpdateBrandRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrandServiceApi
     */
    public brandServiceUpdateBrand(requestParameters: BrandServiceApiBrandServiceUpdateBrandRequest, options?: AxiosRequestConfig) {
        return BrandServiceApiFp(this.configuration).brandServiceUpdateBrand(requestParameters.brandId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BrandServiceApiBrandServiceUpdateBrand2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BrandServiceApi
     */
    public brandServiceUpdateBrand2(requestParameters: BrandServiceApiBrandServiceUpdateBrand2Request, options?: AxiosRequestConfig) {
        return BrandServiceApiFp(this.configuration).brandServiceUpdateBrand2(requestParameters.brandId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}
