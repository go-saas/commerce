/* tslint:disable */
/* eslint-disable */
/**
 * order/api/order/v1/order.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GooglerpcStatus } from '../models';
// @ts-ignore
import { LocationServiceCreateLocationHallRequest } from '../models';
// @ts-ignore
import { Locationv1Location } from '../models';
// @ts-ignore
import { V1CreateLocationRequest } from '../models';
// @ts-ignore
import { V1DeleteLocationHallReply } from '../models';
// @ts-ignore
import { V1DeleteLocationReply } from '../models';
// @ts-ignore
import { V1GetLocationHallsReply } from '../models';
// @ts-ignore
import { V1ListLocationReply } from '../models';
// @ts-ignore
import { V1ListLocationRequest } from '../models';
// @ts-ignore
import { V1UpdateLocationRequest } from '../models';
/**
 * LocationServiceApi - axios parameter creator
 * @export
 */
export const LocationServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {V1CreateLocationRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationServiceCreateLocation: async (body: V1CreateLocationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('locationServiceCreateLocation', 'body', body)
            const localVarPath = `/v1/ticketing/location`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {LocationServiceCreateLocationHallRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationServiceCreateLocationHall: async (id: string, body: LocationServiceCreateLocationHallRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('locationServiceCreateLocationHall', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('locationServiceCreateLocationHall', 'body', body)
            const localVarPath = `/v1/ticketing/location/{id}/hall`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationServiceDeleteLocation: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('locationServiceDeleteLocation', 'id', id)
            const localVarPath = `/v1/ticketing/location/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} hallId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationServiceDeleteLocationHall: async (id: string, hallId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('locationServiceDeleteLocationHall', 'id', id)
            // verify required parameter 'hallId' is not null or undefined
            assertParamExists('locationServiceDeleteLocationHall', 'hallId', hallId)
            const localVarPath = `/v1/ticketing/location/{id}/hall/{hallId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"hallId"}}`, encodeURIComponent(String(hallId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationServiceGetLocation: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('locationServiceGetLocation', 'id', id)
            const localVarPath = `/v1/ticketing/location/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationServiceGetLocationHalls: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('locationServiceGetLocationHalls', 'id', id)
            const localVarPath = `/v1/ticketing/location/{id}/hall`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationServiceGetLocationHalls2: async (id: string, body: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('locationServiceGetLocationHalls2', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('locationServiceGetLocationHalls2', 'body', body)
            const localVarPath = `/v1/ticketing/location/{id}/hall/list`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [pageOffset] 
         * @param {number} [pageSize] 
         * @param {string} [search] 
         * @param {Array<string>} [sort] 
         * @param {string} [fields] 
         * @param {string} [filterId$eq] 
         * @param {string} [filterId$neq] 
         * @param {string} [filterId$contains] 
         * @param {string} [filterId$startsWith] 
         * @param {string} [filterId$nstartsWith] 
         * @param {string} [filterId$endsWith] 
         * @param {string} [filterId$nendsWith] 
         * @param {Array<string>} [filterId$in] 
         * @param {Array<string>} [filterId$nin] 
         * @param {boolean} [filterId$null] 
         * @param {boolean} [filterId$nnull] 
         * @param {boolean} [filterId$empty] 
         * @param {boolean} [filterId$nempty] 
         * @param {string} [filterId$like] 
         * @param {string} [filterName$eq] 
         * @param {string} [filterName$neq] 
         * @param {string} [filterName$contains] 
         * @param {string} [filterName$startsWith] 
         * @param {string} [filterName$nstartsWith] 
         * @param {string} [filterName$endsWith] 
         * @param {string} [filterName$nendsWith] 
         * @param {Array<string>} [filterName$in] 
         * @param {Array<string>} [filterName$nin] 
         * @param {boolean} [filterName$null] 
         * @param {boolean} [filterName$nnull] 
         * @param {boolean} [filterName$empty] 
         * @param {boolean} [filterName$nempty] 
         * @param {string} [filterName$like] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationServiceListLocation: async (pageOffset?: number, pageSize?: number, search?: string, sort?: Array<string>, fields?: string, filterId$eq?: string, filterId$neq?: string, filterId$contains?: string, filterId$startsWith?: string, filterId$nstartsWith?: string, filterId$endsWith?: string, filterId$nendsWith?: string, filterId$in?: Array<string>, filterId$nin?: Array<string>, filterId$null?: boolean, filterId$nnull?: boolean, filterId$empty?: boolean, filterId$nempty?: boolean, filterId$like?: string, filterName$eq?: string, filterName$neq?: string, filterName$contains?: string, filterName$startsWith?: string, filterName$nstartsWith?: string, filterName$endsWith?: string, filterName$nendsWith?: string, filterName$in?: Array<string>, filterName$nin?: Array<string>, filterName$null?: boolean, filterName$nnull?: boolean, filterName$empty?: boolean, filterName$nempty?: boolean, filterName$like?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/ticketing/location`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (pageOffset !== undefined) {
                localVarQueryParameter['pageOffset'] = pageOffset;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (filterId$eq !== undefined) {
                localVarQueryParameter['filter.id.$eq'] = filterId$eq;
            }

            if (filterId$neq !== undefined) {
                localVarQueryParameter['filter.id.$neq'] = filterId$neq;
            }

            if (filterId$contains !== undefined) {
                localVarQueryParameter['filter.id.$contains'] = filterId$contains;
            }

            if (filterId$startsWith !== undefined) {
                localVarQueryParameter['filter.id.$starts_with'] = filterId$startsWith;
            }

            if (filterId$nstartsWith !== undefined) {
                localVarQueryParameter['filter.id.$nstarts_with'] = filterId$nstartsWith;
            }

            if (filterId$endsWith !== undefined) {
                localVarQueryParameter['filter.id.$ends_with'] = filterId$endsWith;
            }

            if (filterId$nendsWith !== undefined) {
                localVarQueryParameter['filter.id.$nends_with'] = filterId$nendsWith;
            }

            if (filterId$in) {
                localVarQueryParameter['filter.id.$in'] = filterId$in;
            }

            if (filterId$nin) {
                localVarQueryParameter['filter.id.$nin'] = filterId$nin;
            }

            if (filterId$null !== undefined) {
                localVarQueryParameter['filter.id.$null'] = filterId$null;
            }

            if (filterId$nnull !== undefined) {
                localVarQueryParameter['filter.id.$nnull'] = filterId$nnull;
            }

            if (filterId$empty !== undefined) {
                localVarQueryParameter['filter.id.$empty'] = filterId$empty;
            }

            if (filterId$nempty !== undefined) {
                localVarQueryParameter['filter.id.$nempty'] = filterId$nempty;
            }

            if (filterId$like !== undefined) {
                localVarQueryParameter['filter.id.$like'] = filterId$like;
            }

            if (filterName$eq !== undefined) {
                localVarQueryParameter['filter.name.$eq'] = filterName$eq;
            }

            if (filterName$neq !== undefined) {
                localVarQueryParameter['filter.name.$neq'] = filterName$neq;
            }

            if (filterName$contains !== undefined) {
                localVarQueryParameter['filter.name.$contains'] = filterName$contains;
            }

            if (filterName$startsWith !== undefined) {
                localVarQueryParameter['filter.name.$starts_with'] = filterName$startsWith;
            }

            if (filterName$nstartsWith !== undefined) {
                localVarQueryParameter['filter.name.$nstarts_with'] = filterName$nstartsWith;
            }

            if (filterName$endsWith !== undefined) {
                localVarQueryParameter['filter.name.$ends_with'] = filterName$endsWith;
            }

            if (filterName$nendsWith !== undefined) {
                localVarQueryParameter['filter.name.$nends_with'] = filterName$nendsWith;
            }

            if (filterName$in) {
                localVarQueryParameter['filter.name.$in'] = filterName$in;
            }

            if (filterName$nin) {
                localVarQueryParameter['filter.name.$nin'] = filterName$nin;
            }

            if (filterName$null !== undefined) {
                localVarQueryParameter['filter.name.$null'] = filterName$null;
            }

            if (filterName$nnull !== undefined) {
                localVarQueryParameter['filter.name.$nnull'] = filterName$nnull;
            }

            if (filterName$empty !== undefined) {
                localVarQueryParameter['filter.name.$empty'] = filterName$empty;
            }

            if (filterName$nempty !== undefined) {
                localVarQueryParameter['filter.name.$nempty'] = filterName$nempty;
            }

            if (filterName$like !== undefined) {
                localVarQueryParameter['filter.name.$like'] = filterName$like;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {V1ListLocationRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationServiceListLocation2: async (body: V1ListLocationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('locationServiceListLocation2', 'body', body)
            const localVarPath = `/v1/ticketing/location/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} locationId 
         * @param {V1UpdateLocationRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationServiceUpdateLocation: async (locationId: string, body: V1UpdateLocationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'locationId' is not null or undefined
            assertParamExists('locationServiceUpdateLocation', 'locationId', locationId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('locationServiceUpdateLocation', 'body', body)
            const localVarPath = `/v1/ticketing/location/{location.id}`
                .replace(`{${"location.id"}}`, encodeURIComponent(String(locationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} locationId 
         * @param {V1UpdateLocationRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationServiceUpdateLocation2: async (locationId: string, body: V1UpdateLocationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'locationId' is not null or undefined
            assertParamExists('locationServiceUpdateLocation2', 'locationId', locationId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('locationServiceUpdateLocation2', 'body', body)
            const localVarPath = `/v1/ticketing/location/{location.id}`
                .replace(`{${"location.id"}}`, encodeURIComponent(String(locationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} hallId 
         * @param {LocationServiceCreateLocationHallRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationServiceUpdateLocationHall: async (id: string, hallId: string, body: LocationServiceCreateLocationHallRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('locationServiceUpdateLocationHall', 'id', id)
            // verify required parameter 'hallId' is not null or undefined
            assertParamExists('locationServiceUpdateLocationHall', 'hallId', hallId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('locationServiceUpdateLocationHall', 'body', body)
            const localVarPath = `/v1/ticketing/location/{id}/hall/{hall.id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"hall.id"}}`, encodeURIComponent(String(hallId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} hallId 
         * @param {LocationServiceCreateLocationHallRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationServiceUpdateLocationHall2: async (id: string, hallId: string, body: LocationServiceCreateLocationHallRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('locationServiceUpdateLocationHall2', 'id', id)
            // verify required parameter 'hallId' is not null or undefined
            assertParamExists('locationServiceUpdateLocationHall2', 'hallId', hallId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('locationServiceUpdateLocationHall2', 'body', body)
            const localVarPath = `/v1/ticketing/location/{id}/hall/{hall.id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"hall.id"}}`, encodeURIComponent(String(hallId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LocationServiceApi - functional programming interface
 * @export
 */
export const LocationServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LocationServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {V1CreateLocationRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async locationServiceCreateLocation(body: V1CreateLocationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Locationv1Location>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.locationServiceCreateLocation(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {LocationServiceCreateLocationHallRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async locationServiceCreateLocationHall(id: string, body: LocationServiceCreateLocationHallRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.locationServiceCreateLocationHall(id, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async locationServiceDeleteLocation(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1DeleteLocationReply>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.locationServiceDeleteLocation(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {string} hallId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async locationServiceDeleteLocationHall(id: string, hallId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1DeleteLocationHallReply>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.locationServiceDeleteLocationHall(id, hallId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async locationServiceGetLocation(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Locationv1Location>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.locationServiceGetLocation(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async locationServiceGetLocationHalls(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1GetLocationHallsReply>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.locationServiceGetLocationHalls(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async locationServiceGetLocationHalls2(id: string, body: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1GetLocationHallsReply>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.locationServiceGetLocationHalls2(id, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [pageOffset] 
         * @param {number} [pageSize] 
         * @param {string} [search] 
         * @param {Array<string>} [sort] 
         * @param {string} [fields] 
         * @param {string} [filterId$eq] 
         * @param {string} [filterId$neq] 
         * @param {string} [filterId$contains] 
         * @param {string} [filterId$startsWith] 
         * @param {string} [filterId$nstartsWith] 
         * @param {string} [filterId$endsWith] 
         * @param {string} [filterId$nendsWith] 
         * @param {Array<string>} [filterId$in] 
         * @param {Array<string>} [filterId$nin] 
         * @param {boolean} [filterId$null] 
         * @param {boolean} [filterId$nnull] 
         * @param {boolean} [filterId$empty] 
         * @param {boolean} [filterId$nempty] 
         * @param {string} [filterId$like] 
         * @param {string} [filterName$eq] 
         * @param {string} [filterName$neq] 
         * @param {string} [filterName$contains] 
         * @param {string} [filterName$startsWith] 
         * @param {string} [filterName$nstartsWith] 
         * @param {string} [filterName$endsWith] 
         * @param {string} [filterName$nendsWith] 
         * @param {Array<string>} [filterName$in] 
         * @param {Array<string>} [filterName$nin] 
         * @param {boolean} [filterName$null] 
         * @param {boolean} [filterName$nnull] 
         * @param {boolean} [filterName$empty] 
         * @param {boolean} [filterName$nempty] 
         * @param {string} [filterName$like] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async locationServiceListLocation(pageOffset?: number, pageSize?: number, search?: string, sort?: Array<string>, fields?: string, filterId$eq?: string, filterId$neq?: string, filterId$contains?: string, filterId$startsWith?: string, filterId$nstartsWith?: string, filterId$endsWith?: string, filterId$nendsWith?: string, filterId$in?: Array<string>, filterId$nin?: Array<string>, filterId$null?: boolean, filterId$nnull?: boolean, filterId$empty?: boolean, filterId$nempty?: boolean, filterId$like?: string, filterName$eq?: string, filterName$neq?: string, filterName$contains?: string, filterName$startsWith?: string, filterName$nstartsWith?: string, filterName$endsWith?: string, filterName$nendsWith?: string, filterName$in?: Array<string>, filterName$nin?: Array<string>, filterName$null?: boolean, filterName$nnull?: boolean, filterName$empty?: boolean, filterName$nempty?: boolean, filterName$like?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1ListLocationReply>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.locationServiceListLocation(pageOffset, pageSize, search, sort, fields, filterId$eq, filterId$neq, filterId$contains, filterId$startsWith, filterId$nstartsWith, filterId$endsWith, filterId$nendsWith, filterId$in, filterId$nin, filterId$null, filterId$nnull, filterId$empty, filterId$nempty, filterId$like, filterName$eq, filterName$neq, filterName$contains, filterName$startsWith, filterName$nstartsWith, filterName$endsWith, filterName$nendsWith, filterName$in, filterName$nin, filterName$null, filterName$nnull, filterName$empty, filterName$nempty, filterName$like, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {V1ListLocationRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async locationServiceListLocation2(body: V1ListLocationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1ListLocationReply>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.locationServiceListLocation2(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} locationId 
         * @param {V1UpdateLocationRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async locationServiceUpdateLocation(locationId: string, body: V1UpdateLocationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Locationv1Location>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.locationServiceUpdateLocation(locationId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} locationId 
         * @param {V1UpdateLocationRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async locationServiceUpdateLocation2(locationId: string, body: V1UpdateLocationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Locationv1Location>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.locationServiceUpdateLocation2(locationId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {string} hallId 
         * @param {LocationServiceCreateLocationHallRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async locationServiceUpdateLocationHall(id: string, hallId: string, body: LocationServiceCreateLocationHallRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.locationServiceUpdateLocationHall(id, hallId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {string} hallId 
         * @param {LocationServiceCreateLocationHallRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async locationServiceUpdateLocationHall2(id: string, hallId: string, body: LocationServiceCreateLocationHallRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.locationServiceUpdateLocationHall2(id, hallId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LocationServiceApi - factory interface
 * @export
 */
export const LocationServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LocationServiceApiFp(configuration)
    return {
        /**
         * 
         * @param {V1CreateLocationRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationServiceCreateLocation(body: V1CreateLocationRequest, options?: any): AxiosPromise<Locationv1Location> {
            return localVarFp.locationServiceCreateLocation(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {LocationServiceCreateLocationHallRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationServiceCreateLocationHall(id: string, body: LocationServiceCreateLocationHallRequest, options?: any): AxiosPromise<object> {
            return localVarFp.locationServiceCreateLocationHall(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationServiceDeleteLocation(id: string, options?: any): AxiosPromise<V1DeleteLocationReply> {
            return localVarFp.locationServiceDeleteLocation(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {string} hallId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationServiceDeleteLocationHall(id: string, hallId: string, options?: any): AxiosPromise<V1DeleteLocationHallReply> {
            return localVarFp.locationServiceDeleteLocationHall(id, hallId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationServiceGetLocation(id: string, options?: any): AxiosPromise<Locationv1Location> {
            return localVarFp.locationServiceGetLocation(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationServiceGetLocationHalls(id: string, options?: any): AxiosPromise<V1GetLocationHallsReply> {
            return localVarFp.locationServiceGetLocationHalls(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationServiceGetLocationHalls2(id: string, body: object, options?: any): AxiosPromise<V1GetLocationHallsReply> {
            return localVarFp.locationServiceGetLocationHalls2(id, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [pageOffset] 
         * @param {number} [pageSize] 
         * @param {string} [search] 
         * @param {Array<string>} [sort] 
         * @param {string} [fields] 
         * @param {string} [filterId$eq] 
         * @param {string} [filterId$neq] 
         * @param {string} [filterId$contains] 
         * @param {string} [filterId$startsWith] 
         * @param {string} [filterId$nstartsWith] 
         * @param {string} [filterId$endsWith] 
         * @param {string} [filterId$nendsWith] 
         * @param {Array<string>} [filterId$in] 
         * @param {Array<string>} [filterId$nin] 
         * @param {boolean} [filterId$null] 
         * @param {boolean} [filterId$nnull] 
         * @param {boolean} [filterId$empty] 
         * @param {boolean} [filterId$nempty] 
         * @param {string} [filterId$like] 
         * @param {string} [filterName$eq] 
         * @param {string} [filterName$neq] 
         * @param {string} [filterName$contains] 
         * @param {string} [filterName$startsWith] 
         * @param {string} [filterName$nstartsWith] 
         * @param {string} [filterName$endsWith] 
         * @param {string} [filterName$nendsWith] 
         * @param {Array<string>} [filterName$in] 
         * @param {Array<string>} [filterName$nin] 
         * @param {boolean} [filterName$null] 
         * @param {boolean} [filterName$nnull] 
         * @param {boolean} [filterName$empty] 
         * @param {boolean} [filterName$nempty] 
         * @param {string} [filterName$like] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationServiceListLocation(pageOffset?: number, pageSize?: number, search?: string, sort?: Array<string>, fields?: string, filterId$eq?: string, filterId$neq?: string, filterId$contains?: string, filterId$startsWith?: string, filterId$nstartsWith?: string, filterId$endsWith?: string, filterId$nendsWith?: string, filterId$in?: Array<string>, filterId$nin?: Array<string>, filterId$null?: boolean, filterId$nnull?: boolean, filterId$empty?: boolean, filterId$nempty?: boolean, filterId$like?: string, filterName$eq?: string, filterName$neq?: string, filterName$contains?: string, filterName$startsWith?: string, filterName$nstartsWith?: string, filterName$endsWith?: string, filterName$nendsWith?: string, filterName$in?: Array<string>, filterName$nin?: Array<string>, filterName$null?: boolean, filterName$nnull?: boolean, filterName$empty?: boolean, filterName$nempty?: boolean, filterName$like?: string, options?: any): AxiosPromise<V1ListLocationReply> {
            return localVarFp.locationServiceListLocation(pageOffset, pageSize, search, sort, fields, filterId$eq, filterId$neq, filterId$contains, filterId$startsWith, filterId$nstartsWith, filterId$endsWith, filterId$nendsWith, filterId$in, filterId$nin, filterId$null, filterId$nnull, filterId$empty, filterId$nempty, filterId$like, filterName$eq, filterName$neq, filterName$contains, filterName$startsWith, filterName$nstartsWith, filterName$endsWith, filterName$nendsWith, filterName$in, filterName$nin, filterName$null, filterName$nnull, filterName$empty, filterName$nempty, filterName$like, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {V1ListLocationRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationServiceListLocation2(body: V1ListLocationRequest, options?: any): AxiosPromise<V1ListLocationReply> {
            return localVarFp.locationServiceListLocation2(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} locationId 
         * @param {V1UpdateLocationRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationServiceUpdateLocation(locationId: string, body: V1UpdateLocationRequest, options?: any): AxiosPromise<Locationv1Location> {
            return localVarFp.locationServiceUpdateLocation(locationId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} locationId 
         * @param {V1UpdateLocationRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationServiceUpdateLocation2(locationId: string, body: V1UpdateLocationRequest, options?: any): AxiosPromise<Locationv1Location> {
            return localVarFp.locationServiceUpdateLocation2(locationId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {string} hallId 
         * @param {LocationServiceCreateLocationHallRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationServiceUpdateLocationHall(id: string, hallId: string, body: LocationServiceCreateLocationHallRequest, options?: any): AxiosPromise<object> {
            return localVarFp.locationServiceUpdateLocationHall(id, hallId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {string} hallId 
         * @param {LocationServiceCreateLocationHallRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        locationServiceUpdateLocationHall2(id: string, hallId: string, body: LocationServiceCreateLocationHallRequest, options?: any): AxiosPromise<object> {
            return localVarFp.locationServiceUpdateLocationHall2(id, hallId, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for locationServiceCreateLocation operation in LocationServiceApi.
 * @export
 * @interface LocationServiceApiLocationServiceCreateLocationRequest
 */
export interface LocationServiceApiLocationServiceCreateLocationRequest {
    /**
     * 
     * @type {V1CreateLocationRequest}
     * @memberof LocationServiceApiLocationServiceCreateLocation
     */
    readonly body: V1CreateLocationRequest
}

/**
 * Request parameters for locationServiceCreateLocationHall operation in LocationServiceApi.
 * @export
 * @interface LocationServiceApiLocationServiceCreateLocationHallRequest
 */
export interface LocationServiceApiLocationServiceCreateLocationHallRequest {
    /**
     * 
     * @type {string}
     * @memberof LocationServiceApiLocationServiceCreateLocationHall
     */
    readonly id: string

    /**
     * 
     * @type {LocationServiceCreateLocationHallRequest}
     * @memberof LocationServiceApiLocationServiceCreateLocationHall
     */
    readonly body: LocationServiceCreateLocationHallRequest
}

/**
 * Request parameters for locationServiceDeleteLocation operation in LocationServiceApi.
 * @export
 * @interface LocationServiceApiLocationServiceDeleteLocationRequest
 */
export interface LocationServiceApiLocationServiceDeleteLocationRequest {
    /**
     * 
     * @type {string}
     * @memberof LocationServiceApiLocationServiceDeleteLocation
     */
    readonly id: string
}

/**
 * Request parameters for locationServiceDeleteLocationHall operation in LocationServiceApi.
 * @export
 * @interface LocationServiceApiLocationServiceDeleteLocationHallRequest
 */
export interface LocationServiceApiLocationServiceDeleteLocationHallRequest {
    /**
     * 
     * @type {string}
     * @memberof LocationServiceApiLocationServiceDeleteLocationHall
     */
    readonly id: string

    /**
     * 
     * @type {string}
     * @memberof LocationServiceApiLocationServiceDeleteLocationHall
     */
    readonly hallId: string
}

/**
 * Request parameters for locationServiceGetLocation operation in LocationServiceApi.
 * @export
 * @interface LocationServiceApiLocationServiceGetLocationRequest
 */
export interface LocationServiceApiLocationServiceGetLocationRequest {
    /**
     * 
     * @type {string}
     * @memberof LocationServiceApiLocationServiceGetLocation
     */
    readonly id: string
}

/**
 * Request parameters for locationServiceGetLocationHalls operation in LocationServiceApi.
 * @export
 * @interface LocationServiceApiLocationServiceGetLocationHallsRequest
 */
export interface LocationServiceApiLocationServiceGetLocationHallsRequest {
    /**
     * 
     * @type {string}
     * @memberof LocationServiceApiLocationServiceGetLocationHalls
     */
    readonly id: string
}

/**
 * Request parameters for locationServiceGetLocationHalls2 operation in LocationServiceApi.
 * @export
 * @interface LocationServiceApiLocationServiceGetLocationHalls2Request
 */
export interface LocationServiceApiLocationServiceGetLocationHalls2Request {
    /**
     * 
     * @type {string}
     * @memberof LocationServiceApiLocationServiceGetLocationHalls2
     */
    readonly id: string

    /**
     * 
     * @type {object}
     * @memberof LocationServiceApiLocationServiceGetLocationHalls2
     */
    readonly body: object
}

/**
 * Request parameters for locationServiceListLocation operation in LocationServiceApi.
 * @export
 * @interface LocationServiceApiLocationServiceListLocationRequest
 */
export interface LocationServiceApiLocationServiceListLocationRequest {
    /**
     * 
     * @type {number}
     * @memberof LocationServiceApiLocationServiceListLocation
     */
    readonly pageOffset?: number

    /**
     * 
     * @type {number}
     * @memberof LocationServiceApiLocationServiceListLocation
     */
    readonly pageSize?: number

    /**
     * 
     * @type {string}
     * @memberof LocationServiceApiLocationServiceListLocation
     */
    readonly search?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof LocationServiceApiLocationServiceListLocation
     */
    readonly sort?: Array<string>

    /**
     * 
     * @type {string}
     * @memberof LocationServiceApiLocationServiceListLocation
     */
    readonly fields?: string

    /**
     * 
     * @type {string}
     * @memberof LocationServiceApiLocationServiceListLocation
     */
    readonly filterId$eq?: string

    /**
     * 
     * @type {string}
     * @memberof LocationServiceApiLocationServiceListLocation
     */
    readonly filterId$neq?: string

    /**
     * 
     * @type {string}
     * @memberof LocationServiceApiLocationServiceListLocation
     */
    readonly filterId$contains?: string

    /**
     * 
     * @type {string}
     * @memberof LocationServiceApiLocationServiceListLocation
     */
    readonly filterId$startsWith?: string

    /**
     * 
     * @type {string}
     * @memberof LocationServiceApiLocationServiceListLocation
     */
    readonly filterId$nstartsWith?: string

    /**
     * 
     * @type {string}
     * @memberof LocationServiceApiLocationServiceListLocation
     */
    readonly filterId$endsWith?: string

    /**
     * 
     * @type {string}
     * @memberof LocationServiceApiLocationServiceListLocation
     */
    readonly filterId$nendsWith?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof LocationServiceApiLocationServiceListLocation
     */
    readonly filterId$in?: Array<string>

    /**
     * 
     * @type {Array<string>}
     * @memberof LocationServiceApiLocationServiceListLocation
     */
    readonly filterId$nin?: Array<string>

    /**
     * 
     * @type {boolean}
     * @memberof LocationServiceApiLocationServiceListLocation
     */
    readonly filterId$null?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof LocationServiceApiLocationServiceListLocation
     */
    readonly filterId$nnull?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof LocationServiceApiLocationServiceListLocation
     */
    readonly filterId$empty?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof LocationServiceApiLocationServiceListLocation
     */
    readonly filterId$nempty?: boolean

    /**
     * 
     * @type {string}
     * @memberof LocationServiceApiLocationServiceListLocation
     */
    readonly filterId$like?: string

    /**
     * 
     * @type {string}
     * @memberof LocationServiceApiLocationServiceListLocation
     */
    readonly filterName$eq?: string

    /**
     * 
     * @type {string}
     * @memberof LocationServiceApiLocationServiceListLocation
     */
    readonly filterName$neq?: string

    /**
     * 
     * @type {string}
     * @memberof LocationServiceApiLocationServiceListLocation
     */
    readonly filterName$contains?: string

    /**
     * 
     * @type {string}
     * @memberof LocationServiceApiLocationServiceListLocation
     */
    readonly filterName$startsWith?: string

    /**
     * 
     * @type {string}
     * @memberof LocationServiceApiLocationServiceListLocation
     */
    readonly filterName$nstartsWith?: string

    /**
     * 
     * @type {string}
     * @memberof LocationServiceApiLocationServiceListLocation
     */
    readonly filterName$endsWith?: string

    /**
     * 
     * @type {string}
     * @memberof LocationServiceApiLocationServiceListLocation
     */
    readonly filterName$nendsWith?: string

    /**
     * 
     * @type {Array<string>}
     * @memberof LocationServiceApiLocationServiceListLocation
     */
    readonly filterName$in?: Array<string>

    /**
     * 
     * @type {Array<string>}
     * @memberof LocationServiceApiLocationServiceListLocation
     */
    readonly filterName$nin?: Array<string>

    /**
     * 
     * @type {boolean}
     * @memberof LocationServiceApiLocationServiceListLocation
     */
    readonly filterName$null?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof LocationServiceApiLocationServiceListLocation
     */
    readonly filterName$nnull?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof LocationServiceApiLocationServiceListLocation
     */
    readonly filterName$empty?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof LocationServiceApiLocationServiceListLocation
     */
    readonly filterName$nempty?: boolean

    /**
     * 
     * @type {string}
     * @memberof LocationServiceApiLocationServiceListLocation
     */
    readonly filterName$like?: string
}

/**
 * Request parameters for locationServiceListLocation2 operation in LocationServiceApi.
 * @export
 * @interface LocationServiceApiLocationServiceListLocation2Request
 */
export interface LocationServiceApiLocationServiceListLocation2Request {
    /**
     * 
     * @type {V1ListLocationRequest}
     * @memberof LocationServiceApiLocationServiceListLocation2
     */
    readonly body: V1ListLocationRequest
}

/**
 * Request parameters for locationServiceUpdateLocation operation in LocationServiceApi.
 * @export
 * @interface LocationServiceApiLocationServiceUpdateLocationRequest
 */
export interface LocationServiceApiLocationServiceUpdateLocationRequest {
    /**
     * 
     * @type {string}
     * @memberof LocationServiceApiLocationServiceUpdateLocation
     */
    readonly locationId: string

    /**
     * 
     * @type {V1UpdateLocationRequest}
     * @memberof LocationServiceApiLocationServiceUpdateLocation
     */
    readonly body: V1UpdateLocationRequest
}

/**
 * Request parameters for locationServiceUpdateLocation2 operation in LocationServiceApi.
 * @export
 * @interface LocationServiceApiLocationServiceUpdateLocation2Request
 */
export interface LocationServiceApiLocationServiceUpdateLocation2Request {
    /**
     * 
     * @type {string}
     * @memberof LocationServiceApiLocationServiceUpdateLocation2
     */
    readonly locationId: string

    /**
     * 
     * @type {V1UpdateLocationRequest}
     * @memberof LocationServiceApiLocationServiceUpdateLocation2
     */
    readonly body: V1UpdateLocationRequest
}

/**
 * Request parameters for locationServiceUpdateLocationHall operation in LocationServiceApi.
 * @export
 * @interface LocationServiceApiLocationServiceUpdateLocationHallRequest
 */
export interface LocationServiceApiLocationServiceUpdateLocationHallRequest {
    /**
     * 
     * @type {string}
     * @memberof LocationServiceApiLocationServiceUpdateLocationHall
     */
    readonly id: string

    /**
     * 
     * @type {string}
     * @memberof LocationServiceApiLocationServiceUpdateLocationHall
     */
    readonly hallId: string

    /**
     * 
     * @type {LocationServiceCreateLocationHallRequest}
     * @memberof LocationServiceApiLocationServiceUpdateLocationHall
     */
    readonly body: LocationServiceCreateLocationHallRequest
}

/**
 * Request parameters for locationServiceUpdateLocationHall2 operation in LocationServiceApi.
 * @export
 * @interface LocationServiceApiLocationServiceUpdateLocationHall2Request
 */
export interface LocationServiceApiLocationServiceUpdateLocationHall2Request {
    /**
     * 
     * @type {string}
     * @memberof LocationServiceApiLocationServiceUpdateLocationHall2
     */
    readonly id: string

    /**
     * 
     * @type {string}
     * @memberof LocationServiceApiLocationServiceUpdateLocationHall2
     */
    readonly hallId: string

    /**
     * 
     * @type {LocationServiceCreateLocationHallRequest}
     * @memberof LocationServiceApiLocationServiceUpdateLocationHall2
     */
    readonly body: LocationServiceCreateLocationHallRequest
}

/**
 * LocationServiceApi - object-oriented interface
 * @export
 * @class LocationServiceApi
 * @extends {BaseAPI}
 */
export class LocationServiceApi extends BaseAPI {
    /**
     * 
     * @param {LocationServiceApiLocationServiceCreateLocationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationServiceApi
     */
    public locationServiceCreateLocation(requestParameters: LocationServiceApiLocationServiceCreateLocationRequest, options?: AxiosRequestConfig) {
        return LocationServiceApiFp(this.configuration).locationServiceCreateLocation(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LocationServiceApiLocationServiceCreateLocationHallRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationServiceApi
     */
    public locationServiceCreateLocationHall(requestParameters: LocationServiceApiLocationServiceCreateLocationHallRequest, options?: AxiosRequestConfig) {
        return LocationServiceApiFp(this.configuration).locationServiceCreateLocationHall(requestParameters.id, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LocationServiceApiLocationServiceDeleteLocationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationServiceApi
     */
    public locationServiceDeleteLocation(requestParameters: LocationServiceApiLocationServiceDeleteLocationRequest, options?: AxiosRequestConfig) {
        return LocationServiceApiFp(this.configuration).locationServiceDeleteLocation(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LocationServiceApiLocationServiceDeleteLocationHallRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationServiceApi
     */
    public locationServiceDeleteLocationHall(requestParameters: LocationServiceApiLocationServiceDeleteLocationHallRequest, options?: AxiosRequestConfig) {
        return LocationServiceApiFp(this.configuration).locationServiceDeleteLocationHall(requestParameters.id, requestParameters.hallId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LocationServiceApiLocationServiceGetLocationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationServiceApi
     */
    public locationServiceGetLocation(requestParameters: LocationServiceApiLocationServiceGetLocationRequest, options?: AxiosRequestConfig) {
        return LocationServiceApiFp(this.configuration).locationServiceGetLocation(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LocationServiceApiLocationServiceGetLocationHallsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationServiceApi
     */
    public locationServiceGetLocationHalls(requestParameters: LocationServiceApiLocationServiceGetLocationHallsRequest, options?: AxiosRequestConfig) {
        return LocationServiceApiFp(this.configuration).locationServiceGetLocationHalls(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LocationServiceApiLocationServiceGetLocationHalls2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationServiceApi
     */
    public locationServiceGetLocationHalls2(requestParameters: LocationServiceApiLocationServiceGetLocationHalls2Request, options?: AxiosRequestConfig) {
        return LocationServiceApiFp(this.configuration).locationServiceGetLocationHalls2(requestParameters.id, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LocationServiceApiLocationServiceListLocationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationServiceApi
     */
    public locationServiceListLocation(requestParameters: LocationServiceApiLocationServiceListLocationRequest = {}, options?: AxiosRequestConfig) {
        return LocationServiceApiFp(this.configuration).locationServiceListLocation(requestParameters.pageOffset, requestParameters.pageSize, requestParameters.search, requestParameters.sort, requestParameters.fields, requestParameters.filterId$eq, requestParameters.filterId$neq, requestParameters.filterId$contains, requestParameters.filterId$startsWith, requestParameters.filterId$nstartsWith, requestParameters.filterId$endsWith, requestParameters.filterId$nendsWith, requestParameters.filterId$in, requestParameters.filterId$nin, requestParameters.filterId$null, requestParameters.filterId$nnull, requestParameters.filterId$empty, requestParameters.filterId$nempty, requestParameters.filterId$like, requestParameters.filterName$eq, requestParameters.filterName$neq, requestParameters.filterName$contains, requestParameters.filterName$startsWith, requestParameters.filterName$nstartsWith, requestParameters.filterName$endsWith, requestParameters.filterName$nendsWith, requestParameters.filterName$in, requestParameters.filterName$nin, requestParameters.filterName$null, requestParameters.filterName$nnull, requestParameters.filterName$empty, requestParameters.filterName$nempty, requestParameters.filterName$like, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LocationServiceApiLocationServiceListLocation2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationServiceApi
     */
    public locationServiceListLocation2(requestParameters: LocationServiceApiLocationServiceListLocation2Request, options?: AxiosRequestConfig) {
        return LocationServiceApiFp(this.configuration).locationServiceListLocation2(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LocationServiceApiLocationServiceUpdateLocationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationServiceApi
     */
    public locationServiceUpdateLocation(requestParameters: LocationServiceApiLocationServiceUpdateLocationRequest, options?: AxiosRequestConfig) {
        return LocationServiceApiFp(this.configuration).locationServiceUpdateLocation(requestParameters.locationId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LocationServiceApiLocationServiceUpdateLocation2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationServiceApi
     */
    public locationServiceUpdateLocation2(requestParameters: LocationServiceApiLocationServiceUpdateLocation2Request, options?: AxiosRequestConfig) {
        return LocationServiceApiFp(this.configuration).locationServiceUpdateLocation2(requestParameters.locationId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LocationServiceApiLocationServiceUpdateLocationHallRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationServiceApi
     */
    public locationServiceUpdateLocationHall(requestParameters: LocationServiceApiLocationServiceUpdateLocationHallRequest, options?: AxiosRequestConfig) {
        return LocationServiceApiFp(this.configuration).locationServiceUpdateLocationHall(requestParameters.id, requestParameters.hallId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LocationServiceApiLocationServiceUpdateLocationHall2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationServiceApi
     */
    public locationServiceUpdateLocationHall2(requestParameters: LocationServiceApiLocationServiceUpdateLocationHall2Request, options?: AxiosRequestConfig) {
        return LocationServiceApiFp(this.configuration).locationServiceUpdateLocationHall2(requestParameters.id, requestParameters.hallId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}
