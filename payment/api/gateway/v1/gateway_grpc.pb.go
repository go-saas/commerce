// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: payment/api/gateway/v1/gateway.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PaymentGatewayService_GetPaymentMethod_FullMethodName = "/payment.api.gateway.v1.PaymentGatewayService/GetPaymentMethod"
)

// PaymentGatewayServiceClient is the client API for PaymentGatewayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PaymentGatewayServiceClient interface {
	GetPaymentMethod(ctx context.Context, in *GetPaymentMethodRequest, opts ...grpc.CallOption) (*GetPaymentMethodReply, error)
}

type paymentGatewayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentGatewayServiceClient(cc grpc.ClientConnInterface) PaymentGatewayServiceClient {
	return &paymentGatewayServiceClient{cc}
}

func (c *paymentGatewayServiceClient) GetPaymentMethod(ctx context.Context, in *GetPaymentMethodRequest, opts ...grpc.CallOption) (*GetPaymentMethodReply, error) {
	out := new(GetPaymentMethodReply)
	err := c.cc.Invoke(ctx, PaymentGatewayService_GetPaymentMethod_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentGatewayServiceServer is the server API for PaymentGatewayService service.
// All implementations should embed UnimplementedPaymentGatewayServiceServer
// for forward compatibility
type PaymentGatewayServiceServer interface {
	GetPaymentMethod(context.Context, *GetPaymentMethodRequest) (*GetPaymentMethodReply, error)
}

// UnimplementedPaymentGatewayServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPaymentGatewayServiceServer struct {
}

func (UnimplementedPaymentGatewayServiceServer) GetPaymentMethod(context.Context, *GetPaymentMethodRequest) (*GetPaymentMethodReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaymentMethod not implemented")
}

// UnsafePaymentGatewayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentGatewayServiceServer will
// result in compilation errors.
type UnsafePaymentGatewayServiceServer interface {
	mustEmbedUnimplementedPaymentGatewayServiceServer()
}

func RegisterPaymentGatewayServiceServer(s grpc.ServiceRegistrar, srv PaymentGatewayServiceServer) {
	s.RegisterService(&PaymentGatewayService_ServiceDesc, srv)
}

func _PaymentGatewayService_GetPaymentMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPaymentMethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentGatewayServiceServer).GetPaymentMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentGatewayService_GetPaymentMethod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentGatewayServiceServer).GetPaymentMethod(ctx, req.(*GetPaymentMethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PaymentGatewayService_ServiceDesc is the grpc.ServiceDesc for PaymentGatewayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaymentGatewayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "payment.api.gateway.v1.PaymentGatewayService",
	HandlerType: (*PaymentGatewayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPaymentMethod",
			Handler:    _PaymentGatewayService_GetPaymentMethod_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "payment/api/gateway/v1/gateway.proto",
}

const (
	StripePaymentGatewayService_CreateStripePaymentIntent_FullMethodName = "/payment.api.gateway.v1.StripePaymentGatewayService/CreateStripePaymentIntent"
	StripePaymentGatewayService_StripeWebhook_FullMethodName             = "/payment.api.gateway.v1.StripePaymentGatewayService/StripeWebhook"
)

// StripePaymentGatewayServiceClient is the client API for StripePaymentGatewayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StripePaymentGatewayServiceClient interface {
	CreateStripePaymentIntent(ctx context.Context, in *CreateStripePaymentIntentRequest, opts ...grpc.CallOption) (*CreateStripePaymentIntentReply, error)
	StripeWebhook(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StripeWebhookReply, error)
}

type stripePaymentGatewayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStripePaymentGatewayServiceClient(cc grpc.ClientConnInterface) StripePaymentGatewayServiceClient {
	return &stripePaymentGatewayServiceClient{cc}
}

func (c *stripePaymentGatewayServiceClient) CreateStripePaymentIntent(ctx context.Context, in *CreateStripePaymentIntentRequest, opts ...grpc.CallOption) (*CreateStripePaymentIntentReply, error) {
	out := new(CreateStripePaymentIntentReply)
	err := c.cc.Invoke(ctx, StripePaymentGatewayService_CreateStripePaymentIntent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stripePaymentGatewayServiceClient) StripeWebhook(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StripeWebhookReply, error) {
	out := new(StripeWebhookReply)
	err := c.cc.Invoke(ctx, StripePaymentGatewayService_StripeWebhook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StripePaymentGatewayServiceServer is the server API for StripePaymentGatewayService service.
// All implementations should embed UnimplementedStripePaymentGatewayServiceServer
// for forward compatibility
type StripePaymentGatewayServiceServer interface {
	CreateStripePaymentIntent(context.Context, *CreateStripePaymentIntentRequest) (*CreateStripePaymentIntentReply, error)
	StripeWebhook(context.Context, *emptypb.Empty) (*StripeWebhookReply, error)
}

// UnimplementedStripePaymentGatewayServiceServer should be embedded to have forward compatible implementations.
type UnimplementedStripePaymentGatewayServiceServer struct {
}

func (UnimplementedStripePaymentGatewayServiceServer) CreateStripePaymentIntent(context.Context, *CreateStripePaymentIntentRequest) (*CreateStripePaymentIntentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStripePaymentIntent not implemented")
}
func (UnimplementedStripePaymentGatewayServiceServer) StripeWebhook(context.Context, *emptypb.Empty) (*StripeWebhookReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StripeWebhook not implemented")
}

// UnsafeStripePaymentGatewayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StripePaymentGatewayServiceServer will
// result in compilation errors.
type UnsafeStripePaymentGatewayServiceServer interface {
	mustEmbedUnimplementedStripePaymentGatewayServiceServer()
}

func RegisterStripePaymentGatewayServiceServer(s grpc.ServiceRegistrar, srv StripePaymentGatewayServiceServer) {
	s.RegisterService(&StripePaymentGatewayService_ServiceDesc, srv)
}

func _StripePaymentGatewayService_CreateStripePaymentIntent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStripePaymentIntentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StripePaymentGatewayServiceServer).CreateStripePaymentIntent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StripePaymentGatewayService_CreateStripePaymentIntent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StripePaymentGatewayServiceServer).CreateStripePaymentIntent(ctx, req.(*CreateStripePaymentIntentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StripePaymentGatewayService_StripeWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StripePaymentGatewayServiceServer).StripeWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StripePaymentGatewayService_StripeWebhook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StripePaymentGatewayServiceServer).StripeWebhook(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// StripePaymentGatewayService_ServiceDesc is the grpc.ServiceDesc for StripePaymentGatewayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StripePaymentGatewayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "payment.api.gateway.v1.StripePaymentGatewayService",
	HandlerType: (*StripePaymentGatewayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateStripePaymentIntent",
			Handler:    _StripePaymentGatewayService_CreateStripePaymentIntent_Handler,
		},
		{
			MethodName: "StripeWebhook",
			Handler:    _StripePaymentGatewayService_StripeWebhook_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "payment/api/gateway/v1/gateway.proto",
}
